; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\lcd_graphics.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\lcd_graphics.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O3 --diag_suppress=9931 -I.\Include -I.\Source\Profiler -I.\Source\LCD -I.\Source\FS -I.\Source\ulibSD -I.\RTE\Device\MKL25Z128xxx4 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.15.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DMKL25Z128xxx4 --omf_browse=.\objects\lcd_graphics.crf Source\LCD\LCD_graphics.c]
                          THUMB

                          AREA ||i.Graphics_Test||, CODE, READONLY, ALIGN=1

                  Graphics_Test PROC
;;;11     
;;;12     void Graphics_Test(void) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b087              SUB      sp,sp,#0x1c
;;;13     	int x, y, r;
;;;14     	PT_T p1, p2;
;;;15     	COLOR_T c;
;;;16     	volatile int n;
;;;17     	
;;;18     	p1.X = LCD_WIDTH/2;
;;;19     	p1.Y = LCD_HEIGHT/2;
000004  20a0              MOVS     r0,#0xa0
000006  2778              MOVS     r7,#0x78              ;18
;;;20     
;;;21     	c.R = 100;
000008  9001              STR      r0,[sp,#4]
00000a  2164              MOVS     r1,#0x64
00000c  9700              STR      r7,[sp,#0]
00000e  4668              MOV      r0,sp
000010  7201              STRB     r1,[r0,#8]
;;;22     	c.G = 255;
000012  24ff              MOVS     r4,#0xff
000014  7244              STRB     r4,[r0,#9]
;;;23     	c.B = 255;
000016  7284              STRB     r4,[r0,#0xa]
;;;24     
;;;25     	LCD_Fill_Buffer(&c);
000018  a802              ADD      r0,sp,#8
00001a  f7fffffe          BL       LCD_Fill_Buffer
;;;26     	LCD_Refresh();
00001e  f7fffffe          BL       LCD_Refresh
;;;27     
;;;28     	c.G = 0;
000022  2600              MOVS     r6,#0
000024  4668              MOV      r0,sp
000026  7246              STRB     r6,[r0,#9]
;;;29     	LCD_Fill_Buffer(&c);
000028  a802              ADD      r0,sp,#8
00002a  f7fffffe          BL       LCD_Fill_Buffer
;;;30     	LCD_Refresh();
00002e  f7fffffe          BL       LCD_Refresh
;;;31     
;;;32     	c.G = 255;
000032  4668              MOV      r0,sp
000034  7244              STRB     r4,[r0,#9]
;;;33     	p1.X = p1.Y = 0;
000036  9601              STR      r6,[sp,#4]
;;;34     	for (x = 0; x<LCD_WIDTH; x++) {
000038  2500              MOVS     r5,#0
00003a  9600              STR      r6,[sp,#0]
                  |L1.60|
;;;35     		p1.X++;
00003c  9800              LDR      r0,[sp,#0]
00003e  1c40              ADDS     r0,r0,#1
;;;36     		if (x&1)
000040  9000              STR      r0,[sp,#0]
000042  07e8              LSLS     r0,r5,#31
000044  d002              BEQ      |L1.76|
;;;37     			p1.Y++;
000046  9801              LDR      r0,[sp,#4]
000048  1c40              ADDS     r0,r0,#1
00004a  9001              STR      r0,[sp,#4]
                  |L1.76|
;;;38     		LCD_Plot_Pixel(&p1, &c);
00004c  a902              ADD      r1,sp,#8
00004e  4668              MOV      r0,sp
000050  f7fffffe          BL       LCD_Plot_Pixel
;;;39     		LCD_Refresh();
000054  f7fffffe          BL       LCD_Refresh
000058  1c6d              ADDS     r5,r5,#1
00005a  2df0              CMP      r5,#0xf0              ;34
00005c  dbee              BLT      |L1.60|
;;;40     	}
;;;41     	
;;;42     	// vertical lines
;;;43     	p1.Y = 0;
;;;44     	p2.Y = LCD_HEIGHT-1;
00005e  20ff              MOVS     r0,#0xff
000060  3040              ADDS     r0,r0,#0x40
;;;45     	for (x=0; x<LCD_WIDTH; x += 1) {
000062  2500              MOVS     r5,#0
000064  9601              STR      r6,[sp,#4]
000066  9004              STR      r0,[sp,#0x10]
                  |L1.104|
;;;46     		p1.X = p2.X = x;
000068  9503              STR      r5,[sp,#0xc]
;;;47     		LCD_Draw_Line(&p1, &p2, &c);
00006a  aa02              ADD      r2,sp,#8
00006c  a903              ADD      r1,sp,#0xc
00006e  4668              MOV      r0,sp
000070  9500              STR      r5,[sp,#0]
000072  f7fffffe          BL       LCD_Draw_Line
;;;48     		LCD_Refresh();
000076  f7fffffe          BL       LCD_Refresh
00007a  1c6d              ADDS     r5,r5,#1
00007c  2df0              CMP      r5,#0xf0              ;45
00007e  dbf3              BLT      |L1.104|
;;;49     	}
;;;50     	
;;;51     	p1.X = LCD_WIDTH/2;
;;;52     	p1.Y = LCD_HEIGHT/2;
000080  20a0              MOVS     r0,#0xa0
;;;53     	c.G = 0xff;
000082  9001              STR      r0,[sp,#4]
000084  9700              STR      r7,[sp,#0]
000086  4668              MOV      r0,sp
000088  7244              STRB     r4,[r0,#9]
;;;54     
;;;55     	// Do circles	
;;;56     	// Time filled circles
;;;57     	for (r = 100; r>8; r -= 1) {
00008a  2564              MOVS     r5,#0x64
                  |L1.140|
;;;58     		LCD_Draw_Circle(&p1, r, &c, 1);
00008c  2301              MOVS     r3,#1
00008e  aa02              ADD      r2,sp,#8
000090  4629              MOV      r1,r5
000092  f7fffffe          BL       LCD_Draw_Circle
;;;59     		LCD_Refresh();
000096  f7fffffe          BL       LCD_Refresh
;;;60     		c.B -= 8;
00009a  4668              MOV      r0,sp
00009c  7a81              LDRB     r1,[r0,#0xa]
;;;61     		c.G ^= 0xff;
;;;62     		c.R -= 16;
00009e  1e6d              SUBS     r5,r5,#1
0000a0  3908              SUBS     r1,r1,#8              ;60
0000a2  7281              STRB     r1,[r0,#0xa]          ;60
0000a4  7a41              LDRB     r1,[r0,#9]            ;61
0000a6  4061              EORS     r1,r1,r4              ;61
0000a8  7241              STRB     r1,[r0,#9]            ;61
0000aa  7a01              LDRB     r1,[r0,#8]
0000ac  3910              SUBS     r1,r1,#0x10
0000ae  7201              STRB     r1,[r0,#8]
0000b0  2d08              CMP      r5,#8                 ;57
0000b2  dceb              BGT      |L1.140|
;;;63     	}
;;;64     
;;;65     	c.G = 100;
0000b4  2064              MOVS     r0,#0x64
0000b6  4669              MOV      r1,sp
0000b8  7248              STRB     r0,[r1,#9]
;;;66     	for (x=0; x<LCD_WIDTH; x += STEP) {
0000ba  2500              MOVS     r5,#0
                  |L1.188|
;;;67     		p1.X = x+20;
0000bc  4628              MOV      r0,r5
0000be  3014              ADDS     r0,r0,#0x14
;;;68     		LCD_Draw_Circle(&p1, 5 + x/10, &c, 1);
0000c0  9000              STR      r0,[sp,#0]
0000c2  210a              MOVS     r1,#0xa
0000c4  4628              MOV      r0,r5
0000c6  f7fffffe          BL       __aeabi_idivmod
0000ca  1d41              ADDS     r1,r0,#5
0000cc  2301              MOVS     r3,#1
0000ce  aa02              ADD      r2,sp,#8
0000d0  4668              MOV      r0,sp
0000d2  f7fffffe          BL       LCD_Draw_Circle
;;;69     		LCD_Refresh();
0000d6  f7fffffe          BL       LCD_Refresh
0000da  3508              ADDS     r5,r5,#8
0000dc  2df0              CMP      r5,#0xf0              ;66
0000de  dbed              BLT      |L1.188|
;;;70     	}
;;;71     	
;;;72     	// Time drawing lines radiating from center
;;;73     	p1.X = LCD_WIDTH/2;
;;;74     	p1.Y = LCD_HEIGHT/2;
0000e0  20a0              MOVS     r0,#0xa0
;;;75     	
;;;76     	p2.Y = 0;
0000e2  9001              STR      r0,[sp,#4]
0000e4  2000              MOVS     r0,#0
;;;77     	c.G = 100;
0000e6  2664              MOVS     r6,#0x64
0000e8  9004              STR      r0,[sp,#0x10]
0000ea  9700              STR      r7,[sp,#0]            ;76
0000ec  4668              MOV      r0,sp
0000ee  7246              STRB     r6,[r0,#9]
;;;78     	for (x=0; x<LCD_WIDTH; x += STEP) {
0000f0  2500              MOVS     r5,#0
                  |L1.242|
;;;79     		p2.X = x;
;;;80     		LCD_Draw_Line(&p1, &p2, &c);
0000f2  aa02              ADD      r2,sp,#8
0000f4  a903              ADD      r1,sp,#0xc
0000f6  4668              MOV      r0,sp
0000f8  9503              STR      r5,[sp,#0xc]
0000fa  f7fffffe          BL       LCD_Draw_Line
;;;81     		LCD_Refresh();
0000fe  f7fffffe          BL       LCD_Refresh
000102  3508              ADDS     r5,r5,#8
000104  2df0              CMP      r5,#0xf0              ;78
000106  dbf4              BLT      |L1.242|
;;;82     	}
;;;83     	
;;;84     	c.G = 100;
000108  4668              MOV      r0,sp
00010a  7246              STRB     r6,[r0,#9]
;;;85     	c.B = 100;
00010c  7286              STRB     r6,[r0,#0xa]
;;;86     	c.R = 255;
00010e  7204              STRB     r4,[r0,#8]
;;;87     	p2.X = LCD_WIDTH-1;
000110  20ef              MOVS     r0,#0xef
;;;88     	for (y=0; y<LCD_HEIGHT; y += STEP) {
000112  2500              MOVS     r5,#0
000114  27ff              MOVS     r7,#0xff
000116  3741              ADDS     r7,r7,#0x41
000118  9003              STR      r0,[sp,#0xc]
                  |L1.282|
;;;89     		p2.Y = y;
;;;90     		LCD_Draw_Line(&p1, &p2, &c);
00011a  aa02              ADD      r2,sp,#8
00011c  a903              ADD      r1,sp,#0xc
00011e  4668              MOV      r0,sp
000120  9504              STR      r5,[sp,#0x10]
000122  f7fffffe          BL       LCD_Draw_Line
;;;91     		LCD_Refresh();
000126  f7fffffe          BL       LCD_Refresh
00012a  3508              ADDS     r5,r5,#8
00012c  42bd              CMP      r5,r7                 ;88
00012e  dbf4              BLT      |L1.282|
;;;92     	}
;;;93     
;;;94     	c.R = 100;
000130  4668              MOV      r0,sp
000132  7206              STRB     r6,[r0,#8]
;;;95     	c.B = 100;
000134  7286              STRB     r6,[r0,#0xa]
;;;96     	c.G = 255;
000136  7244              STRB     r4,[r0,#9]
;;;97     	p2.Y = LCD_HEIGHT-1;
000138  20ff              MOVS     r0,#0xff
00013a  3040              ADDS     r0,r0,#0x40
;;;98     	for (x=0; x<LCD_WIDTH; x += STEP) {
00013c  2500              MOVS     r5,#0
00013e  9004              STR      r0,[sp,#0x10]
                  |L1.320|
;;;99     		p2.X = x;
;;;100    		LCD_Draw_Line(&p1, &p2, &c);
000140  aa02              ADD      r2,sp,#8
000142  a903              ADD      r1,sp,#0xc
000144  4668              MOV      r0,sp
000146  9503              STR      r5,[sp,#0xc]
000148  f7fffffe          BL       LCD_Draw_Line
;;;101    		LCD_Refresh();
00014c  f7fffffe          BL       LCD_Refresh
000150  3508              ADDS     r5,r5,#8
000152  2df0              CMP      r5,#0xf0              ;98
000154  dbf4              BLT      |L1.320|
;;;102    	}
;;;103    
;;;104    	c.R = 200;
000156  21c8              MOVS     r1,#0xc8
000158  4668              MOV      r0,sp
00015a  7201              STRB     r1,[r0,#8]
;;;105    	c.B = 100;
00015c  7286              STRB     r6,[r0,#0xa]
;;;106    	c.G = 255;
00015e  7244              STRB     r4,[r0,#9]
;;;107    	p2.X = 0;
000160  2000              MOVS     r0,#0
;;;108    	for (y=0; y<LCD_HEIGHT; y += STEP) {
000162  4604              MOV      r4,r0
000164  9003              STR      r0,[sp,#0xc]
                  |L1.358|
;;;109    		p2.Y = y;
;;;110    		LCD_Draw_Line(&p1, &p2, &c);
000166  aa02              ADD      r2,sp,#8
000168  a903              ADD      r1,sp,#0xc
00016a  4668              MOV      r0,sp
00016c  9404              STR      r4,[sp,#0x10]
00016e  f7fffffe          BL       LCD_Draw_Line
;;;111    		LCD_Refresh();
000172  f7fffffe          BL       LCD_Refresh
000176  3408              ADDS     r4,r4,#8
000178  42bc              CMP      r4,r7                 ;108
00017a  dbf4              BLT      |L1.358|
;;;112    	}
;;;113    
;;;114    #if 0 	
;;;115    	// Dither test
;;;116    	c.G = 0;
;;;117    	LCD_Fill_Buffer(&c);
;;;118    	p1.X = 0;
;;;119    	p2.X = LCD_WIDTH-1;
;;;120    	p1.Y = p2.Y = LCD_HEIGHT/2;
;;;121    	n = 0;
;;;122    	c.G = 0xff;
;;;123    	LCD_Draw_Line(&p1, &p2, &c);
;;;124    	LCD_Refresh();
;;;125    	p1.Y+=2;
;;;126    	p2.Y+=2;
;;;127    	while (1) {
;;;128    		if (n++ & 1)
;;;129    			c.G = 0xff;
;;;130    		else 
;;;131    			c.G = 0;
;;;132    		LCD_Draw_Line(&p1, &p2, &c);
;;;133    		LCD_Refresh();
;;;134    	}
;;;135    #endif
;;;136    	
;;;137    }
00017c  b007              ADD      sp,sp,#0x1c
00017e  bdf0              POP      {r4-r7,pc}
;;;138    
                          ENDP


                          AREA ||i.LCD_Draw_Circle||, CODE, READONLY, ALIGN=1

                  LCD_Draw_Circle PROC
;;;447    /* Draw a circle at coordinates xm, ym with radius r and specified color c. */
;;;448    void LCD_Draw_Circle(PT_T * pc, int radius, COLOR_T * c, int filled) {
000000  b5ff              PUSH     {r0-r7,lr}
000002  4606              MOV      r6,r0
;;;449    	PT_T p1, p2;
;;;450      int x = -radius, y = 0, err = 2-2*radius; /* II. Quadrant */ 
000004  424f              RSBS     r7,r1,#0
000006  0048              LSLS     r0,r1,#1
000008  2102              MOVS     r1,#2
00000a  2500              MOVS     r5,#0
00000c  1a0c              SUBS     r4,r1,r0
00000e  b085              SUB      sp,sp,#0x14           ;448
;;;451      if (filled>0) { 
000010  2b00              CMP      r3,#0
000012  dd2e              BLE      |L2.114|
                  |L2.20|
;;;452    		do {
;;;453          //setPixel(xm+x, ym-y); /* III. Quadrant */
;;;454    		 	p1.X=pc->X+x;
000014  6830              LDR      r0,[r6,#0]
;;;455    			p1.Y=pc->Y-y;
;;;456    			p2.X=pc->X-x;
;;;457    			p2.Y=pc->Y-y;
;;;458    			LCD_Draw_Line(&p1, &p2, c);
000016  a902              ADD      r1,sp,#8
000018  19c0              ADDS     r0,r0,r7              ;454
00001a  9000              STR      r0,[sp,#0]            ;455
00001c  6870              LDR      r0,[r6,#4]            ;455
00001e  1b40              SUBS     r0,r0,r5              ;455
000020  9001              STR      r0,[sp,#4]            ;456
000022  6830              LDR      r0,[r6,#0]            ;456
000024  1bc0              SUBS     r0,r0,r7              ;456
000026  9002              STR      r0,[sp,#8]            ;457
000028  6870              LDR      r0,[r6,#4]            ;457
00002a  9a07              LDR      r2,[sp,#0x1c]
00002c  1b40              SUBS     r0,r0,r5              ;457
00002e  9003              STR      r0,[sp,#0xc]
000030  4668              MOV      r0,sp
000032  f7fffffe          BL       LCD_Draw_Line
;;;459    			p1.Y=pc->Y+y;
000036  6870              LDR      r0,[r6,#4]
;;;460    			p2.Y=pc->Y+y;
;;;461    			LCD_Draw_Line(&p1, &p2, c);
000038  a902              ADD      r1,sp,#8
00003a  1940              ADDS     r0,r0,r5              ;459
00003c  9001              STR      r0,[sp,#4]            ;460
00003e  6870              LDR      r0,[r6,#4]            ;460
000040  9a07              LDR      r2,[sp,#0x1c]
000042  1940              ADDS     r0,r0,r5              ;460
000044  9003              STR      r0,[sp,#0xc]
000046  4668              MOV      r0,sp
000048  f7fffffe          BL       LCD_Draw_Line
;;;462    
;;;463    			radius = err;
00004c  4620              MOV      r0,r4
;;;464          if (radius <= y) 
00004e  42ac              CMP      r4,r5
000050  dc03              BGT      |L2.90|
000052  1c6d              ADDS     r5,r5,#1
;;;465    				err += ++y*2+1;           /* e_xy+e_y < 0 */
000054  0069              LSLS     r1,r5,#1
000056  180c              ADDS     r4,r1,r0
000058  1c64              ADDS     r4,r4,#1
                  |L2.90|
;;;466          if (radius > x || err > y) 
00005a  42b8              CMP      r0,r7
00005c  dc01              BGT      |L2.98|
00005e  42ac              CMP      r4,r5
000060  dd03              BLE      |L2.106|
                  |L2.98|
000062  1c7f              ADDS     r7,r7,#1
;;;467    				err += ++x*2+1; /* e_xy+e_x > 0 or no 2nd y-step */
000064  0078              LSLS     r0,r7,#1
000066  1904              ADDS     r4,r0,r4
000068  1c64              ADDS     r4,r4,#1
                  |L2.106|
;;;468    		} while (x < 0); 
00006a  2f00              CMP      r7,#0
00006c  dbd2              BLT      |L2.20|
                  |L2.110|
;;;469     } else {
;;;470    		do {
;;;471          //setPixel(xm-x, ym+y); /*   I. Quadrant */
;;;472    			p1.X=pc->X-x;
;;;473    			p1.Y=pc->Y+y;
;;;474    			LCD_Plot_Pixel(&p1,c);
;;;475          //setPixel(xm-y, ym-x); /*  II. Quadrant */
;;;476    		 	p1.X=pc->X-y;
;;;477    			p1.Y=pc->Y-x;
;;;478    			LCD_Plot_Pixel(&p1,c);
;;;479          //setPixel(xm+x, ym-y); /* III. Quadrant */
;;;480    		 	p1.X=pc->X+x;
;;;481    			p1.Y=pc->Y-y;
;;;482    			LCD_Plot_Pixel(&p1,c);
;;;483          //setPixel(xm+y, ym+x); /*  IV. Quadrant */
;;;484    		 	p1.X=pc->X+y;
;;;485    			p1.Y=pc->Y+x;
;;;486    			LCD_Plot_Pixel(&p1,c);
;;;487          radius = err;
;;;488          if (radius <= y) err += ++y*2+1;           /* e_xy+e_y < 0 */
;;;489          if (radius > x || err > y) 
;;;490    				err += ++x*2+1; /* e_xy+e_x > 0 or no 2nd y-step */
;;;491    		} while (x < 0);
;;;492    	}
;;;493    }
00006e  b009              ADD      sp,sp,#0x24
000070  bdf0              POP      {r4-r7,pc}
                  |L2.114|
000072  6830              LDR      r0,[r6,#0]            ;472
000074  9907              LDR      r1,[sp,#0x1c]         ;474
000076  1bc0              SUBS     r0,r0,r7              ;472
000078  9000              STR      r0,[sp,#0]            ;473
00007a  6870              LDR      r0,[r6,#4]            ;473
00007c  1940              ADDS     r0,r0,r5              ;473
00007e  9001              STR      r0,[sp,#4]            ;474
000080  4668              MOV      r0,sp                 ;474
000082  f7fffffe          BL       LCD_Plot_Pixel
000086  6830              LDR      r0,[r6,#0]            ;476
000088  9907              LDR      r1,[sp,#0x1c]         ;478
00008a  1b40              SUBS     r0,r0,r5              ;476
00008c  9000              STR      r0,[sp,#0]            ;477
00008e  6870              LDR      r0,[r6,#4]            ;477
000090  1bc0              SUBS     r0,r0,r7              ;477
000092  9001              STR      r0,[sp,#4]            ;478
000094  4668              MOV      r0,sp                 ;478
000096  f7fffffe          BL       LCD_Plot_Pixel
00009a  6830              LDR      r0,[r6,#0]            ;480
00009c  9907              LDR      r1,[sp,#0x1c]         ;482
00009e  19c0              ADDS     r0,r0,r7              ;480
0000a0  9000              STR      r0,[sp,#0]            ;481
0000a2  6870              LDR      r0,[r6,#4]            ;481
0000a4  1b40              SUBS     r0,r0,r5              ;481
0000a6  9001              STR      r0,[sp,#4]            ;482
0000a8  4668              MOV      r0,sp                 ;482
0000aa  f7fffffe          BL       LCD_Plot_Pixel
0000ae  6830              LDR      r0,[r6,#0]            ;484
0000b0  9907              LDR      r1,[sp,#0x1c]         ;486
0000b2  1940              ADDS     r0,r0,r5              ;484
0000b4  9000              STR      r0,[sp,#0]            ;485
0000b6  6870              LDR      r0,[r6,#4]            ;485
0000b8  19c0              ADDS     r0,r0,r7              ;485
0000ba  9001              STR      r0,[sp,#4]            ;486
0000bc  4668              MOV      r0,sp                 ;486
0000be  f7fffffe          BL       LCD_Plot_Pixel
0000c2  4620              MOV      r0,r4                 ;487
0000c4  42ac              CMP      r4,r5                 ;488
0000c6  dc03              BGT      |L2.208|
0000c8  1c6d              ADDS     r5,r5,#1              ;488
0000ca  0069              LSLS     r1,r5,#1              ;488
0000cc  180c              ADDS     r4,r1,r0              ;488
0000ce  1c64              ADDS     r4,r4,#1              ;488
                  |L2.208|
0000d0  42b8              CMP      r0,r7                 ;489
0000d2  dc01              BGT      |L2.216|
0000d4  42ac              CMP      r4,r5                 ;489
0000d6  dd03              BLE      |L2.224|
                  |L2.216|
0000d8  1c7f              ADDS     r7,r7,#1              ;489
0000da  0078              LSLS     r0,r7,#1              ;490
0000dc  1904              ADDS     r4,r0,r4              ;490
0000de  1c64              ADDS     r4,r4,#1              ;490
                  |L2.224|
0000e0  2f00              CMP      r7,#0                 ;491
0000e2  dbc6              BLT      |L2.114|
0000e4  e7c3              B        |L2.110|
;;;494    #endif
                          ENDP


                          AREA ||i.LCD_Draw_Line||, CODE, READONLY, ALIGN=1

                  LCD_Draw_Line PROC
;;;138    
;;;139    void LCD_Draw_Line(PT_T * p1, PT_T * p2, COLOR_T * color)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;140    // Scan line conversion code from Michael Abrash
;;;141    {
;;;142    	PT_T p;
;;;143    #if DRAW_RUNS_AS_LINES
;;;144    	PT_T pe;
;;;145    #endif
;;;146    	
;;;147      int Temp, AdjUp, AdjDown, ErrorTerm, XAdvance, XDelta, YDelta;	 
;;;148      int WholeStep, InitialPixelCount, FinalPixelCount, i,j, RunLength;
;;;149      int XStart;
;;;150      int YStart;
;;;151      int XEnd;
;;;152      int YEnd;
;;;153    
;;;154      XStart = p1->X;
;;;155      YStart = p1->Y;
000002  6802              LDR      r2,[r0,#0]
;;;156      XEnd = p2->X;
;;;157      YEnd = p2->Y;
000004  680b              LDR      r3,[r1,#0]
000006  6840              LDR      r0,[r0,#4]            ;155
000008  6849              LDR      r1,[r1,#4]
00000a  b08c              SUB      sp,sp,#0x30           ;141
;;;158    
;;;159      /* We'll always draw top to bottom, to reduce the number of cases we have to
;;;160         ** handle, and to make lines between the same endpoints draw the same pixels
;;;161      */
;;;162      if (YStart > YEnd) {
00000c  4288              CMP      r0,r1
00000e  dd05              BLE      |L3.28|
;;;163    		Temp = YStart;
000010  4604              MOV      r4,r0
;;;164    		YStart = YEnd;
000012  4608              MOV      r0,r1
;;;165    		YEnd = Temp;
000014  4621              MOV      r1,r4
;;;166    		Temp = XStart;
000016  4614              MOV      r4,r2
;;;167    		XStart = XEnd;
000018  461a              MOV      r2,r3
;;;168    		XEnd = Temp;
00001a  4623              MOV      r3,r4
                  |L3.28|
;;;169    	}
;;;170    
;;;171      /* Figure out whethere we're going left or right, and how far we're going
;;;172      ** horizontally  */
;;;173      XDelta = XEnd - XStart;
00001c  1a9c              SUBS     r4,r3,r2
;;;174      if (XDelta < 0) {
00001e  d503              BPL      |L3.40|
;;;175          XAdvance = -1;
000020  2600              MOVS     r6,#0
000022  43f6              MVNS     r6,r6
;;;176          XDelta = -XDelta;
000024  4264              RSBS     r4,r4,#0
000026  e000              B        |L3.42|
                  |L3.40|
;;;177    	} else {
;;;178          XAdvance = 1;
000028  2601              MOVS     r6,#1
                  |L3.42|
;;;179      }
;;;180    
;;;181      /* Figure out how far we're going vertically */
;;;182      YDelta = YEnd - YStart;
00002a  1a0d              SUBS     r5,r1,r0
;;;183    
;;;184      /* Special-case horizontal, vertical, and diagonal lines, for speed and
;;;185      ** to avoid nasty boundary conditions and division by 0
;;;186      */
;;;187    
;;;188    	p.X = XStart;
;;;189    	p.Y = YStart;
;;;190    	 
;;;191      /* Vertical Line case */
;;;192      if (XDelta == 0) {
00002c  9205              STR      r2,[sp,#0x14]
00002e  9006              STR      r0,[sp,#0x18]
000030  2c00              CMP      r4,#0
000032  d00d              BEQ      |L3.80|
;;;193        /* Vertical line */
;;;194    #if DRAW_RUNS_AS_LINES
;;;195    		pe.X = XEnd;
;;;196    		pe.Y = YEnd;
;;;197    		LCD_Fill_Rectangle(&p, &pe, color);
;;;198    #else		
;;;199        for (i = 0; i <= YDelta; i++) {
;;;200    				p.Y++;
;;;201    				LCD_Plot_Pixel(&p, color);
;;;202         }
;;;203    #endif
;;;204        return;
;;;205      }
;;;206      
;;;207      /* Horizontal Line Case */
;;;208      if (YDelta == 0) {
000034  2d00              CMP      r5,#0
000036  d017              BEQ      |L3.104|
;;;209        /* Horizontal line */
;;;210    #if DRAW_RUNS_AS_LINES
;;;211    		pe.X = XEnd;
;;;212    		pe.Y = YEnd;
;;;213    		LCD_Fill_Rectangle(&p, &pe, color);
;;;214    #else
;;;215        for (i = 0; i <= XDelta; i++) {
;;;216    				LCD_Plot_Pixel(&p, color);
;;;217    				p.X += XAdvance;
;;;218        }  
;;;219    #endif
;;;220        return;
;;;221      }
;;;222       
;;;223      /* Diagonal Case */
;;;224      if (XDelta == YDelta) {
000038  42ac              CMP      r4,r5
00003a  d126              BNE      |L3.138|
;;;225        /* Diagonal line */
;;;226        for (i = 0; i <= XDelta; i++)
00003c  2500              MOVS     r5,#0
00003e  e021              B        |L3.132|
                  |L3.64|
000040  9806              LDR      r0,[sp,#0x18]         ;200
000042  990e              LDR      r1,[sp,#0x38]         ;201
000044  1c40              ADDS     r0,r0,#1              ;200
000046  9006              STR      r0,[sp,#0x18]         ;201
000048  a805              ADD      r0,sp,#0x14           ;201
00004a  f7fffffe          BL       LCD_Plot_Pixel
00004e  1c64              ADDS     r4,r4,#1              ;201
                  |L3.80|
000050  42ac              CMP      r4,r5                 ;199
000052  ddf5              BLE      |L3.64|
                  |L3.84|
;;;227          {
;;;228    				LCD_Plot_Pixel(&p, color);
;;;229    				p.X += XAdvance;
;;;230    				p.Y++;
;;;231          }
;;;232        return;
;;;233      }
;;;234       
;;;235       
;;;236      /* Determine whether the line is X or Y major, and handle accordingly */
;;;237      if (XDelta >= YDelta) {
;;;238        /* X major line */
;;;239        /* Minimum # of pixels in a run in this line */
;;;240        WholeStep = XDelta / YDelta;													/* DIV */
;;;241        
;;;242        /* Error term adjust eacn time Y steps by 1; used to tel when one
;;;243        ** extra pixel should be drawn as part of a run, to account for
;;;244        ** fractional steps along the X axis per 1-pixel steps along Y
;;;245        */
;;;246        AdjUp = (XDelta % YDelta) * 2;													/* DIV */
;;;247        
;;;248        /* Error term adjust when the error term turns over, used to factor
;;;249        ** out the X step made at that time
;;;250        */
;;;251        AdjDown = YDelta * 2;
;;;252        
;;;253        /* Initial error term; reflects an initial step of 0.5 along the Y axis 
;;;254         */
;;;255        ErrorTerm = (XDelta % YDelta) - (YDelta * 2);											/* DIV */
;;;256        
;;;257        /* The initial and last runs are partial, because Y advancse only 0.5
;;;258        ** for these runs, rather than 1.  Divide one full run, plus the
;;;259        ** initial pixel, between the initial and last runs.
;;;260        */
;;;261        InitialPixelCount = (WholeStep / 2) + 1;
;;;262        FinalPixelCount = InitialPixelCount;
;;;263        
;;;264        /* If the basic run length is even and there's no fractional
;;;265        ** advance, we have one pixel that could go to either the initial
;;;266        ** or last partial run, which we'll arbitrarily allocate to the
;;;267        ** last run
;;;268        */
;;;269        if ((AdjUp == 0) && ((WholeStep & 0x01) == 0))
;;;270          InitialPixelCount--;
;;;271        
;;;272        /* If there's an odd number of pixels per run, we have 1 pixel that can't
;;;273           ** be allocated to either the initial run or last partial run, so we'll add 0.5
;;;274           ** to error term so this pixel will be handled by the normal full-run loop
;;;275        */
;;;276        if ((WholeStep & 0x01) != 0)
;;;277          ErrorTerm += YDelta;
;;;278        
;;;279        /* Draw the first, partial run of pixels */
;;;280    		#if DRAW_RUNS_AS_LINES // TODO: Fixing here
;;;281    		p.X = XStart;
;;;282    		p.Y = pe.Y = YStart;
;;;283    		if (XAdvance > 0) {
;;;284    			pe.X = XStart + InitialPixelCount;
;;;285    			LCD_Fill_Rectangle(&p, &pe, color);
;;;286    		} else {
;;;287    			pe.X = XStart - InitialPixelCount;
;;;288    			LCD_Fill_Rectangle(&pe, &p, color);
;;;289    		}
;;;290    		p.X = pe.X;
;;;291    #else
;;;292        for (j = 0; j < InitialPixelCount; j++) {
;;;293    			LCD_Plot_Pixel(&p, color);
;;;294    			p.X += XAdvance;
;;;295    		}
;;;296    #endif
;;;297        p.Y++;
;;;298        
;;;299        /* Draw all full runs */
;;;300        for (i = 0; i < (YDelta - 1); i++) {
;;;301    			RunLength = WholeStep; /* run is at least this long */
;;;302    			/* Advance the error term and add an extra pixel if the error
;;;303    			** term so indicates
;;;304    			*/
;;;305    			if ((ErrorTerm += AdjUp) > 0) {
;;;306    				RunLength++;
;;;307    				ErrorTerm -= AdjDown; /* reset the error term */
;;;308    			}
;;;309    
;;;310    			/* Draw this scan line's run */
;;;311    #if DRAW_RUNS_AS_LINES
;;;312    			pe.Y = p.Y;
;;;313    			pe.X = p.X + RunLength;
;;;314    			LCD_Fill_Rectangle(&p, &pe, color);
;;;315    			p.X = pe.X;
;;;316    #else
;;;317    			for (j = 0; j < RunLength; j++) {
;;;318    				LCD_Plot_Pixel(&p, color);
;;;319    				p.X += XAdvance;
;;;320    			}
;;;321    #endif
;;;322    			p.Y++;
;;;323    		}
;;;324        
;;;325        /* Draw the final run of pixels */
;;;326    #if DRAW_RUNS_AS_LINES
;;;327    		pe.Y = p.Y;
;;;328    		pe.X = pe.X + FinalPixelCount;
;;;329    		LCD_Fill_Rectangle(&p, &pe, color);
;;;330    		p.X = pe.X;
;;;331    #else
;;;332        for (j = 0; j < FinalPixelCount; j++) {
;;;333    			LCD_Plot_Pixel(&p, color);
;;;334    			p.X += XAdvance;
;;;335    		}
;;;336    #endif
;;;337        p.Y++;
;;;338        
;;;339        return;
;;;340      } else {
;;;341        /* Y major line */
;;;342        
;;;343        /* Minimum # of pixels in a run in this line */
;;;344        WholeStep = YDelta / XDelta;										/* DIV */
;;;345        
;;;346        /* Error term adjust each time X steps by 1; used to tell when 1 extra
;;;347        ** pixel should be drawn as part of a run, to account for
;;;348        ** fractional steps along the Y axis per 1-pixel steps along X
;;;349        */
;;;350        AdjUp = (YDelta % XDelta) * 2;										/* DIV */
;;;351        
;;;352        /* Error term adjust when the error term turns over, used to factor
;;;353        ** out the Y step made at that time
;;;354        */
;;;355        AdjDown = XDelta * 2;
;;;356        
;;;357        /* Initial error term; reflects initial step of 0.5 along the X axis */
;;;358        ErrorTerm = (YDelta % XDelta) - (XDelta * 2);								/* DIV */
;;;359        
;;;360        /* The initial and last runs are partial, because X advances only 0.5
;;;361        ** for these runs, rather than 1.  Divide ony full run, plus the
;;;362        ** initial pixel, between the initial and last runs
;;;363        */
;;;364        
;;;365        InitialPixelCount = (WholeStep / 2) + 1;
;;;366        FinalPixelCount = InitialPixelCount;
;;;367        
;;;368        /* If the basic run length is even and there's no fractional
;;;369          ** advance, we have one pixel that could go to either the initial
;;;370          ** or last partial run, which we'll arbitrarily allocate to the
;;;371          ** last run
;;;372          */
;;;373          if ((AdjUp == 0) && ((WholeStep & 0x01) == 0)) {
;;;374    				InitialPixelCount--;
;;;375    			}
;;;376          
;;;377          /* If there's an odd number of pixels per run, we have 1 pixel that can't
;;;378    	 ** be allocated to either the initial run or last partial run, so we'll add 0.5
;;;379    	 ** to error term so this pixel will be handled by the normal full-run loop
;;;380          */
;;;381          if ((WholeStep & 0x01) != 0) {
;;;382    				ErrorTerm += XDelta;
;;;383    			}
;;;384          
;;;385          /* Draw the first, partial run of pixels */
;;;386    #if DRAW_RUNS_AS_LINES
;;;387    			p.X = pe.X = XStart;
;;;388    			p.Y = YStart;
;;;389    			pe.Y = YStart + InitialPixelCount;
;;;390    			LCD_Fill_Rectangle(&p, &pe, color);
;;;391    #else
;;;392          for (j = 0; j < InitialPixelCount; j++) {
;;;393    				LCD_Plot_Pixel(&p, color);
;;;394    				p.Y++;
;;;395    			}
;;;396          /* Update x,y position */
;;;397          p.X += XAdvance;
;;;398    #endif
;;;399          
;;;400          /* Draw all full runs */
;;;401          for (i = 0; i < (XDelta - 1); i++) {
;;;402    				RunLength = WholeStep; /* run is at least this long */
;;;403    	  
;;;404    				/* Advance the error term and add an extra pixel if the error
;;;405    				** term so indicates
;;;406    				*/
;;;407    				if ((ErrorTerm += AdjUp) > 0)	{
;;;408    					RunLength++;
;;;409    					ErrorTerm -= AdjDown; /* reset the error term */
;;;410    				}
;;;411    				
;;;412    				/* Draw this scan line's run */
;;;413    #if DRAW_RUNS_AS_LINES
;;;414    				p.X = pe.X = XStart;
;;;415    				p.Y = YStart;
;;;416    				pe.Y = YStart + RunLength;
;;;417    				LCD_Fill_Rectangle(&p, &pe, color);
;;;418    #else
;;;419    				for (j = 0; j < RunLength; j++) {
;;;420    					LCD_Plot_Pixel(&p, color);
;;;421    					p.Y++;
;;;422    				}
;;;423    				/* Update x,y position */
;;;424    				p.X += XAdvance;
;;;425    #endif
;;;426    			}
;;;427          
;;;428          /* Draw the final run of pixels */
;;;429    #if DRAW_RUNS_AS_LINES
;;;430    			p.X = pe.X= XStart;
;;;431    			p.Y = YStart;
;;;432    			pe.Y = YStart + FinalPixelCount;
;;;433    			LCD_Fill_Rectangle(&p, &pe, color);
;;;434    #else
;;;435          for (j= 0; j < FinalPixelCount; j++) {
;;;436    				LCD_Plot_Pixel(&p, color);
;;;437    				p.Y++;
;;;438    			}
;;;439          /* Update x,y position */
;;;440          p.X += XAdvance;
;;;441    #endif    
;;;442          return;
;;;443    	}
;;;444    }
000054  b00f              ADD      sp,sp,#0x3c
000056  bdf0              POP      {r4-r7,pc}
                  |L3.88|
000058  a805              ADD      r0,sp,#0x14           ;216
00005a  990e              LDR      r1,[sp,#0x38]         ;216
00005c  f7fffffe          BL       LCD_Plot_Pixel
000060  9805              LDR      r0,[sp,#0x14]         ;217
000062  1980              ADDS     r0,r0,r6              ;217
000064  1c6d              ADDS     r5,r5,#1              ;217
000066  9005              STR      r0,[sp,#0x14]         ;217
                  |L3.104|
000068  42a5              CMP      r5,r4                 ;215
00006a  ddf5              BLE      |L3.88|
00006c  e7f2              B        |L3.84|
                  |L3.110|
00006e  a805              ADD      r0,sp,#0x14           ;228
000070  990e              LDR      r1,[sp,#0x38]         ;228
000072  f7fffffe          BL       LCD_Plot_Pixel
000076  9805              LDR      r0,[sp,#0x14]         ;229
000078  1980              ADDS     r0,r0,r6              ;229
00007a  9005              STR      r0,[sp,#0x14]         ;230
00007c  9806              LDR      r0,[sp,#0x18]         ;230
00007e  1c40              ADDS     r0,r0,#1              ;230
000080  1c6d              ADDS     r5,r5,#1              ;230
000082  9006              STR      r0,[sp,#0x18]         ;230
                  |L3.132|
000084  42a5              CMP      r5,r4                 ;226
000086  ddf2              BLE      |L3.110|
000088  e7e4              B        |L3.84|
                  |L3.138|
00008a  42ac              CMP      r4,r5                 ;237
00008c  db5b              BLT      |L3.326|
00008e  4629              MOV      r1,r5                 ;240
000090  4620              MOV      r0,r4                 ;240
000092  f7fffffe          BL       __aeabi_idivmod
000096  9007              STR      r0,[sp,#0x1c]         ;246
000098  0048              LSLS     r0,r1,#1              ;246
00009a  900b              STR      r0,[sp,#0x2c]         ;251
00009c  0068              LSLS     r0,r5,#1              ;251
00009e  1a0c              SUBS     r4,r1,r0              ;255
0000a0  900a              STR      r0,[sp,#0x28]         ;261
0000a2  9807              LDR      r0,[sp,#0x1c]         ;261
0000a4  0fc1              LSRS     r1,r0,#31             ;261
0000a6  1808              ADDS     r0,r1,r0              ;261
0000a8  1047              ASRS     r7,r0,#1              ;261
0000aa  9807              LDR      r0,[sp,#0x1c]         ;269
0000ac  1c7f              ADDS     r7,r7,#1              ;261
0000ae  07c1              LSLS     r1,r0,#31             ;269
0000b0  980b              LDR      r0,[sp,#0x2c]         ;269
0000b2  0fc9              LSRS     r1,r1,#31             ;269
0000b4  9709              STR      r7,[sp,#0x24]         ;269
0000b6  4301              ORRS     r1,r1,r0              ;269
0000b8  d100              BNE      |L3.188|
0000ba  1e7f              SUBS     r7,r7,#1              ;269
                  |L3.188|
0000bc  9807              LDR      r0,[sp,#0x1c]         ;276
0000be  07c0              LSLS     r0,r0,#31             ;276
0000c0  d000              BEQ      |L3.196|
0000c2  1964              ADDS     r4,r4,r5              ;277
                  |L3.196|
0000c4  2000              MOVS     r0,#0                 ;292
0000c6  e008              B        |L3.218|
                  |L3.200|
0000c8  a805              ADD      r0,sp,#0x14           ;293
0000ca  990e              LDR      r1,[sp,#0x38]         ;293
0000cc  f7fffffe          BL       LCD_Plot_Pixel
0000d0  9805              LDR      r0,[sp,#0x14]         ;294
0000d2  1980              ADDS     r0,r0,r6              ;294
0000d4  9005              STR      r0,[sp,#0x14]         ;292
0000d6  9804              LDR      r0,[sp,#0x10]         ;292
0000d8  1c40              ADDS     r0,r0,#1              ;292
                  |L3.218|
0000da  9004              STR      r0,[sp,#0x10]         ;292
0000dc  42b8              CMP      r0,r7                 ;292
0000de  dbf3              BLT      |L3.200|
0000e0  9806              LDR      r0,[sp,#0x18]         ;297
0000e2  1c40              ADDS     r0,r0,#1              ;297
0000e4  9006              STR      r0,[sp,#0x18]         ;300
0000e6  2000              MOVS     r0,#0                 ;300
0000e8  1e6d              SUBS     r5,r5,#1              ;300
0000ea  9502              STR      r5,[sp,#8]            ;300
0000ec  9000              STR      r0,[sp,#0]            ;300
0000ee  e019              B        |L3.292|
                  |L3.240|
0000f0  980b              LDR      r0,[sp,#0x2c]         ;305
0000f2  9d07              LDR      r5,[sp,#0x1c]         ;305
0000f4  1824              ADDS     r4,r4,r0              ;305
0000f6  2c00              CMP      r4,#0                 ;305
0000f8  dd02              BLE      |L3.256|
0000fa  980a              LDR      r0,[sp,#0x28]         ;307
0000fc  1a24              SUBS     r4,r4,r0              ;307
0000fe  1c6d              ADDS     r5,r5,#1              ;307
                  |L3.256|
000100  2700              MOVS     r7,#0                 ;317
000102  e007              B        |L3.276|
                  |L3.260|
000104  a805              ADD      r0,sp,#0x14           ;318
000106  990e              LDR      r1,[sp,#0x38]         ;318
000108  f7fffffe          BL       LCD_Plot_Pixel
00010c  9805              LDR      r0,[sp,#0x14]         ;319
00010e  1980              ADDS     r0,r0,r6              ;319
000110  1c7f              ADDS     r7,r7,#1              ;319
000112  9005              STR      r0,[sp,#0x14]         ;319
                  |L3.276|
000114  42af              CMP      r7,r5                 ;317
000116  dbf5              BLT      |L3.260|
000118  9806              LDR      r0,[sp,#0x18]         ;322
00011a  1c40              ADDS     r0,r0,#1              ;322
00011c  9006              STR      r0,[sp,#0x18]         ;300
00011e  9800              LDR      r0,[sp,#0]            ;300
000120  1c40              ADDS     r0,r0,#1              ;300
000122  9000              STR      r0,[sp,#0]            ;300
                  |L3.292|
000124  9902              LDR      r1,[sp,#8]            ;300
000126  4288              CMP      r0,r1                 ;300
000128  dbe2              BLT      |L3.240|
00012a  2400              MOVS     r4,#0                 ;332
00012c  e007              B        |L3.318|
                  |L3.302|
00012e  a805              ADD      r0,sp,#0x14           ;333
000130  990e              LDR      r1,[sp,#0x38]         ;333
000132  f7fffffe          BL       LCD_Plot_Pixel
000136  9805              LDR      r0,[sp,#0x14]         ;334
000138  1980              ADDS     r0,r0,r6              ;334
00013a  1c64              ADDS     r4,r4,#1              ;334
00013c  9005              STR      r0,[sp,#0x14]         ;334
                  |L3.318|
00013e  9809              LDR      r0,[sp,#0x24]         ;332
000140  4284              CMP      r4,r0                 ;332
000142  dbf4              BLT      |L3.302|
000144  e786              B        |L3.84|
                  |L3.326|
000146  4621              MOV      r1,r4                 ;344
000148  4628              MOV      r0,r5                 ;344
00014a  f7fffffe          BL       __aeabi_idivmod
00014e  9007              STR      r0,[sp,#0x1c]         ;350
000150  0048              LSLS     r0,r1,#1              ;350
000152  900b              STR      r0,[sp,#0x2c]         ;355
000154  0060              LSLS     r0,r4,#1              ;355
000156  1a0d              SUBS     r5,r1,r0              ;358
000158  900a              STR      r0,[sp,#0x28]         ;365
00015a  9807              LDR      r0,[sp,#0x1c]         ;365
00015c  0fc1              LSRS     r1,r0,#31             ;365
00015e  1808              ADDS     r0,r1,r0              ;365
000160  1047              ASRS     r7,r0,#1              ;365
000162  9807              LDR      r0,[sp,#0x1c]         ;373
000164  1c7f              ADDS     r7,r7,#1              ;365
000166  07c1              LSLS     r1,r0,#31             ;373
000168  980b              LDR      r0,[sp,#0x2c]         ;373
00016a  0fc9              LSRS     r1,r1,#31             ;373
00016c  9709              STR      r7,[sp,#0x24]         ;373
00016e  4301              ORRS     r1,r1,r0              ;373
000170  d100              BNE      |L3.372|
000172  1e7f              SUBS     r7,r7,#1              ;373
                  |L3.372|
000174  9807              LDR      r0,[sp,#0x1c]         ;381
000176  07c0              LSLS     r0,r0,#31             ;381
000178  d000              BEQ      |L3.380|
00017a  192d              ADDS     r5,r5,r4              ;382
                  |L3.380|
00017c  2000              MOVS     r0,#0                 ;392
00017e  e008              B        |L3.402|
                  |L3.384|
000180  a805              ADD      r0,sp,#0x14           ;393
000182  990e              LDR      r1,[sp,#0x38]         ;393
000184  f7fffffe          BL       LCD_Plot_Pixel
000188  9806              LDR      r0,[sp,#0x18]         ;394
00018a  1c40              ADDS     r0,r0,#1              ;394
00018c  9006              STR      r0,[sp,#0x18]         ;392
00018e  9804              LDR      r0,[sp,#0x10]         ;392
000190  1c40              ADDS     r0,r0,#1              ;392
                  |L3.402|
000192  9004              STR      r0,[sp,#0x10]         ;392
000194  42b8              CMP      r0,r7                 ;392
000196  dbf3              BLT      |L3.384|
000198  9805              LDR      r0,[sp,#0x14]         ;397
00019a  1980              ADDS     r0,r0,r6              ;397
00019c  9005              STR      r0,[sp,#0x14]         ;401
00019e  2000              MOVS     r0,#0                 ;401
0001a0  1e64              SUBS     r4,r4,#1              ;401
0001a2  9402              STR      r4,[sp,#8]            ;401
0001a4  9000              STR      r0,[sp,#0]            ;401
0001a6  e019              B        |L3.476|
                  |L3.424|
0001a8  980b              LDR      r0,[sp,#0x2c]         ;407
0001aa  9c07              LDR      r4,[sp,#0x1c]         ;407
0001ac  182d              ADDS     r5,r5,r0              ;407
0001ae  2d00              CMP      r5,#0                 ;407
0001b0  dd02              BLE      |L3.440|
0001b2  980a              LDR      r0,[sp,#0x28]         ;409
0001b4  1a2d              SUBS     r5,r5,r0              ;409
0001b6  1c64              ADDS     r4,r4,#1              ;409
                  |L3.440|
0001b8  2700              MOVS     r7,#0                 ;419
0001ba  e007              B        |L3.460|
                  |L3.444|
0001bc  a805              ADD      r0,sp,#0x14           ;420
0001be  990e              LDR      r1,[sp,#0x38]         ;420
0001c0  f7fffffe          BL       LCD_Plot_Pixel
0001c4  9806              LDR      r0,[sp,#0x18]         ;421
0001c6  1c40              ADDS     r0,r0,#1              ;421
0001c8  1c7f              ADDS     r7,r7,#1              ;421
0001ca  9006              STR      r0,[sp,#0x18]         ;421
                  |L3.460|
0001cc  42a7              CMP      r7,r4                 ;419
0001ce  dbf5              BLT      |L3.444|
0001d0  9805              LDR      r0,[sp,#0x14]         ;424
0001d2  1980              ADDS     r0,r0,r6              ;424
0001d4  9005              STR      r0,[sp,#0x14]         ;401
0001d6  9800              LDR      r0,[sp,#0]            ;401
0001d8  1c40              ADDS     r0,r0,#1              ;401
0001da  9000              STR      r0,[sp,#0]            ;401
                  |L3.476|
0001dc  9902              LDR      r1,[sp,#8]            ;401
0001de  4288              CMP      r0,r1                 ;401
0001e0  dbe2              BLT      |L3.424|
0001e2  2400              MOVS     r4,#0                 ;435
0001e4  e007              B        |L3.502|
                  |L3.486|
0001e6  a805              ADD      r0,sp,#0x14           ;436
0001e8  990e              LDR      r1,[sp,#0x38]         ;436
0001ea  f7fffffe          BL       LCD_Plot_Pixel
0001ee  9806              LDR      r0,[sp,#0x18]         ;437
0001f0  1c40              ADDS     r0,r0,#1              ;437
0001f2  1c64              ADDS     r4,r4,#1              ;437
0001f4  9006              STR      r0,[sp,#0x18]         ;437
                  |L3.502|
0001f6  9809              LDR      r0,[sp,#0x24]         ;435
0001f8  4284              CMP      r4,r0                 ;435
0001fa  dbf4              BLT      |L3.486|
0001fc  e72a              B        |L3.84|
;;;445    
                          ENDP

