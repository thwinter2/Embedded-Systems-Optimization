; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\picojpeg.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\picojpeg.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\Include -I.\Source\Profiler -I.\Source\LCD -I.\Source\FS -I.\Source\ulibSD -I.\RTE\Device\MKL25Z128xxx4 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.15.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DMKL25Z128xxx4 --omf_browse=.\objects\picojpeg.crf --remarks Source\LCD\picojpeg.c]
                          THUMB

                          AREA ||i.convertCb||, CODE, READONLY, ALIGN=2

                  convertCb PROC
                  ||__tagsym$$noinline||
;;;1769   #endif
;;;1770   static void convertCb(uint8 dstOfs)
000000  491b              LDR      r1,|L1.112|
;;;1771   {
000002  b470              PUSH     {r4-r6}
;;;1772      uint8 i;
;;;1773      uint8* pDstG = gMCUBufG + dstOfs;
000004  180a              ADDS     r2,r1,r0
;;;1774      uint8* pDstB = gMCUBufB + dstOfs;
000006  491b              LDR      r1,|L1.116|
;;;1775      int16* pSrc = gCoeffBuf;
000008  4d1b              LDR      r5,|L1.120|
00000a  180b              ADDS     r3,r1,r0              ;1774
;;;1776   
;;;1777      for (i = 64; i > 0; i--)
00000c  2440              MOVS     r4,#0x40
                  |L1.14|
;;;1778      {
;;;1779         uint8 cb = (uint8)*pSrc++;
00000e  7828              LDRB     r0,[r5,#0]
;;;1780         int16 cbG, cbB;
;;;1781   
;;;1782         cbG = ((cb * 88U) >> 8U) - 44U;
000010  2158              MOVS     r1,#0x58
000012  4341              MULS     r1,r0,r1
000014  0a09              LSRS     r1,r1,#8
;;;1783         *pDstG++ = subAndClamp(pDstG[0], cbG);
000016  7816              LDRB     r6,[r2,#0]
000018  392c              SUBS     r1,r1,#0x2c
00001a  1a71              SUBS     r1,r6,r1
00001c  b28e              UXTH     r6,r1
00001e  1cad              ADDS     r5,r5,#2
000020  2eff              CMP      r6,#0xff
000022  d907              BLS      |L1.52|
000024  2900              CMP      r1,#0
000026  da01              BGE      |L1.44|
000028  2100              MOVS     r1,#0
00002a  e004              B        |L1.54|
                  |L1.44|
00002c  29ff              CMP      r1,#0xff
00002e  dd01              BLE      |L1.52|
000030  21ff              MOVS     r1,#0xff
000032  e000              B        |L1.54|
                  |L1.52|
000034  b2c9              UXTB     r1,r1
                  |L1.54|
000036  7011              STRB     r1,[r2,#0]
;;;1784   
;;;1785         cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
000038  21c6              MOVS     r1,#0xc6
00003a  4341              MULS     r1,r0,r1
00003c  0a09              LSRS     r1,r1,#8
00003e  1808              ADDS     r0,r1,r0
;;;1786         *pDstB++ = addAndClamp(pDstB[0], cbB);
000040  7819              LDRB     r1,[r3,#0]
000042  38e3              SUBS     r0,r0,#0xe3
000044  1808              ADDS     r0,r1,r0
000046  b281              UXTH     r1,r0
000048  1c52              ADDS     r2,r2,#1
00004a  29ff              CMP      r1,#0xff
00004c  d907              BLS      |L1.94|
00004e  2800              CMP      r0,#0
000050  da01              BGE      |L1.86|
000052  2000              MOVS     r0,#0
000054  e004              B        |L1.96|
                  |L1.86|
000056  28ff              CMP      r0,#0xff
000058  dd01              BLE      |L1.94|
00005a  20ff              MOVS     r0,#0xff
00005c  e000              B        |L1.96|
                  |L1.94|
00005e  b2c0              UXTB     r0,r0
                  |L1.96|
000060  7018              STRB     r0,[r3,#0]
000062  1c5b              ADDS     r3,r3,#1
000064  1e64              SUBS     r4,r4,#1
000066  0624              LSLS     r4,r4,#24             ;1777
000068  0e24              LSRS     r4,r4,#24             ;1777
00006a  d1d0              BNE      |L1.14|
;;;1787      }
;;;1788   }
00006c  bc70              POP      {r4-r6}
00006e  4770              BX       lr
;;;1789   /*----------------------------------------------------------------------------*/
                          ENDP

                  |L1.112|
                          DCD      ||.bss||+0x180
                  |L1.116|
                          DCD      ||.bss||+0x280
                  |L1.120|
                          DCD      ||.bss||

                          AREA ||i.convertCr||, CODE, READONLY, ALIGN=2

                  convertCr PROC
                  |symbol_number.237|
;;;1793   #endif
;;;1794   static void convertCr(uint8 dstOfs)
000000  491b              LDR      r1,|L2.112|
;;;1795   {
000002  b470              PUSH     {r4-r6}
;;;1796      uint8 i;
;;;1797      uint8* pDstR = gMCUBufR + dstOfs;
000004  180a              ADDS     r2,r1,r0
;;;1798      uint8* pDstG = gMCUBufG + dstOfs;
000006  491b              LDR      r1,|L2.116|
;;;1799      int16* pSrc = gCoeffBuf;
000008  4d1b              LDR      r5,|L2.120|
00000a  180b              ADDS     r3,r1,r0              ;1798
;;;1800   
;;;1801      for (i = 64; i > 0; i--)
00000c  2440              MOVS     r4,#0x40
                  |L2.14|
;;;1802      {
;;;1803         uint8 cr = (uint8)*pSrc++;
00000e  7828              LDRB     r0,[r5,#0]
;;;1804         int16 crR, crG;
;;;1805   
;;;1806         crR = (cr + ((cr * 103U) >> 8U)) - 179;
000010  2167              MOVS     r1,#0x67
000012  4341              MULS     r1,r0,r1
000014  0a09              LSRS     r1,r1,#8
000016  1809              ADDS     r1,r1,r0
;;;1807         *pDstR++ = addAndClamp(pDstR[0], crR);
000018  7816              LDRB     r6,[r2,#0]
00001a  39b3              SUBS     r1,r1,#0xb3
00001c  1871              ADDS     r1,r6,r1
00001e  b28e              UXTH     r6,r1
000020  1cad              ADDS     r5,r5,#2
000022  2eff              CMP      r6,#0xff
000024  d907              BLS      |L2.54|
000026  2900              CMP      r1,#0
000028  da01              BGE      |L2.46|
00002a  2100              MOVS     r1,#0
00002c  e004              B        |L2.56|
                  |L2.46|
00002e  29ff              CMP      r1,#0xff
000030  dd01              BLE      |L2.54|
000032  21ff              MOVS     r1,#0xff
000034  e000              B        |L2.56|
                  |L2.54|
000036  b2c9              UXTB     r1,r1
                  |L2.56|
000038  7011              STRB     r1,[r2,#0]
;;;1808   
;;;1809         crG = ((cr * 183U) >> 8U) - 91;
00003a  21b7              MOVS     r1,#0xb7
00003c  4348              MULS     r0,r1,r0
00003e  0a00              LSRS     r0,r0,#8
;;;1810         *pDstG++ = subAndClamp(pDstG[0], crG);
000040  7819              LDRB     r1,[r3,#0]
000042  385b              SUBS     r0,r0,#0x5b
000044  1a08              SUBS     r0,r1,r0
000046  b281              UXTH     r1,r0
000048  1c52              ADDS     r2,r2,#1
00004a  29ff              CMP      r1,#0xff
00004c  d907              BLS      |L2.94|
00004e  2800              CMP      r0,#0
000050  da01              BGE      |L2.86|
000052  2000              MOVS     r0,#0
000054  e004              B        |L2.96|
                  |L2.86|
000056  28ff              CMP      r0,#0xff
000058  dd01              BLE      |L2.94|
00005a  20ff              MOVS     r0,#0xff
00005c  e000              B        |L2.96|
                  |L2.94|
00005e  b2c0              UXTB     r0,r0
                  |L2.96|
000060  7018              STRB     r0,[r3,#0]
000062  1c5b              ADDS     r3,r3,#1
000064  1e64              SUBS     r4,r4,#1
000066  0624              LSLS     r4,r4,#24             ;1801
000068  0e24              LSRS     r4,r4,#24             ;1801
00006a  d1d0              BNE      |L2.14|
;;;1811      }
;;;1812   }
00006c  bc70              POP      {r4-r6}
00006e  4770              BX       lr
;;;1813   /*----------------------------------------------------------------------------*/
                          ENDP

                  |L2.112|
                          DCD      ||.bss||+0x80
                  |L2.116|
                          DCD      ||.bss||+0x180
                  |L2.120|
                          DCD      ||.bss||

                          AREA ||i.copyY||, CODE, READONLY, ALIGN=2

                  copyY PROC
;;;1747   // Convert Y to RGB
;;;1748   static void copyY(uint8 dstOfs) // AD Opt: Move data 32 bits at a time. Need prolog and epilog.
000000  490a              LDR      r1,|L3.44|
;;;1749   {
;;;1750      uint8 i;
;;;1751      uint8* pRDst = gMCUBufR + dstOfs;
;;;1752      uint8* pGDst = gMCUBufG + dstOfs;
;;;1753      uint8* pBDst = gMCUBufB + dstOfs;
000002  4b0c              LDR      r3,|L3.52|
000004  180a              ADDS     r2,r1,r0              ;1751
000006  490a              LDR      r1,|L3.48|
000008  b430              PUSH     {r4,r5}               ;1749
00000a  1809              ADDS     r1,r1,r0              ;1752
00000c  1818              ADDS     r0,r3,r0
;;;1754      int16* pSrc = gCoeffBuf;
00000e  4b0a              LDR      r3,|L3.56|
;;;1755      
;;;1756      for (i = 64; i > 0; i--)
000010  2540              MOVS     r5,#0x40
                  |L3.18|
;;;1757      {
;;;1758         uint8 c = (uint8)*pSrc++;
000012  781c              LDRB     r4,[r3,#0]
;;;1759         
;;;1760         *pRDst++ = c;
000014  7014              STRB     r4,[r2,#0]
;;;1761         *pGDst++ = c;
000016  700c              STRB     r4,[r1,#0]
;;;1762         *pBDst++ = c;
000018  7004              STRB     r4,[r0,#0]
00001a  1c40              ADDS     r0,r0,#1
00001c  1c49              ADDS     r1,r1,#1
00001e  1c52              ADDS     r2,r2,#1
000020  1c9b              ADDS     r3,r3,#2
000022  1e6d              SUBS     r5,r5,#1
000024  d1f5              BNE      |L3.18|
;;;1763      }
;;;1764   }
000026  bc30              POP      {r4,r5}
000028  4770              BX       lr
;;;1765   /*----------------------------------------------------------------------------*/
                          ENDP

00002a  0000              DCW      0x0000
                  |L3.44|
                          DCD      ||.bss||+0x80
                  |L3.48|
                          DCD      ||.bss||+0x180
                  |L3.52|
                          DCD      ||.bss||+0x280
                  |L3.56|
                          DCD      ||.bss||

                          AREA ||i.decodeNextMCU||, CODE, READONLY, ALIGN=2

                  decodeNextMCU PROC
                  |symbol_number.240|
;;;2181   
;;;2182   static uint8 decodeNextMCU(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;2183   {
;;;2184      uint8 status;
;;;2185      uint8 mcuBlock;   
;;;2186   
;;;2187      if (gRestartInterval) {
000002  4da4              LDR      r5,|L4.660|
000004  4fa4              LDR      r7,|L4.664|
000006  8aa8              LDRH     r0,[r5,#0x14]  ; gRestartInterval
000008  b085              SUB      sp,sp,#0x14           ;2183
00000a  2800              CMP      r0,#0
00000c  d034              BEQ      |L4.120|
;;;2188         if (gRestartsLeft == 0) {
00000e  8b28              LDRH     r0,[r5,#0x18]  ; gRestartsLeft
000010  2800              CMP      r0,#0
000012  d12e              BNE      |L4.114|
000014  2403              MOVS     r4,#3
000016  0264              LSLS     r4,r4,#9
000018  261d              MOVS     r6,#0x1d
                  |L4.26|
00001a  f7fffffe          BL       getChar
00001e  28ff              CMP      r0,#0xff
000020  d004              BEQ      |L4.44|
000022  1e64              SUBS     r4,r4,#1
000024  0424              LSLS     r4,r4,#16
000026  0c24              LSRS     r4,r4,#16
000028  d1f7              BNE      |L4.26|
00002a  e001              B        |L4.48|
                  |L4.44|
00002c  2c00              CMP      r4,#0
00002e  d102              BNE      |L4.54|
                  |L4.48|
000030  4630              MOV      r0,r6
;;;2189            status = processRestart();
;;;2190            if (status)
;;;2191               return status;
;;;2192         }
;;;2193         gRestartsLeft--;
;;;2194      }      
;;;2195      
;;;2196      for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
;;;2197         uint8 componentID = gMCUOrg[mcuBlock];
;;;2198         uint8 compQuant = gCompQuant[componentID];	
;;;2199         uint8 compDCTab = gCompDCTab[componentID];
;;;2200         uint8 numExtraBits, compACTab, k;
;;;2201         const int16* pQ = compQuant ? gQuant1 : gQuant0;
;;;2202         uint16 r, dc;
;;;2203         uint8 s = huffDecode(compDCTab ? &gHuffTab1 : &gHuffTab0, compDCTab ? gHuffVal1 : gHuffVal0);
;;;2204        
;;;2205         r = 0;
;;;2206         numExtraBits = s & 0xF;
;;;2207         if (numExtraBits)
;;;2208            r = getBits(numExtraBits,1);
;;;2209         dc = huffExtend(r, s);          
;;;2210         dc = dc + gLastDC[componentID];
;;;2211         gLastDC[componentID] = dc;
;;;2212         gCoeffBuf[0] = dc * pQ[0];
;;;2213         compACTab = gCompACTab[componentID];
;;;2214   
;;;2215         if (gReduce) {
;;;2216            // Decode, but throw out the AC coefficients in reduce mode.
;;;2217            for (k = 1; k < 64; k++) {
;;;2218               s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2, compACTab ? gHuffVal3 : gHuffVal2);
;;;2219               numExtraBits = s & 0xF;
;;;2220               if (numExtraBits)
;;;2221                  getBits(numExtraBits,1);
;;;2222               r = s >> 4;
;;;2223               s &= 15;
;;;2224               if (s) {
;;;2225                  if (r) {
;;;2226                     if ((k + r) > 63)
;;;2227                        return PJPG_DECODE_ERROR;
;;;2228                     k = (uint8)(k + r);
;;;2229                  }
;;;2230               } else {
;;;2231                  if (r == 15) {
;;;2232                     if ((k + 16) > 64)
;;;2233                        return PJPG_DECODE_ERROR;
;;;2234                     k += (16 - 1); // - 1 because the loop counter is k
;;;2235                  } else
;;;2236                     break;
;;;2237               }
;;;2238            }
;;;2239            transformBlockReduce(mcuBlock); 
;;;2240         } else {
;;;2241            // Decode and dequantize AC coefficients
;;;2242            for (k = 1; k < 64; k++) {
;;;2243               uint16 extraBits;
;;;2244               s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2, compACTab ? gHuffVal3 : gHuffVal2);
;;;2245               extraBits = 0;
;;;2246               numExtraBits = s & 0xF;
;;;2247               if (numExtraBits)
;;;2248                  extraBits = getBits(numExtraBits,1);
;;;2249   
;;;2250               r = s >> 4;
;;;2251               s &= 15;
;;;2252               if (s) {
;;;2253                  int16 ac;
;;;2254                  if (r) {
;;;2255                     if ((k + r) > 63)
;;;2256                        return PJPG_DECODE_ERROR;
;;;2257                     while (r) {
;;;2258                        gCoeffBuf[ZAG[k++]] = 0;
;;;2259                        r--;
;;;2260                     }
;;;2261                  }
;;;2262                  ac = huffExtend(extraBits, s);
;;;2263                  gCoeffBuf[ZAG[k]] = ac * pQ[k]; 
;;;2264               } else {
;;;2265                  if (r == 15) {
;;;2266                     if ((k + 16) > 64)
;;;2267                        return PJPG_DECODE_ERROR;
;;;2268                     for (r = 16; r > 0; r--)
;;;2269                        gCoeffBuf[ZAG[k++]] = 0;
;;;2270                     k--; // - 1 because the loop counter is k
;;;2271                  } else
;;;2272                     break;
;;;2273               }
;;;2274            }     
;;;2275            while (k < 64)
;;;2276               gCoeffBuf[ZAG[k++]] = 0;
;;;2277            transformBlock(mcuBlock); 
;;;2278         }
;;;2279      }        
;;;2280      return 0;
;;;2281   }
000032  b005              ADD      sp,sp,#0x14
000034  bdf0              POP      {r4-r7,pc}
                  |L4.54|
000036  f7fffffe          BL       getChar
00003a  28ff              CMP      r0,#0xff
00003c  d02c              BEQ      |L4.152|
00003e  2c00              CMP      r4,#0
000040  d0f6              BEQ      |L4.48|
000042  8ae9              LDRH     r1,[r5,#0x16]  ; gNextRestartNum
000044  460a              MOV      r2,r1
000046  32d0              ADDS     r2,r2,#0xd0
000048  4290              CMP      r0,r2
00004a  d1f1              BNE      |L4.48|
00004c  2000              MOVS     r0,#0
00004e  8038              STRH     r0,[r7,#0]
000050  8078              STRH     r0,[r7,#2]
000052  80b8              STRH     r0,[r7,#4]
000054  8aa8              LDRH     r0,[r5,#0x14]  ; gRestartInterval
000056  8328              STRH     r0,[r5,#0x18]
000058  1c49              ADDS     r1,r1,#1
00005a  0748              LSLS     r0,r1,#29
00005c  0f40              LSRS     r0,r0,#29
00005e  82e8              STRH     r0,[r5,#0x16]
000060  2008              MOVS     r0,#8
000062  7168              STRB     r0,[r5,#5]
000064  2101              MOVS     r1,#1
000066  f7fffffe          BL       getBits
00006a  2101              MOVS     r1,#1
00006c  2008              MOVS     r0,#8
00006e  f7fffffe          BL       getBits
                  |L4.114|
000072  8b28              LDRH     r0,[r5,#0x18]         ;2193  ; gRestartsLeft
000074  1e40              SUBS     r0,r0,#1              ;2193
000076  8328              STRH     r0,[r5,#0x18]         ;2193
                  |L4.120|
000078  2000              MOVS     r0,#0                 ;2196
00007a  9000              STR      r0,[sp,#0]            ;2196
00007c  7a68              LDRB     r0,[r5,#9]            ;2196  ; gMaxBlocksPerMCU
00007e  2800              CMP      r0,#0                 ;2196
000080  d97e              BLS      |L4.384|
                  |L4.130|
000082  4886              LDR      r0,|L4.668|
000084  9900              LDR      r1,[sp,#0]            ;2197
000086  5c44              LDRB     r4,[r0,r1]            ;2197
000088  4885              LDR      r0,|L4.672|
00008a  5d01              LDRB     r1,[r0,r4]            ;2198
00008c  4885              LDR      r0,|L4.676|
00008e  2900              CMP      r1,#0                 ;2201
000090  5d00              LDRB     r0,[r0,r4]            ;2199
000092  d006              BEQ      |L4.162|
000094  4984              LDR      r1,|L4.680|
000096  e005              B        |L4.164|
                  |L4.152|
000098  1e64              SUBS     r4,r4,#1              ;2201
00009a  0424              LSLS     r4,r4,#16             ;2201
00009c  0c24              LSRS     r4,r4,#16             ;2201
00009e  d1ca              BNE      |L4.54|
0000a0  e7c6              B        |L4.48|
                  |L4.162|
0000a2  4982              LDR      r1,|L4.684|
                  |L4.164|
0000a4  9103              STR      r1,[sp,#0xc]          ;2203
0000a6  2800              CMP      r0,#0                 ;2203
0000a8  d002              BEQ      |L4.176|
0000aa  4981              LDR      r1,|L4.688|
0000ac  4881              LDR      r0,|L4.692|
0000ae  e001              B        |L4.180|
                  |L4.176|
0000b0  4981              LDR      r1,|L4.696|
0000b2  4882              LDR      r0,|L4.700|
                  |L4.180|
0000b4  f7fffffe          BL       huffDecode
0000b8  4605              MOV      r5,r0                 ;2203
0000ba  2000              MOVS     r0,#0                 ;2205
0000bc  072a              LSLS     r2,r5,#28             ;2206
0000be  0f12              LSRS     r2,r2,#28             ;2206
0000c0  d003              BEQ      |L4.202|
0000c2  2101              MOVS     r1,#1                 ;2208
0000c4  4610              MOV      r0,r2                 ;2208
0000c6  f7fffffe          BL       getBits
                  |L4.202|
0000ca  4629              MOV      r1,r5                 ;2209
0000cc  f7fffffe          BL       huffExtend
0000d0  4971              LDR      r1,|L4.664|
0000d2  0062              LSLS     r2,r4,#1              ;2210
0000d4  5a8b              LDRH     r3,[r1,r2]            ;2210
0000d6  1818              ADDS     r0,r3,r0              ;2210
0000d8  5288              STRH     r0,[r1,r2]            ;2211
0000da  9903              LDR      r1,[sp,#0xc]          ;2212
0000dc  8809              LDRH     r1,[r1,#0]            ;2212
0000de  4341              MULS     r1,r0,r1              ;2212
0000e0  4877              LDR      r0,|L4.704|
0000e2  8001              STRH     r1,[r0,#0]            ;2212
0000e4  4977              LDR      r1,|L4.708|
0000e6  5d09              LDRB     r1,[r1,r4]            ;2213
0000e8  9102              STR      r1,[sp,#8]            ;2215
0000ea  496a              LDR      r1,|L4.660|
0000ec  7b49              LDRB     r1,[r1,#0xd]          ;2215  ; gReduce
0000ee  2900              CMP      r1,#0                 ;2215
0000f0  d02c              BEQ      |L4.332|
0000f2  2401              MOVS     r4,#1                 ;2217
                  |L4.244|
0000f4  9802              LDR      r0,[sp,#8]            ;2218
0000f6  2800              CMP      r0,#0                 ;2218
0000f8  d002              BEQ      |L4.256|
0000fa  4973              LDR      r1,|L4.712|
0000fc  4873              LDR      r0,|L4.716|
0000fe  e001              B        |L4.260|
                  |L4.256|
000100  4973              LDR      r1,|L4.720|
000102  4874              LDR      r0,|L4.724|
                  |L4.260|
000104  f7fffffe          BL       huffDecode
000108  4606              MOV      r6,r0                 ;2218
00010a  0700              LSLS     r0,r0,#28             ;2219
00010c  0f00              LSRS     r0,r0,#28             ;2219
00010e  4605              MOV      r5,r0                 ;2219
000110  d002              BEQ      |L4.280|
000112  2101              MOVS     r1,#1                 ;2221
000114  f7fffffe          BL       getBits
                  |L4.280|
000118  0930              LSRS     r0,r6,#4              ;2222
00011a  2d00              CMP      r5,#0                 ;2224
00011c  d006              BEQ      |L4.300|
00011e  2800              CMP      r0,#0                 ;2225
000120  d00c              BEQ      |L4.316|
000122  1820              ADDS     r0,r4,r0              ;2226
000124  283f              CMP      r0,#0x3f              ;2226
000126  d869              BHI      |L4.508|
000128  b2c4              UXTB     r4,r0                 ;2228
00012a  e007              B        |L4.316|
                  |L4.300|
00012c  280f              CMP      r0,#0xf               ;2231
00012e  d109              BNE      |L4.324|
000130  4620              MOV      r0,r4                 ;2232
000132  3010              ADDS     r0,r0,#0x10           ;2232
000134  2840              CMP      r0,#0x40              ;2232
000136  d861              BHI      |L4.508|
000138  340f              ADDS     r4,r4,#0xf            ;2232
00013a  b2e4              UXTB     r4,r4                 ;2234
                  |L4.316|
00013c  1c64              ADDS     r4,r4,#1              ;2234
00013e  b2e4              UXTB     r4,r4                 ;2236
000140  2c40              CMP      r4,#0x40              ;2236
000142  d3d7              BCC      |L4.244|
                  |L4.324|
000144  9800              LDR      r0,[sp,#0]            ;2239
000146  f7fffffe          BL       transformBlockReduce
00014a  e097              B        |L4.636|
                  |L4.332|
00014c  2401              MOVS     r4,#1                 ;2242
00014e  2500              MOVS     r5,#0                 ;2242
                  |L4.336|
000150  9802              LDR      r0,[sp,#8]            ;2244
000152  2800              CMP      r0,#0                 ;2244
000154  d002              BEQ      |L4.348|
000156  495c              LDR      r1,|L4.712|
000158  485c              LDR      r0,|L4.716|
00015a  e001              B        |L4.352|
                  |L4.348|
00015c  495c              LDR      r1,|L4.720|
00015e  485d              LDR      r0,|L4.724|
                  |L4.352|
000160  f7fffffe          BL       huffDecode
000164  4607              MOV      r7,r0                 ;2244
000166  2000              MOVS     r0,#0                 ;2245
000168  4686              MOV      lr,r0                 ;2245
00016a  0738              LSLS     r0,r7,#28             ;2246
00016c  0f00              LSRS     r0,r0,#28             ;2246
00016e  4606              MOV      r6,r0                 ;2246
000170  d003              BEQ      |L4.378|
000172  2101              MOVS     r1,#1                 ;2248
000174  f7fffffe          BL       getBits
000178  4686              MOV      lr,r0                 ;2248
                  |L4.378|
00017a  0938              LSRS     r0,r7,#4              ;2250
00017c  46b4              MOV      r12,r6                ;2251
00017e  e000              B        |L4.386|
                  |L4.384|
000180  e085              B        |L4.654|
                  |L4.386|
000182  2e00              CMP      r6,#0                 ;2252
000184  d033              BEQ      |L4.494|
000186  2800              CMP      r0,#0                 ;2254
000188  d023              BEQ      |L4.466|
00018a  1821              ADDS     r1,r4,r0              ;2255
00018c  293f              CMP      r1,#0x3f              ;2255
00018e  d835              BHI      |L4.508|
000190  2300              MOVS     r3,#0
000192  9001              STR      r0,[sp,#4]
000194  07c0              LSLS     r0,r0,#31
000196  d006              BEQ      |L4.422|
000198  484f              LDR      r0,|L4.728|
00019a  b2e1              UXTB     r1,r4                 ;2258
00019c  5640              LDRSB    r0,[r0,r1]            ;2258
00019e  0041              LSLS     r1,r0,#1              ;2258
0001a0  4847              LDR      r0,|L4.704|
0001a2  2301              MOVS     r3,#1
0001a4  5245              STRH     r5,[r0,r1]            ;2258
                  |L4.422|
0001a6  9801              LDR      r0,[sp,#4]            ;2257
0001a8  0842              LSRS     r2,r0,#1              ;2257
0001aa  d00f              BEQ      |L4.460|
0001ac  4e44              LDR      r6,|L4.704|
0001ae  494a              LDR      r1,|L4.728|
                  |L4.432|
0001b0  18e7              ADDS     r7,r4,r3              ;2258
0001b2  b2f8              UXTB     r0,r7                 ;2258
0001b4  5608              LDRSB    r0,[r1,r0]            ;2258
0001b6  1c7f              ADDS     r7,r7,#1              ;2258
0001b8  0040              LSLS     r0,r0,#1              ;2258
0001ba  5235              STRH     r5,[r6,r0]            ;2258
0001bc  b2ff              UXTB     r7,r7                 ;2258
0001be  57cf              LDRSB    r7,[r1,r7]            ;2258
0001c0  1e52              SUBS     r2,r2,#1              ;2258
0001c2  007f              LSLS     r7,r7,#1              ;2258
0001c4  1c9b              ADDS     r3,r3,#2              ;2258
0001c6  53f5              STRH     r5,[r6,r7]            ;2258
0001c8  2a00              CMP      r2,#0
0001ca  d1f1              BNE      |L4.432|
                  |L4.460|
0001cc  9801              LDR      r0,[sp,#4]            ;2260
0001ce  1820              ADDS     r0,r4,r0              ;2260
0001d0  b2c4              UXTB     r4,r0                 ;2260
                  |L4.466|
0001d2  4661              MOV      r1,r12                ;2262
0001d4  4670              MOV      r0,lr                 ;2262
0001d6  f7fffffe          BL       huffExtend
0001da  9903              LDR      r1,[sp,#0xc]          ;2263
0001dc  0062              LSLS     r2,r4,#1              ;2263
0001de  5a89              LDRH     r1,[r1,r2]            ;2263
0001e0  4341              MULS     r1,r0,r1              ;2263
0001e2  483d              LDR      r0,|L4.728|
0001e4  5700              LDRSB    r0,[r0,r4]            ;2263
0001e6  0042              LSLS     r2,r0,#1              ;2263
0001e8  4835              LDR      r0,|L4.704|
0001ea  5281              STRH     r1,[r0,r2]            ;2263
0001ec  e01f              B        |L4.558|
                  |L4.494|
0001ee  280f              CMP      r0,#0xf               ;2265
0001f0  d121              BNE      |L4.566|
0001f2  4620              MOV      r0,r4                 ;2266
0001f4  3010              ADDS     r0,r0,#0x10           ;2266
0001f6  4684              MOV      r12,r0                ;2266
0001f8  2840              CMP      r0,#0x40              ;2266
0001fa  d902              BLS      |L4.514|
                  |L4.508|
0001fc  201c              MOVS     r0,#0x1c              ;2267
0001fe  b005              ADD      sp,sp,#0x14
000200  bdf0              POP      {r4-r7,pc}
                  |L4.514|
000202  2200              MOVS     r2,#0
000204  492e              LDR      r1,|L4.704|
000206  4834              LDR      r0,|L4.728|
000208  2308              MOVS     r3,#8                 ;2268
                  |L4.522|
00020a  18a6              ADDS     r6,r4,r2              ;2269
00020c  b2f7              UXTB     r7,r6                 ;2269
00020e  57c7              LDRSB    r7,[r0,r7]            ;2269
000210  1c76              ADDS     r6,r6,#1              ;2269
000212  007f              LSLS     r7,r7,#1              ;2269
000214  53cd              STRH     r5,[r1,r7]            ;2269
000216  b2f6              UXTB     r6,r6                 ;2269
000218  5786              LDRSB    r6,[r0,r6]            ;2269
00021a  1c92              ADDS     r2,r2,#2              ;2269
00021c  0076              LSLS     r6,r6,#1              ;2269
00021e  1e5b              SUBS     r3,r3,#1              ;2269
000220  041b              LSLS     r3,r3,#16
000222  538d              STRH     r5,[r1,r6]            ;2269
000224  0c1b              LSRS     r3,r3,#16
000226  d1f0              BNE      |L4.522|
000228  4660              MOV      r0,r12
00022a  1e40              SUBS     r0,r0,#1
00022c  b2c4              UXTB     r4,r0                 ;2270
                  |L4.558|
00022e  1c64              ADDS     r4,r4,#1              ;2270
000230  b2e4              UXTB     r4,r4                 ;2274
000232  2c40              CMP      r4,#0x40              ;2274
000234  d38c              BCC      |L4.336|
                  |L4.566|
000236  2c40              CMP      r4,#0x40              ;2275
000238  d21d              BCS      |L4.630|
00023a  2040              MOVS     r0,#0x40              ;2275
00023c  1b00              SUBS     r0,r0,r4              ;2275
00023e  2800              CMP      r0,#0                 ;2275
000240  dd19              BLE      |L4.630|
000242  07c1              LSLS     r1,r0,#31
000244  d006              BEQ      |L4.596|
000246  4924              LDR      r1,|L4.728|
000248  b2e2              UXTB     r2,r4                 ;2276
00024a  5689              LDRSB    r1,[r1,r2]            ;2276
00024c  004a              LSLS     r2,r1,#1              ;2276
00024e  491c              LDR      r1,|L4.704|
000250  1c64              ADDS     r4,r4,#1              ;2276
000252  528d              STRH     r5,[r1,r2]            ;2276
                  |L4.596|
000254  1040              ASRS     r0,r0,#1              ;2275
000256  d00e              BEQ      |L4.630|
000258  4a19              LDR      r2,|L4.704|
00025a  491f              LDR      r1,|L4.728|
                  |L4.604|
00025c  b2e3              UXTB     r3,r4                 ;2276
00025e  56cb              LDRSB    r3,[r1,r3]            ;2276
000260  1c64              ADDS     r4,r4,#1              ;2276
000262  005b              LSLS     r3,r3,#1              ;2276
000264  52d5              STRH     r5,[r2,r3]            ;2276
000266  b2e3              UXTB     r3,r4                 ;2276
000268  56cb              LDRSB    r3,[r1,r3]            ;2276
00026a  1e40              SUBS     r0,r0,#1              ;2276
00026c  005b              LSLS     r3,r3,#1              ;2276
00026e  1c64              ADDS     r4,r4,#1              ;2276
000270  52d5              STRH     r5,[r2,r3]            ;2276
000272  2800              CMP      r0,#0                 ;2276
000274  d1f2              BNE      |L4.604|
                  |L4.630|
000276  9800              LDR      r0,[sp,#0]            ;2277
000278  f7fffffe          BL       transformBlock
                  |L4.636|
00027c  9800              LDR      r0,[sp,#0]            ;2279
00027e  4905              LDR      r1,|L4.660|
000280  1c40              ADDS     r0,r0,#1              ;2279
000282  b2c0              UXTB     r0,r0                 ;2279
000284  9000              STR      r0,[sp,#0]            ;2279
000286  7a49              LDRB     r1,[r1,#9]            ;2279  ; gMaxBlocksPerMCU
000288  4288              CMP      r0,r1                 ;2279
00028a  d200              BCS      |L4.654|
00028c  e6f9              B        |L4.130|
                  |L4.654|
00028e  2000              MOVS     r0,#0                 ;2280
000290  b005              ADD      sp,sp,#0x14
000292  bdf0              POP      {r4-r7,pc}
;;;2282   //------------------------------------------------------------------------------
                          ENDP

                  |L4.660|
                          DCD      ||.data||
                  |L4.664|
                          DCD      ||.data||+0x44
                  |L4.668|
                          DCD      ||.data||+0x4a
                  |L4.672|
                          DCD      ||.data||+0x29
                  |L4.676|
                          DCD      ||.data||+0x2f
                  |L4.680|
                          DCD      ||.bss||+0x400
                  |L4.684|
                          DCD      ||.bss||+0x380
                  |L4.688|
                          DCD      ||.bss||+0x530
                  |L4.692|
                          DCD      ||.bss||+0x4e0
                  |L4.696|
                          DCD      ||.bss||+0x4d0
                  |L4.700|
                          DCD      ||.bss||+0x480
                  |L4.704|
                          DCD      ||.bss||
                  |L4.708|
                          DCD      ||.data||+0x32
                  |L4.712|
                          DCD      ||.bss||+0x6e0
                  |L4.716|
                          DCD      ||.bss||+0x690
                  |L4.720|
                          DCD      ||.bss||+0x590
                  |L4.724|
                          DCD      ||.bss||+0x540
                  |L4.728|
                          DCD      ||.constdata||

                          AREA ||i.getBits||, CODE, READONLY, ALIGN=2

                  getBits PROC
                  |symbol_number.242|
;;;288    #endif
;;;289    static uint16 getBits(uint8 numBits, uint8 FFCheck)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;290    {
;;;291       uint8 origBits = numBits;
;;;292       uint16 ret = gBitBuf;
000002  4c1d              LDR      r4,|L5.120|
000004  b081              SUB      sp,sp,#4              ;290
000006  89e6              LDRH     r6,[r4,#0xe]  ; gBitBuf
000008  4605              MOV      r5,r0                 ;290
00000a  4607              MOV      r7,r0                 ;291
;;;293       
;;;294       if (numBits > 8)
00000c  2808              CMP      r0,#8
00000e  d915              BLS      |L5.60|
;;;295       {
;;;296          numBits -= 8;
000010  463d              MOV      r5,r7
000012  3d08              SUBS     r5,r5,#8
;;;297          
;;;298          gBitBuf <<= gBitsLeft;
000014  7961              LDRB     r1,[r4,#5]  ; gBitsLeft
000016  4630              MOV      r0,r6                 ;296
000018  4088              LSLS     r0,r0,r1
00001a  81e0              STRH     r0,[r4,#0xe]
00001c  b2ed              UXTB     r5,r5                 ;296
;;;299          
;;;300          gBitBuf |= getOctet(FFCheck);
00001e  9802              LDR      r0,[sp,#8]
000020  f7fffffe          BL       getOctet
000024  89e1              LDRH     r1,[r4,#0xe]  ; gBitBuf
;;;301          
;;;302          gBitBuf <<= (8 - gBitsLeft);
000026  7962              LDRB     r2,[r4,#5]  ; gBitsLeft
000028  4308              ORRS     r0,r0,r1              ;300
00002a  2108              MOVS     r1,#8
00002c  1a89              SUBS     r1,r1,r2
00002e  4088              LSLS     r0,r0,r1
000030  b280              UXTH     r0,r0
;;;303          
;;;304          ret = (ret & 0xFF00) | (gBitBuf >> 8);
000032  0a36              LSRS     r6,r6,#8
000034  81e0              STRH     r0,[r4,#0xe]          ;302
000036  0236              LSLS     r6,r6,#8
000038  0a00              LSRS     r0,r0,#8
00003a  4306              ORRS     r6,r6,r0
                  |L5.60|
;;;305       }
;;;306          
;;;307       if (gBitsLeft < numBits)
00003c  7960              LDRB     r0,[r4,#5]  ; gBitsLeft
00003e  42a8              CMP      r0,r5
000040  d20f              BCS      |L5.98|
;;;308       {
;;;309          gBitBuf <<= gBitsLeft;
000042  89e1              LDRH     r1,[r4,#0xe]  ; gBitBuf
000044  4081              LSLS     r1,r1,r0
000046  81e1              STRH     r1,[r4,#0xe]
;;;310          
;;;311          gBitBuf |= getOctet(FFCheck);
000048  9802              LDR      r0,[sp,#8]
00004a  f7fffffe          BL       getOctet
00004e  89e1              LDRH     r1,[r4,#0xe]  ; gBitBuf
000050  4308              ORRS     r0,r0,r1
;;;312          
;;;313          gBitBuf <<= (numBits - gBitsLeft);
000052  7961              LDRB     r1,[r4,#5]  ; gBitsLeft
000054  1a69              SUBS     r1,r5,r1
000056  4088              LSLS     r0,r0,r1
000058  81e0              STRH     r0,[r4,#0xe]
;;;314                            
;;;315          gBitsLeft = 8 - (numBits - gBitsLeft);
00005a  2008              MOVS     r0,#8
00005c  1a40              SUBS     r0,r0,r1
00005e  7160              STRB     r0,[r4,#5]
000060  e004              B        |L5.108|
                  |L5.98|
;;;316       }
;;;317       else
;;;318       {
;;;319          gBitsLeft = (uint8)(gBitsLeft - numBits);
000062  1b40              SUBS     r0,r0,r5
000064  7160              STRB     r0,[r4,#5]
;;;320          gBitBuf <<= numBits;
000066  89e0              LDRH     r0,[r4,#0xe]  ; gBitBuf
000068  40a8              LSLS     r0,r0,r5
00006a  81e0              STRH     r0,[r4,#0xe]
                  |L5.108|
;;;321       }
;;;322       
;;;323       return ret >> (16 - origBits);
00006c  2010              MOVS     r0,#0x10
00006e  1bc1              SUBS     r1,r0,r7
000070  4630              MOV      r0,r6
000072  40c8              LSRS     r0,r0,r1
;;;324    }
000074  b003              ADD      sp,sp,#0xc
000076  bdf0              POP      {r4-r7,pc}
;;;325    //------------------------------------------------------------------------------
                          ENDP

                  |L5.120|
                          DCD      ||.data||

                          AREA ||i.getChar||, CODE, READONLY, ALIGN=2

                  getChar PROC
;;;244    //------------------------------------------------------------------------------
;;;245    static PJPG_INLINE uint8 getChar(void)
000000  b570              PUSH     {r4-r6,lr}
;;;246    {
;;;247       if (!gInBufLeft)
000002  4c12              LDR      r4,|L6.76|
000004  4d12              LDR      r5,|L6.80|
000006  7920              LDRB     r0,[r4,#4]  ; gInBufLeft
000008  2800              CMP      r0,#0
00000a  d10d              BNE      |L6.40|
00000c  2004              MOVS     r0,#4                 ;246
00000e  70e0              STRB     r0,[r4,#3]            ;246
000010  21fc              MOVS     r1,#0xfc              ;246
000012  6be6              LDR      r6,[r4,#0x3c]         ;246  ; g_pNeedBytesCallback
000014  1d28              ADDS     r0,r5,#4              ;246
000016  4a0f              LDR      r2,|L6.84|
000018  6c23              LDR      r3,[r4,#0x40]         ;246  ; g_pCallback_data
00001a  47b0              BLX      r6                    ;246
00001c  2800              CMP      r0,#0                 ;246
00001e  d000              BEQ      |L6.34|
000020  7320              STRB     r0,[r4,#0xc]          ;246
                  |L6.34|
;;;248       {
;;;249          fillInBuf();
;;;250          if (!gInBufLeft)
000022  7920              LDRB     r0,[r4,#4]  ; gInBufLeft
000024  2800              CMP      r0,#0
000026  d007              BEQ      |L6.56|
                  |L6.40|
;;;251          {
;;;252             gTemFlag = ~gTemFlag;
;;;253             return gTemFlag ? 0xFF : 0xD9;
;;;254          } 
;;;255       }
;;;256       
;;;257       gInBufLeft--;
000028  b2c0              UXTB     r0,r0
00002a  1e40              SUBS     r0,r0,#1
00002c  7120              STRB     r0,[r4,#4]
;;;258       return gInBuf[gInBufOfs++];
00002e  78e1              LDRB     r1,[r4,#3]  ; gInBufOfs
000030  5c68              LDRB     r0,[r5,r1]
000032  1c49              ADDS     r1,r1,#1
000034  70e1              STRB     r1,[r4,#3]
;;;259    }
000036  bd70              POP      {r4-r6,pc}
                  |L6.56|
000038  78a0              LDRB     r0,[r4,#2]            ;252  ; gTemFlag
00003a  43c0              MVNS     r0,r0                 ;252
00003c  0600              LSLS     r0,r0,#24             ;252
00003e  0e00              LSRS     r0,r0,#24             ;252
000040  70a0              STRB     r0,[r4,#2]            ;252
000042  d001              BEQ      |L6.72|
000044  20ff              MOVS     r0,#0xff              ;253
000046  bd70              POP      {r4-r6,pc}
                  |L6.72|
000048  20d9              MOVS     r0,#0xd9              ;253
00004a  bd70              POP      {r4-r6,pc}
;;;260    //------------------------------------------------------------------------------
                          ENDP

                  |L6.76|
                          DCD      ||.data||
                  |L6.80|
                          DCD      ||.bss||+0x7e0
                  |L6.84|
                          DCD      ||.data||+0x4

                          AREA ||i.getOctet||, CODE, READONLY, ALIGN=2

                  getOctet PROC
;;;267    //------------------------------------------------------------------------------
;;;268    static PJPG_INLINE uint8 getOctet(uint8 FFCheck)
000000  b570              PUSH     {r4-r6,lr}
;;;269    {
000002  4605              MOV      r5,r0
;;;270       uint8 c = getChar();
000004  f7fffffe          BL       getChar
000008  4604              MOV      r4,r0
;;;271          
;;;272       if ((FFCheck) && (c == 0xFF))
00000a  2d00              CMP      r5,#0
00000c  d013              BEQ      |L7.54|
00000e  2cff              CMP      r4,#0xff
000010  d111              BNE      |L7.54|
;;;273       {
;;;274          uint8 n = getChar();
000012  f7fffffe          BL       getChar
;;;275    
;;;276          if (n)
000016  2800              CMP      r0,#0
000018  d00d              BEQ      |L7.54|
00001a  4908              LDR      r1,|L7.60|
00001c  4b08              LDR      r3,|L7.64|
00001e  78ca              LDRB     r2,[r1,#3]  ; gInBufOfs
;;;277          {
;;;278             stuffChar(n);
;;;279             stuffChar(0xFF);
000020  25ff              MOVS     r5,#0xff
000022  1e52              SUBS     r2,r2,#1
000024  b2d2              UXTB     r2,r2
000026  5498              STRB     r0,[r3,r2]
000028  1e52              SUBS     r2,r2,#1
00002a  7908              LDRB     r0,[r1,#4]  ; gInBufLeft
00002c  b2d2              UXTB     r2,r2
00002e  70ca              STRB     r2,[r1,#3]
000030  549d              STRB     r5,[r3,r2]
000032  1c80              ADDS     r0,r0,#2
000034  7108              STRB     r0,[r1,#4]
                  |L7.54|
;;;280          }
;;;281       }
;;;282    
;;;283       return c;
000036  4620              MOV      r0,r4
;;;284    }
000038  bd70              POP      {r4-r6,pc}
;;;285    //------------------------------------------------------------------------------
                          ENDP

00003a  0000              DCW      0x0000
                  |L7.60|
                          DCD      ||.data||
                  |L7.64|
                          DCD      ||.bss||+0x7e0

                          AREA ||i.huffDecode||, CODE, READONLY, ALIGN=2

                  huffDecode PROC
                  |symbol_number.246|
;;;423    #endif
;;;424    static uint8 huffDecode(const HuffTable* pHuffTable, const uint8* pHuffVal)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
000002  4f2c              LDR      r7,|L8.180|
;;;425    {
;;;426       uint8 i = 0;
000004  2500              MOVS     r5,#0
000006  89f9              LDRH     r1,[r7,#0xe]  ; gBitBuf
000008  4606              MOV      r6,r0                 ;425
00000a  b081              SUB      sp,sp,#4              ;425
00000c  462c              MOV      r4,r5                 ;425
00000e  0408              LSLS     r0,r1,#16             ;425
000010  d500              BPL      |L8.20|
000012  2401              MOVS     r4,#1                 ;425
                  |L8.20|
000014  7978              LDRB     r0,[r7,#5]            ;425  ; gBitsLeft
000016  2800              CMP      r0,#0                 ;425
000018  d01d              BEQ      |L8.86|
00001a  1e40              SUBS     r0,r0,#1              ;425
00001c  7178              STRB     r0,[r7,#5]            ;425
00001e  0048              LSLS     r0,r1,#1              ;425
000020  81f8              STRH     r0,[r7,#0xe]          ;425
                  |L8.34|
;;;427       uint8 j;
;;;428    	
;;;429       uint16 code = getBit();
;;;430    
;;;431       // This func only reads a bit at a time, which on modern CPU's is not terribly efficient.
;;;432       // But on microcontrollers without strong integer shifting support this seems like a 
;;;433       // more reasonable approach.
;;;434       for ( ; ; )
;;;435       {
;;;436          uint16 maxCode;
;;;437    
;;;438    		 	// AD Opt
;;;439    			huffDecode_ctr++;
000022  4824              LDR      r0,|L8.180|
000024  6b81              LDR      r1,[r0,#0x38]  ; huffDecode_ctr
000026  1c49              ADDS     r1,r1,#1
000028  6381              STR      r1,[r0,#0x38]  ; huffDecode_ctr
;;;440    
;;;441    		 
;;;442          if (i == 16)
00002a  2d10              CMP      r5,#0x10
00002c  d01f              BEQ      |L8.110|
;;;443             return 0;
;;;444    
;;;445          maxCode = pHuffTable->mMaxCode[i];
00002e  0069              LSLS     r1,r5,#1
000030  1989              ADDS     r1,r1,r6
000032  8c09              LDRH     r1,[r1,#0x20]
;;;446          if ((code <= maxCode) && (maxCode != 0xFFFF))
000034  428c              CMP      r4,r1
000036  d81d              BHI      |L8.116|
000038  4a1f              LDR      r2,|L8.184|
00003a  4291              CMP      r1,r2
00003c  d01a              BEQ      |L8.116|
;;;447             break;
;;;448    
;;;449          i++;
;;;450          code <<= 1;
;;;451          code |= getBit();
;;;452       }
;;;453    
;;;454       j = pHuffTable->mValPtr[i];
00003e  1970              ADDS     r0,r6,r5
;;;455       j = (uint8)(j + (code - pHuffTable->mMinCode[i]));
000040  0069              LSLS     r1,r5,#1
000042  3040              ADDS     r0,r0,#0x40           ;454
000044  5c71              LDRB     r1,[r6,r1]
000046  7800              LDRB     r0,[r0,#0]            ;454
000048  1a61              SUBS     r1,r4,r1
00004a  1808              ADDS     r0,r1,r0
;;;456    
;;;457       return pHuffVal[j];
00004c  9902              LDR      r1,[sp,#8]
00004e  b2c0              UXTB     r0,r0                 ;455
000050  5c08              LDRB     r0,[r1,r0]
;;;458    }
000052  b003              ADD      sp,sp,#0xc
000054  bdf0              POP      {r4-r7,pc}
                  |L8.86|
000056  2001              MOVS     r0,#1
000058  f7fffffe          BL       getOctet
00005c  4601              MOV      r1,r0
00005e  89f8              LDRH     r0,[r7,#0xe]  ; gBitBuf
000060  4301              ORRS     r1,r1,r0
000062  7978              LDRB     r0,[r7,#5]  ; gBitsLeft
000064  1dc0              ADDS     r0,r0,#7
000066  7178              STRB     r0,[r7,#5]
000068  0048              LSLS     r0,r1,#1
00006a  81f8              STRH     r0,[r7,#0xe]
00006c  e7d9              B        |L8.34|
                  |L8.110|
00006e  2000              MOVS     r0,#0                 ;443
000070  b003              ADD      sp,sp,#0xc
000072  bdf0              POP      {r4-r7,pc}
                  |L8.116|
000074  0461              LSLS     r1,r4,#17             ;450
000076  0c0f              LSRS     r7,r1,#16             ;450
000078  1c6d              ADDS     r5,r5,#1
00007a  89c1              LDRH     r1,[r0,#0xe]  ; gBitBuf
00007c  2400              MOVS     r4,#0
00007e  b2ed              UXTB     r5,r5                 ;449
000080  040a              LSLS     r2,r1,#16             ;449
000082  d500              BPL      |L8.134|
000084  2401              MOVS     r4,#1                 ;449
                  |L8.134|
000086  480b              LDR      r0,|L8.180|
000088  7940              LDRB     r0,[r0,#5]            ;449  ; gBitsLeft
00008a  2800              CMP      r0,#0                 ;449
00008c  d006              BEQ      |L8.156|
00008e  4a09              LDR      r2,|L8.180|
000090  1e40              SUBS     r0,r0,#1              ;449
000092  7150              STRB     r0,[r2,#5]            ;449
000094  0048              LSLS     r0,r1,#1              ;449
000096  81d0              STRH     r0,[r2,#0xe]          ;449
                  |L8.152|
000098  433c              ORRS     r4,r4,r7              ;451
00009a  e7c2              B        |L8.34|
                  |L8.156|
00009c  2001              MOVS     r0,#1                 ;452
00009e  f7fffffe          BL       getOctet
0000a2  4904              LDR      r1,|L8.180|
0000a4  89ca              LDRH     r2,[r1,#0xe]          ;452  ; gBitBuf
0000a6  4310              ORRS     r0,r0,r2              ;452
0000a8  794a              LDRB     r2,[r1,#5]            ;452  ; gBitsLeft
0000aa  1dd2              ADDS     r2,r2,#7              ;452
0000ac  714a              STRB     r2,[r1,#5]            ;452
0000ae  0040              LSLS     r0,r0,#1              ;452
0000b0  81c8              STRH     r0,[r1,#0xe]          ;452
0000b2  e7f1              B        |L8.152|
;;;459    //------------------------------------------------------------------------------
                          ENDP

                  |L8.180|
                          DCD      ||.data||
                  |L8.184|
                          DCD      0x0000ffff

                          AREA ||i.huffExtend||, CODE, READONLY, ALIGN=2

                  huffExtend PROC
                  |symbol_number.248|
;;;415    #endif
;;;416    static int16 huffExtend(uint16 x, uint8 s)
000000  b202              SXTH     r2,r0
000002  2910              CMP      r1,#0x10
000004  d25e              BCS      |L9.196|
000006  000b              MOVS     r3,r1
000008  447b              ADD      r3,r3,pc
00000a  791b              LDRB     r3,[r3,#4]
00000c  18db              ADDS     r3,r3,r3
00000e  449f              ADD      pc,pc,r3
000010  59070c11          DCB      0x59,0x07,0x0c,0x11
000014  161b2025          DCB      0x16,0x1b,0x20,0x25
000018  2a2f353b          DCB      0x2a,0x2f,0x35,0x3b
00001c  41474d53          DCB      0x41,0x47,0x4d,0x53
;;;417    {
;;;418       return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
000020  2801              CMP      r0,#1
000022  d24f              BCS      |L9.196|
000024  2000              MOVS     r0,#0
000026  43c0              MVNS     r0,r0
000028  e04b              B        |L9.194|
00002a  2802              CMP      r0,#2
00002c  d24a              BCS      |L9.196|
00002e  2002              MOVS     r0,#2
000030  43c0              MVNS     r0,r0
000032  e046              B        |L9.194|
000034  2804              CMP      r0,#4
000036  d245              BCS      |L9.196|
000038  2006              MOVS     r0,#6
00003a  43c0              MVNS     r0,r0
00003c  e041              B        |L9.194|
00003e  2808              CMP      r0,#8
000040  d240              BCS      |L9.196|
000042  200e              MOVS     r0,#0xe
000044  43c0              MVNS     r0,r0
000046  e03c              B        |L9.194|
000048  2810              CMP      r0,#0x10
00004a  d23b              BCS      |L9.196|
00004c  201e              MOVS     r0,#0x1e
00004e  43c0              MVNS     r0,r0
000050  e037              B        |L9.194|
000052  2820              CMP      r0,#0x20
000054  d236              BCS      |L9.196|
000056  203e              MOVS     r0,#0x3e
000058  43c0              MVNS     r0,r0
00005a  e032              B        |L9.194|
00005c  2840              CMP      r0,#0x40
00005e  d231              BCS      |L9.196|
000060  207e              MOVS     r0,#0x7e
000062  43c0              MVNS     r0,r0
000064  e02d              B        |L9.194|
000066  2880              CMP      r0,#0x80
000068  d22c              BCS      |L9.196|
00006a  20fe              MOVS     r0,#0xfe
00006c  43c0              MVNS     r0,r0
00006e  e028              B        |L9.194|
000070  21ff              MOVS     r1,#0xff
000072  3101              ADDS     r1,#1
000074  4288              CMP      r0,r1
000076  d225              BCS      |L9.196|
000078  4813              LDR      r0,|L9.200|
00007a  e022              B        |L9.194|
00007c  2101              MOVS     r1,#1
00007e  0249              LSLS     r1,r1,#9
000080  4288              CMP      r0,r1
000082  d21f              BCS      |L9.196|
000084  4811              LDR      r0,|L9.204|
000086  e01c              B        |L9.194|
000088  2101              MOVS     r1,#1
00008a  0289              LSLS     r1,r1,#10
00008c  4288              CMP      r0,r1
00008e  d219              BCS      |L9.196|
000090  480f              LDR      r0,|L9.208|
000092  e016              B        |L9.194|
000094  2101              MOVS     r1,#1
000096  02c9              LSLS     r1,r1,#11
000098  4288              CMP      r0,r1
00009a  d213              BCS      |L9.196|
00009c  480d              LDR      r0,|L9.212|
00009e  e010              B        |L9.194|
0000a0  2101              MOVS     r1,#1
0000a2  0309              LSLS     r1,r1,#12
0000a4  4288              CMP      r0,r1
0000a6  d20d              BCS      |L9.196|
0000a8  480b              LDR      r0,|L9.216|
0000aa  e00a              B        |L9.194|
0000ac  2101              MOVS     r1,#1
0000ae  0349              LSLS     r1,r1,#13
0000b0  4288              CMP      r0,r1
0000b2  d207              BCS      |L9.196|
0000b4  4809              LDR      r0,|L9.220|
0000b6  e004              B        |L9.194|
0000b8  2101              MOVS     r1,#1
0000ba  0389              LSLS     r1,r1,#14
0000bc  4288              CMP      r0,r1
0000be  d201              BCS      |L9.196|
0000c0  4807              LDR      r0,|L9.224|
                  |L9.194|
0000c2  1882              ADDS     r2,r0,r2
                  |L9.196|
0000c4  b210              SXTH     r0,r2
;;;419    }
0000c6  4770              BX       lr
;;;420    //------------------------------------------------------------------------------
                          ENDP

                  |L9.200|
                          DCD      0xfffffe01
                  |L9.204|
                          DCD      0xfffffc01
                  |L9.208|
                          DCD      0xfffff801
                  |L9.212|
                          DCD      0xfffff001
                  |L9.216|
                          DCD      0xffffe001
                  |L9.220|
                          DCD      0xffffc001
                  |L9.224|
                          DCD      0xffff8001

                          AREA ||i.idctCols||, CODE, READONLY, ALIGN=2

                  idctCols PROC
                  |symbol_number.250|
;;;1410   #endif
;;;1411   static void idctCols(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1412   {
;;;1413      uint8 i;
;;;1414         
;;;1415      int16* pSrc = gCoeffBuf;
000002  4894              LDR      r0,|L10.596|
;;;1416      
;;;1417      for (i = 0; i < 8; i++)
000004  2100              MOVS     r1,#0
000006  b084              SUB      sp,sp,#0x10           ;1412
000008  468c              MOV      r12,r1
                  |L10.10|
;;;1418      {
;;;1419   //		 if ((pSrc[1*8] | pSrc[2*8] | pSrc[3*8] | pSrc[4*8] | pSrc[5*8] | pSrc[6*8] | pSrc[7*8]) == 0) // AD: suspicious
;;;1420   // AD Opt
;;;1421   		 if ((pSrc[1*8] == 0) && (pSrc[2*8] == 0) && (pSrc[3*8] == 0) && (pSrc[4*8] == 0) && 
00000a  2210              MOVS     r2,#0x10
00000c  5e82              LDRSH    r2,[r0,r2]
00000e  2a00              CMP      r2,#0
000010  d113              BNE      |L10.58|
000012  8c01              LDRH     r1,[r0,#0x20]
000014  2900              CMP      r1,#0
000016  d110              BNE      |L10.58|
000018  8e01              LDRH     r1,[r0,#0x30]
00001a  2900              CMP      r1,#0
00001c  d10d              BNE      |L10.58|
00001e  4601              MOV      r1,r0
000020  3140              ADDS     r1,r1,#0x40
000022  880b              LDRH     r3,[r1,#0]
000024  2b00              CMP      r3,#0
000026  d108              BNE      |L10.58|
;;;1422   			 (pSrc[5*8] == 0) && (pSrc[6*8] == 0) && (pSrc[7*8] == 0) ) // AD Opt
000028  8a0b              LDRH     r3,[r1,#0x10]
00002a  2b00              CMP      r3,#0
00002c  d105              BNE      |L10.58|
00002e  8c0b              LDRH     r3,[r1,#0x20]
000030  2b00              CMP      r3,#0
000032  d102              BNE      |L10.58|
000034  8e0b              LDRH     r3,[r1,#0x30]
000036  2b00              CMP      r3,#0
000038  d05b              BEQ      |L10.242|
                  |L10.58|
;;;1423   // End AD Opt
;;;1424   		 {
;;;1425            // Short circuit the 1D IDCT if only the DC component is non-zero
;;;1426            uint8 c = clamp(PJPG_DESCALE(*pSrc) + 128);
;;;1427            *(pSrc+0*8) = c;
;;;1428            *(pSrc+1*8) = c;
;;;1429            *(pSrc+2*8) = c;
;;;1430            *(pSrc+3*8) = c;
;;;1431            *(pSrc+4*8) = c;
;;;1432            *(pSrc+5*8) = c;
;;;1433            *(pSrc+6*8) = c;
;;;1434            *(pSrc+7*8) = c;
;;;1435         }
;;;1436         else
;;;1437         {
;;;1438            int16 src4 = *(pSrc+5*8);
00003a  4601              MOV      r1,r0
00003c  3140              ADDS     r1,r1,#0x40
00003e  8a0d              LDRH     r5,[r1,#0x10]
;;;1439            int16 src7 = *(pSrc+3*8);
000040  8e04              LDRH     r4,[r0,#0x30]
;;;1440            int16 x4  = src4 - src7;
000042  1b2b              SUBS     r3,r5,r4
;;;1441            int16 x7  = src4 + src7;
000044  192f              ADDS     r7,r5,r4
;;;1442   
;;;1443            int16 src5 = *(pSrc+1*8);
;;;1444            int16 src6 = *(pSrc+7*8);
000046  8e0c              LDRH     r4,[r1,#0x30]
000048  b21b              SXTH     r3,r3                 ;1440
;;;1445            int16 x5  = src5 + src6;
00004a  1916              ADDS     r6,r2,r4
;;;1446            int16 x6  = src5 - src6;
00004c  1b12              SUBS     r2,r2,r4
00004e  b212              SXTH     r2,r2
;;;1447   
;;;1448            int16 tmp1 = imul_b5(x4 - x6);
000050  1a9c              SUBS     r4,r3,r2
000052  b224              SXTH     r4,r4
000054  25c4              MOVS     r5,#0xc4
000056  436c              MULS     r4,r5,r4
000058  25ff              MOVS     r5,#0xff
00005a  3516              ADDS     r5,r5,#0x16
00005c  436a              MULS     r2,r5,r2
00005e  4d7e              LDR      r5,|L10.600|
000060  3480              ADDS     r4,r4,#0x80
000062  436b              MULS     r3,r5,r3
000064  1224              ASRS     r4,r4,#8
000066  3380              ADDS     r3,r3,#0x80
000068  121b              ASRS     r3,r3,#8
;;;1449            int16 stg26 = imul_b4(x6) - tmp1;
;;;1450   
;;;1451            int16 x24 = tmp1 - imul_b2(x4);
00006a  1ae5              SUBS     r5,r4,r3
00006c  3280              ADDS     r2,r2,#0x80
00006e  46ae              MOV      lr,r5
;;;1452   
;;;1453            int16 x15 = x5 - x7;
000070  1bf3              SUBS     r3,r6,r7
000072  1212              ASRS     r2,r2,#8
000074  b21d              SXTH     r5,r3
000076  1b12              SUBS     r2,r2,r4              ;1449
;;;1454            int16 x17 = x5 + x7;
000078  19f3              ADDS     r3,r6,r7
00007a  b21c              SXTH     r4,r3
;;;1455   
;;;1456            int16 tmp2 = stg26 - x17;
00007c  1b12              SUBS     r2,r2,r4
00007e  b213              SXTH     r3,r2
000080  22ff              MOVS     r2,#0xff
000082  326b              ADDS     r2,r2,#0x6b
000084  4355              MULS     r5,r2,r5
000086  3580              ADDS     r5,r5,#0x80
000088  122a              ASRS     r2,r5,#8
;;;1457            int16 tmp3 = imul_b1_b3(x15) - tmp2;
00008a  1ad2              SUBS     r2,r2,r3
00008c  b212              SXTH     r2,r2
;;;1458            int16 x44 = tmp3 + x24;
00008e  4675              MOV      r5,lr
000090  1955              ADDS     r5,r2,r5
000092  b22d              SXTH     r5,r5
;;;1459   
;;;1460            int16 src0 = *(pSrc+0*8);
000094  9502              STR      r5,[sp,#8]
000096  8805              LDRH     r5,[r0,#0]
;;;1461            int16 src1 = *(pSrc+4*8);
000098  880e              LDRH     r6,[r1,#0]
;;;1462            int16 x30 = src0 + src1;
00009a  19af              ADDS     r7,r5,r6
;;;1463            int16 x31 = src0 - src1;
00009c  1bad              SUBS     r5,r5,r6
;;;1464   
;;;1465            int16 src2 = *(pSrc+2*8);
00009e  9703              STR      r7,[sp,#0xc]
0000a0  9501              STR      r5,[sp,#4]
0000a2  8c07              LDRH     r7,[r0,#0x20]
;;;1466            int16 src3 = *(pSrc+6*8);
0000a4  8c0e              LDRH     r6,[r1,#0x20]
;;;1467            int16 x12 = src2 - src3;
0000a6  1bbd              SUBS     r5,r7,r6
;;;1468            int16 x13 = src2 + src3;
0000a8  19be              ADDS     r6,r7,r6
0000aa  27ff              MOVS     r7,#0xff
0000ac  b22d              SXTH     r5,r5                 ;1467
0000ae  376b              ADDS     r7,r7,#0x6b           ;1467
0000b0  437d              MULS     r5,r7,r5              ;1467
0000b2  3580              ADDS     r5,r5,#0x80           ;1467
0000b4  122d              ASRS     r5,r5,#8              ;1467
;;;1469   
;;;1470            int16 x32 = imul_b1_b3(x12) - x13;
0000b6  1baf              SUBS     r7,r5,r6
0000b8  46be              MOV      lr,r7
;;;1471   
;;;1472            int16 x40 = x30 + x13;
0000ba  9f03              LDR      r7,[sp,#0xc]
0000bc  19bd              ADDS     r5,r7,r6
0000be  b22d              SXTH     r5,r5
;;;1473            int16 x43 = x30 - x13;
0000c0  9500              STR      r5,[sp,#0]
0000c2  1bbd              SUBS     r5,r7,r6
0000c4  b22e              SXTH     r6,r5
;;;1474            int16 x41 = x31 + x32;
0000c6  9d01              LDR      r5,[sp,#4]
0000c8  4677              MOV      r7,lr
0000ca  4475              ADD      r5,r5,lr
0000cc  b22d              SXTH     r5,r5
;;;1475            int16 x42 = x31 - x32;
0000ce  9503              STR      r5,[sp,#0xc]
0000d0  9d01              LDR      r5,[sp,#4]
0000d2  1bed              SUBS     r5,r5,r7
0000d4  b22d              SXTH     r5,r5
0000d6  46ae              MOV      lr,r5
;;;1476   
;;;1477            // descale, convert to unsigned and clamp to 8-bit
;;;1478            *(pSrc+0*8) = clamp(PJPG_DESCALE(x40 + x17)  + 128);
0000d8  9d00              LDR      r5,[sp,#0]
0000da  192d              ADDS     r5,r5,r4
0000dc  3540              ADDS     r5,r5,#0x40
0000de  09ed              LSRS     r5,r5,#7
0000e0  3580              ADDS     r5,r5,#0x80
0000e2  b22d              SXTH     r5,r5
0000e4  b2af              UXTH     r7,r5
0000e6  2fff              CMP      r7,#0xff
0000e8  d922              BLS      |L10.304|
0000ea  2d00              CMP      r5,#0
0000ec  da1c              BGE      |L10.296|
0000ee  2500              MOVS     r5,#0
0000f0  e01f              B        |L10.306|
                  |L10.242|
0000f2  2200              MOVS     r2,#0                 ;1426
0000f4  5e82              LDRSH    r2,[r0,r2]            ;1426
0000f6  3240              ADDS     r2,r2,#0x40           ;1426
0000f8  09d2              LSRS     r2,r2,#7              ;1426
0000fa  3280              ADDS     r2,r2,#0x80           ;1426
0000fc  b212              SXTH     r2,r2                 ;1426
0000fe  b293              UXTH     r3,r2                 ;1426
000100  2bff              CMP      r3,#0xff              ;1426
000102  d907              BLS      |L10.276|
000104  2a00              CMP      r2,#0                 ;1426
000106  da01              BGE      |L10.268|
000108  2200              MOVS     r2,#0                 ;1426
00010a  e004              B        |L10.278|
                  |L10.268|
00010c  2aff              CMP      r2,#0xff              ;1426
00010e  dd01              BLE      |L10.276|
000110  22ff              MOVS     r2,#0xff              ;1426
000112  e000              B        |L10.278|
                  |L10.276|
000114  b2d2              UXTB     r2,r2                 ;1426
                  |L10.278|
000116  8002              STRH     r2,[r0,#0]            ;1427
000118  8202              STRH     r2,[r0,#0x10]         ;1428
00011a  8402              STRH     r2,[r0,#0x20]         ;1429
00011c  8602              STRH     r2,[r0,#0x30]         ;1430
00011e  800a              STRH     r2,[r1,#0]            ;1431
000120  820a              STRH     r2,[r1,#0x10]         ;1432
000122  840a              STRH     r2,[r1,#0x20]         ;1433
000124  860a              STRH     r2,[r1,#0x30]         ;1434
000126  e08a              B        |L10.574|
                  |L10.296|
000128  2dff              CMP      r5,#0xff              ;1435
00012a  dd01              BLE      |L10.304|
00012c  25ff              MOVS     r5,#0xff              ;1435
00012e  e000              B        |L10.306|
                  |L10.304|
000130  b2ed              UXTB     r5,r5                 ;1435
                  |L10.306|
000132  8005              STRH     r5,[r0,#0]
;;;1479            *(pSrc+1*8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
000134  9d03              LDR      r5,[sp,#0xc]
000136  18ed              ADDS     r5,r5,r3
000138  3540              ADDS     r5,r5,#0x40
00013a  09ed              LSRS     r5,r5,#7
00013c  3580              ADDS     r5,r5,#0x80
00013e  b22d              SXTH     r5,r5
000140  b2af              UXTH     r7,r5
000142  2fff              CMP      r7,#0xff
000144  d907              BLS      |L10.342|
000146  2d00              CMP      r5,#0
000148  da01              BGE      |L10.334|
00014a  2500              MOVS     r5,#0
00014c  e004              B        |L10.344|
                  |L10.334|
00014e  2dff              CMP      r5,#0xff
000150  dd01              BLE      |L10.342|
000152  25ff              MOVS     r5,#0xff
000154  e000              B        |L10.344|
                  |L10.342|
000156  b2ed              UXTB     r5,r5
                  |L10.344|
000158  8205              STRH     r5,[r0,#0x10]
;;;1480            *(pSrc+2*8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
00015a  4675              MOV      r5,lr
00015c  18ad              ADDS     r5,r5,r2
00015e  3540              ADDS     r5,r5,#0x40
000160  09ed              LSRS     r5,r5,#7
000162  3580              ADDS     r5,r5,#0x80
000164  b22d              SXTH     r5,r5
000166  b2af              UXTH     r7,r5
000168  2fff              CMP      r7,#0xff
00016a  d907              BLS      |L10.380|
00016c  2d00              CMP      r5,#0
00016e  da01              BGE      |L10.372|
000170  2500              MOVS     r5,#0
000172  e004              B        |L10.382|
                  |L10.372|
000174  2dff              CMP      r5,#0xff
000176  dd01              BLE      |L10.380|
000178  25ff              MOVS     r5,#0xff
00017a  e000              B        |L10.382|
                  |L10.380|
00017c  b2ed              UXTB     r5,r5
                  |L10.382|
00017e  8405              STRH     r5,[r0,#0x20]
;;;1481            *(pSrc+3*8) = clamp(PJPG_DESCALE(x43 - x44)  + 128);
000180  9d02              LDR      r5,[sp,#8]
000182  1b75              SUBS     r5,r6,r5
000184  3540              ADDS     r5,r5,#0x40
000186  09ed              LSRS     r5,r5,#7
000188  3580              ADDS     r5,r5,#0x80
00018a  b22d              SXTH     r5,r5
00018c  b2af              UXTH     r7,r5
00018e  2fff              CMP      r7,#0xff
000190  d907              BLS      |L10.418|
000192  2d00              CMP      r5,#0
000194  da01              BGE      |L10.410|
000196  2500              MOVS     r5,#0
000198  e004              B        |L10.420|
                  |L10.410|
00019a  2dff              CMP      r5,#0xff
00019c  dd01              BLE      |L10.418|
00019e  25ff              MOVS     r5,#0xff
0001a0  e000              B        |L10.420|
                  |L10.418|
0001a2  b2ed              UXTB     r5,r5
                  |L10.420|
0001a4  8605              STRH     r5,[r0,#0x30]
;;;1482            *(pSrc+4*8) = clamp(PJPG_DESCALE(x43 + x44)  + 128);
0001a6  9d02              LDR      r5,[sp,#8]
0001a8  1975              ADDS     r5,r6,r5
0001aa  3540              ADDS     r5,r5,#0x40
0001ac  09ed              LSRS     r5,r5,#7
0001ae  3580              ADDS     r5,r5,#0x80
0001b0  b22d              SXTH     r5,r5
0001b2  b2ae              UXTH     r6,r5
0001b4  2eff              CMP      r6,#0xff
0001b6  d907              BLS      |L10.456|
0001b8  2d00              CMP      r5,#0
0001ba  da01              BGE      |L10.448|
0001bc  2500              MOVS     r5,#0
0001be  e004              B        |L10.458|
                  |L10.448|
0001c0  2dff              CMP      r5,#0xff
0001c2  dd01              BLE      |L10.456|
0001c4  25ff              MOVS     r5,#0xff
0001c6  e000              B        |L10.458|
                  |L10.456|
0001c8  b2ed              UXTB     r5,r5
                  |L10.458|
0001ca  800d              STRH     r5,[r1,#0]
;;;1483            *(pSrc+5*8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
0001cc  4675              MOV      r5,lr
0001ce  1aaa              SUBS     r2,r5,r2
0001d0  3240              ADDS     r2,r2,#0x40
0001d2  09d2              LSRS     r2,r2,#7
0001d4  3280              ADDS     r2,r2,#0x80
0001d6  b212              SXTH     r2,r2
0001d8  b295              UXTH     r5,r2
0001da  2dff              CMP      r5,#0xff
0001dc  d907              BLS      |L10.494|
0001de  2a00              CMP      r2,#0
0001e0  da01              BGE      |L10.486|
0001e2  2200              MOVS     r2,#0
0001e4  e004              B        |L10.496|
                  |L10.486|
0001e6  2aff              CMP      r2,#0xff
0001e8  dd01              BLE      |L10.494|
0001ea  22ff              MOVS     r2,#0xff
0001ec  e000              B        |L10.496|
                  |L10.494|
0001ee  b2d2              UXTB     r2,r2
                  |L10.496|
0001f0  820a              STRH     r2,[r1,#0x10]
;;;1484            *(pSrc+6*8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
0001f2  9a03              LDR      r2,[sp,#0xc]
0001f4  1ad2              SUBS     r2,r2,r3
0001f6  3240              ADDS     r2,r2,#0x40
0001f8  09d2              LSRS     r2,r2,#7
0001fa  3280              ADDS     r2,r2,#0x80
0001fc  b212              SXTH     r2,r2
0001fe  b293              UXTH     r3,r2
000200  2bff              CMP      r3,#0xff
000202  d907              BLS      |L10.532|
000204  2a00              CMP      r2,#0
000206  da01              BGE      |L10.524|
000208  2200              MOVS     r2,#0
00020a  e004              B        |L10.534|
                  |L10.524|
00020c  2aff              CMP      r2,#0xff
00020e  dd01              BLE      |L10.532|
000210  22ff              MOVS     r2,#0xff
000212  e000              B        |L10.534|
                  |L10.532|
000214  b2d2              UXTB     r2,r2
                  |L10.534|
000216  840a              STRH     r2,[r1,#0x20]
;;;1485            *(pSrc+7*8) = clamp(PJPG_DESCALE(x40 - x17)  + 128);
000218  9a00              LDR      r2,[sp,#0]
00021a  1b12              SUBS     r2,r2,r4
00021c  3240              ADDS     r2,r2,#0x40
00021e  09d2              LSRS     r2,r2,#7
000220  3280              ADDS     r2,r2,#0x80
000222  b212              SXTH     r2,r2
000224  b293              UXTH     r3,r2
000226  2bff              CMP      r3,#0xff
000228  d907              BLS      |L10.570|
00022a  2a00              CMP      r2,#0
00022c  da01              BGE      |L10.562|
00022e  2200              MOVS     r2,#0
000230  e004              B        |L10.572|
                  |L10.562|
000232  2aff              CMP      r2,#0xff
000234  dd01              BLE      |L10.570|
000236  22ff              MOVS     r2,#0xff
000238  e000              B        |L10.572|
                  |L10.570|
00023a  b2d2              UXTB     r2,r2
                  |L10.572|
00023c  860a              STRH     r2,[r1,#0x30]
                  |L10.574|
00023e  4661              MOV      r1,r12                ;1417
000240  1c49              ADDS     r1,r1,#1              ;1417
000242  b2c9              UXTB     r1,r1                 ;1417
000244  1c80              ADDS     r0,r0,#2              ;1417
000246  468c              MOV      r12,r1                ;1417
000248  2908              CMP      r1,#8                 ;1417
00024a  d200              BCS      |L10.590|
00024c  e6dd              B        |L10.10|
                  |L10.590|
;;;1486         }
;;;1487   
;;;1488         pSrc++;      
;;;1489      }      
;;;1490   }
00024e  b004              ADD      sp,sp,#0x10
000250  bdf0              POP      {r4-r7,pc}
;;;1491   
                          ENDP

000252  0000              DCW      0x0000
                  |L10.596|
                          DCD      ||.bss||
                  |L10.600|
                          DCD      0x0000029d

                          AREA ||i.idctRows||, CODE, READONLY, ALIGN=2

                  idctRows PROC
                  |symbol_number.252|
;;;1333   #endif
;;;1334   static void idctRows(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1335   {
;;;1336      uint8 i;
;;;1337      int16* pSrc = gCoeffBuf;
000002  4841              LDR      r0,|L11.264|
000004  b083              SUB      sp,sp,#0xc            ;1335
;;;1338               
;;;1339      for (i = 0; i < 8; i++)
000006  2400              MOVS     r4,#0
                  |L11.8|
;;;1340      {
;;;1341   		 if ((pSrc[1] | pSrc[2] | pSrc[3] | pSrc[4] | pSrc[5] | pSrc[6] | pSrc[7]) == 0) // AD: suspicious
000008  2102              MOVS     r1,#2
00000a  2304              MOVS     r3,#4
00000c  5e41              LDRSH    r1,[r0,r1]
00000e  5ec3              LDRSH    r3,[r0,r3]
000010  460a              MOV      r2,r1
000012  469e              MOV      lr,r3
000014  4319              ORRS     r1,r1,r3
000016  2306              MOVS     r3,#6
000018  5ec3              LDRSH    r3,[r0,r3]
00001a  2608              MOVS     r6,#8
00001c  5f86              LDRSH    r6,[r0,r6]
00001e  461d              MOV      r5,r3
000020  4335              ORRS     r5,r5,r6
000022  4329              ORRS     r1,r1,r5
000024  270a              MOVS     r7,#0xa
000026  250c              MOVS     r5,#0xc
000028  5fc7              LDRSH    r7,[r0,r7]
00002a  5f45              LDRSH    r5,[r0,r5]
00002c  4339              ORRS     r1,r1,r7
00002e  46ac              MOV      r12,r5
000030  4329              ORRS     r1,r1,r5
000032  250e              MOVS     r5,#0xe
000034  5f45              LDRSH    r5,[r0,r5]
000036  4329              ORRS     r1,r1,r5
000038  d05d              BEQ      |L11.246|
;;;1342         {
;;;1343            // Short circuit the 1D IDCT if only the DC component is non-zero
;;;1344            int16 src0 = *pSrc;
;;;1345   
;;;1346            *(pSrc+1) = src0;
;;;1347            *(pSrc+2) = src0;
;;;1348            *(pSrc+3) = src0;
;;;1349            *(pSrc+4) = src0;
;;;1350            *(pSrc+5) = src0;
;;;1351            *(pSrc+6) = src0;
;;;1352            *(pSrc+7) = src0;
;;;1353         }
;;;1354         else
;;;1355         {
;;;1356            int16 src4 = *(pSrc+5);
;;;1357            int16 src7 = *(pSrc+3);
;;;1358            int16 x4  = src4 - src7;
00003a  1af9              SUBS     r1,r7,r3
;;;1359            int16 x7  = src4 + src7;
00003c  18fb              ADDS     r3,r7,r3
;;;1360   
;;;1361            int16 src5 = *(pSrc+1);
;;;1362            int16 src6 = *(pSrc+7);
;;;1363            int16 x5  = src5 + src6;
00003e  1957              ADDS     r7,r2,r5
;;;1364            int16 x6  = src5 - src6;
000040  1b52              SUBS     r2,r2,r5
000042  b209              SXTH     r1,r1                 ;1358
000044  b212              SXTH     r2,r2
;;;1365   
;;;1366            int16 tmp1 = imul_b5(x4 - x6);
000046  9300              STR      r3,[sp,#0]
000048  1a8b              SUBS     r3,r1,r2
00004a  b21b              SXTH     r3,r3
00004c  25c4              MOVS     r5,#0xc4
00004e  436b              MULS     r3,r5,r3
000050  25ff              MOVS     r5,#0xff
000052  3516              ADDS     r5,r5,#0x16
000054  436a              MULS     r2,r5,r2
000056  4d2d              LDR      r5,|L11.268|
000058  3380              ADDS     r3,r3,#0x80
00005a  4369              MULS     r1,r5,r1
00005c  121b              ASRS     r3,r3,#8
00005e  3280              ADDS     r2,r2,#0x80
000060  3180              ADDS     r1,r1,#0x80
000062  1212              ASRS     r2,r2,#8
000064  1209              ASRS     r1,r1,#8
;;;1367            int16 stg26 = imul_b4(x6) - tmp1;
000066  1ad2              SUBS     r2,r2,r3
;;;1368   
;;;1369            int16 x24 = tmp1 - imul_b2(x4);
000068  1a59              SUBS     r1,r3,r1
;;;1370   
;;;1371            int16 x15 = x5 - x7;
00006a  9b00              LDR      r3,[sp,#0]
00006c  9101              STR      r1,[sp,#4]
00006e  1af9              SUBS     r1,r7,r3
;;;1372            int16 x17 = x5 + x7;
000070  18fd              ADDS     r5,r7,r3
000072  27ff              MOVS     r7,#0xff
000074  b209              SXTH     r1,r1                 ;1371
000076  376b              ADDS     r7,r7,#0x6b           ;1371
000078  4379              MULS     r1,r7,r1              ;1371
;;;1373   
;;;1374            int16 tmp2 = stg26 - x17;
00007a  1b53              SUBS     r3,r2,r5
00007c  3180              ADDS     r1,r1,#0x80
00007e  1209              ASRS     r1,r1,#8
;;;1375            int16 tmp3 = imul_b1_b3(x15) - tmp2;
;;;1376            int16 x44 = tmp3 + x24;
000080  9a01              LDR      r2,[sp,#4]
000082  1ac9              SUBS     r1,r1,r3              ;1375
000084  188a              ADDS     r2,r1,r2
;;;1377   
;;;1378            int16 src0 = *(pSrc+0);
000086  9202              STR      r2,[sp,#8]
000088  8802              LDRH     r2,[r0,#0]
;;;1379            int16 src1 = *(pSrc+4);
;;;1380            int16 x30 = src0 + src1;
00008a  1997              ADDS     r7,r2,r6
;;;1381            int16 x31 = src0 - src1;
00008c  9701              STR      r7,[sp,#4]
00008e  1b97              SUBS     r7,r2,r6
000090  9700              STR      r7,[sp,#0]
000092  4672              MOV      r2,lr
000094  4667              MOV      r7,r12
;;;1382   
;;;1383            int16 src2 = *(pSrc+2);
;;;1384            int16 src3 = *(pSrc+6);
;;;1385            int16 x12 = src2 - src3;
000096  1bd6              SUBS     r6,r2,r7
000098  27ff              MOVS     r7,#0xff
00009a  b236              SXTH     r6,r6
00009c  376b              ADDS     r7,r7,#0x6b
00009e  437e              MULS     r6,r7,r6
;;;1386            int16 x13 = src2 + src3;
;;;1387   
;;;1388            int16 x32 = imul_b1_b3(x12) - x13;
;;;1389   
;;;1390            int16 x40 = x30 + x13;
0000a0  9f01              LDR      r7,[sp,#4]
0000a2  4462              ADD      r2,r2,r12             ;1386
0000a4  18bf              ADDS     r7,r7,r2
0000a6  3680              ADDS     r6,r6,#0x80
0000a8  46be              MOV      lr,r7
0000aa  1236              ASRS     r6,r6,#8
;;;1391            int16 x43 = x30 - x13;
0000ac  9f01              LDR      r7,[sp,#4]
0000ae  1ab6              SUBS     r6,r6,r2              ;1388
0000b0  1aba              SUBS     r2,r7,r2
;;;1392            int16 x41 = x31 + x32;
0000b2  9f00              LDR      r7,[sp,#0]
0000b4  19bf              ADDS     r7,r7,r6
0000b6  46bc              MOV      r12,r7
;;;1393            int16 x42 = x31 - x32;
0000b8  9f00              LDR      r7,[sp,#0]
0000ba  1bbf              SUBS     r7,r7,r6
;;;1394   
;;;1395            *(pSrc+0) = x40 + x17;
0000bc  4676              MOV      r6,lr
0000be  1976              ADDS     r6,r6,r5
0000c0  8006              STRH     r6,[r0,#0]
;;;1396            *(pSrc+1) = x41 + tmp2;
0000c2  4666              MOV      r6,r12
0000c4  18f6              ADDS     r6,r6,r3
0000c6  8046              STRH     r6,[r0,#2]
;;;1397            *(pSrc+2) = x42 + tmp3;
0000c8  187e              ADDS     r6,r7,r1
0000ca  8086              STRH     r6,[r0,#4]
;;;1398            *(pSrc+3) = x43 - x44;
0000cc  9e02              LDR      r6,[sp,#8]
0000ce  1b96              SUBS     r6,r2,r6
0000d0  80c6              STRH     r6,[r0,#6]
;;;1399            *(pSrc+4) = x43 + x44;
0000d2  9e02              LDR      r6,[sp,#8]
;;;1400            *(pSrc+5) = x42 - tmp3;
0000d4  1a79              SUBS     r1,r7,r1
0000d6  1992              ADDS     r2,r2,r6              ;1399
0000d8  8102              STRH     r2,[r0,#8]            ;1399
0000da  8141              STRH     r1,[r0,#0xa]
;;;1401            *(pSrc+6) = x41 - tmp2;
0000dc  4667              MOV      r7,r12
0000de  1af9              SUBS     r1,r7,r3
0000e0  8181              STRH     r1,[r0,#0xc]
;;;1402            *(pSrc+7) = x40 - x17;
0000e2  4677              MOV      r7,lr
0000e4  1b79              SUBS     r1,r7,r5
                  |L11.230|
0000e6  81c1              STRH     r1,[r0,#0xe]
0000e8  1c64              ADDS     r4,r4,#1
0000ea  b2e4              UXTB     r4,r4                 ;1339
0000ec  3010              ADDS     r0,r0,#0x10           ;1339
0000ee  2c08              CMP      r4,#8                 ;1339
0000f0  d38a              BCC      |L11.8|
;;;1403         }
;;;1404                     
;;;1405         pSrc += 8;
;;;1406      }      
;;;1407   }
0000f2  b003              ADD      sp,sp,#0xc
0000f4  bdf0              POP      {r4-r7,pc}
                  |L11.246|
0000f6  8801              LDRH     r1,[r0,#0]            ;1344
0000f8  8041              STRH     r1,[r0,#2]            ;1346
0000fa  8081              STRH     r1,[r0,#4]            ;1347
0000fc  80c1              STRH     r1,[r0,#6]            ;1348
0000fe  8101              STRH     r1,[r0,#8]            ;1349
000100  8141              STRH     r1,[r0,#0xa]          ;1350
000102  8181              STRH     r1,[r0,#0xc]          ;1351
000104  e7ef              B        |L11.230|
;;;1408   #if LESS_INLINING
                          ENDP

000106  0000              DCW      0x0000
                  |L11.264|
                          DCD      ||.bss||
                  |L11.268|
                          DCD      0x0000029d

                          AREA ||i.pjpeg_decode_init||, CODE, READONLY, ALIGN=2

                  pjpeg_decode_init PROC
;;;2301   //------------------------------------------------------------------------------
;;;2302   unsigned char pjpeg_decode_init(pjpeg_image_info_t *pInfo, pjpeg_need_bytes_callback_t pNeed_bytes_callback, void *pCallback_data, unsigned char reduce)
000000  b5f0              PUSH     {r4-r7,lr}
;;;2303   {
000002  b083              SUB      sp,sp,#0xc
;;;2304      uint8 status;
;;;2305      
;;;2306      pInfo->m_width = 0; pInfo->m_height = 0; pInfo->m_comps = 0;
000004  2500              MOVS     r5,#0
000006  6005              STR      r5,[r0,#0]
000008  6045              STR      r5,[r0,#4]
;;;2307      pInfo->m_MCUSPerRow = 0; pInfo->m_MCUSPerCol = 0;
00000a  6085              STR      r5,[r0,#8]
00000c  60c5              STR      r5,[r0,#0xc]
;;;2308      pInfo->m_scanType = PJPG_GRAYSCALE;
00000e  6105              STR      r5,[r0,#0x10]
000010  7505              STRB     r5,[r0,#0x14]
;;;2309      pInfo->m_MCUWidth = 0; pInfo->m_MCUHeight = 0;
000012  6185              STR      r5,[r0,#0x18]
;;;2310      pInfo->m_pMCUBufR = (unsigned char*)0; pInfo->m_pMCUBufG = (unsigned char*)0; pInfo->m_pMCUBufB = (unsigned char*)0;
000014  61c5              STR      r5,[r0,#0x1c]
000016  6205              STR      r5,[r0,#0x20]
000018  6245              STR      r5,[r0,#0x24]
;;;2311   
;;;2312      g_pNeedBytesCallback = pNeed_bytes_callback;
00001a  4ef9              LDR      r6,|L12.1024|
00001c  6285              STR      r5,[r0,#0x28]
;;;2313      g_pCallback_data = pCallback_data;
;;;2314      gCallbackStatus = 0;
00001e  6432              STR      r2,[r6,#0x40]  ; g_pCallback_data
000020  63f1              STR      r1,[r6,#0x3c]  ; g_pNeedBytesCallback
000022  7335              STRB     r5,[r6,#0xc]
;;;2315      gReduce = reduce;
000024  7373              STRB     r3,[r6,#0xd]
000026  8235              STRH     r5,[r6,#0x10]
000028  8275              STRH     r5,[r6,#0x12]
00002a  71b5              STRB     r5,[r6,#6]
00002c  82b5              STRH     r5,[r6,#0x14]
00002e  71f5              STRB     r5,[r6,#7]
000030  7035              STRB     r5,[r6,#0]
000032  7075              STRB     r5,[r6,#1]
000034  70b5              STRB     r5,[r6,#2]
000036  70f5              STRB     r5,[r6,#3]
000038  4604              MOV      r4,r0                 ;2303
00003a  7135              STRB     r5,[r6,#4]            ;2303
00003c  81f5              STRH     r5,[r6,#0xe]          ;2303
00003e  2008              MOVS     r0,#8                 ;2303
000040  7170              STRB     r0,[r6,#5]            ;2303
000042  2100              MOVS     r1,#0                 ;2303
000044  f7fffffe          BL       getBits
000048  2100              MOVS     r1,#0                 ;2303
00004a  2008              MOVS     r0,#8                 ;2303
00004c  f7fffffe          BL       getBits
;;;2316       
;;;2317      status = init();
;;;2318      if ((status) || (gCallbackStatus))
000050  7b30              LDRB     r0,[r6,#0xc]  ; gCallbackStatus
000052  2800              CMP      r0,#0
000054  d16f              BNE      |L12.310|
000056  2100              MOVS     r1,#0
000058  2008              MOVS     r0,#8
00005a  f7fffffe          BL       getBits
00005e  b2c6              UXTB     r6,r0
000060  2100              MOVS     r1,#0
000062  2008              MOVS     r0,#8
000064  f7fffffe          BL       getBits
000068  b2c0              UXTB     r0,r0
00006a  2eff              CMP      r6,#0xff
00006c  d101              BNE      |L12.114|
00006e  28d8              CMP      r0,#0xd8
000070  d018              BEQ      |L12.164|
                  |L12.114|
000072  2601              MOVS     r6,#1
000074  0336              LSLS     r6,r6,#12
                  |L12.118|
000076  1e76              SUBS     r6,r6,#1
000078  0436              LSLS     r6,r6,#16
00007a  0c36              LSRS     r6,r6,#16
00007c  d00b              BEQ      |L12.150|
00007e  4607              MOV      r7,r0
000080  2100              MOVS     r1,#0
000082  2008              MOVS     r0,#8
000084  f7fffffe          BL       getBits
000088  b2c0              UXTB     r0,r0
00008a  2fff              CMP      r7,#0xff
00008c  d1f3              BNE      |L12.118|
00008e  28d8              CMP      r0,#0xd8
000090  d003              BEQ      |L12.154|
000092  28d9              CMP      r0,#0xd9
000094  d1ef              BNE      |L12.118|
                  |L12.150|
000096  2013              MOVS     r0,#0x13
000098  e012              B        |L12.192|
                  |L12.154|
00009a  48d9              LDR      r0,|L12.1024|
00009c  89c0              LDRH     r0,[r0,#0xe]  ; gBitBuf
00009e  0a00              LSRS     r0,r0,#8
0000a0  28ff              CMP      r0,#0xff
0000a2  d1f8              BNE      |L12.150|
                  |L12.164|
0000a4  4668              MOV      r0,sp
0000a6  f7fffffe          BL       processMarkers
0000aa  2800              CMP      r0,#0
0000ac  d108              BNE      |L12.192|
0000ae  4668              MOV      r0,sp
0000b0  7800              LDRB     r0,[r0,#0]
0000b2  28c0              CMP      r0,#0xc0
0000b4  d00f              BEQ      |L12.214|
0000b6  28c2              CMP      r0,#0xc2
0000b8  d00b              BEQ      |L12.210|
0000ba  28c9              CMP      r0,#0xc9
0000bc  d06c              BEQ      |L12.408|
0000be  2014              MOVS     r0,#0x14
                  |L12.192|
;;;2319         return gCallbackStatus ? gCallbackStatus : status;
;;;2320      
;;;2321      status = locateSOFMarker();
0000c0  4602              MOV      r2,r0
;;;2322      if ((status) || (gCallbackStatus))
0000c2  48cf              LDR      r0,|L12.1024|
0000c4  4613              MOV      r3,r2
0000c6  7b01              LDRB     r1,[r0,#0xc]  ; gCallbackStatus
0000c8  430b              ORRS     r3,r3,r1
0000ca  d067              BEQ      |L12.412|
;;;2323         return gCallbackStatus ? gCallbackStatus : status;
0000cc  2900              CMP      r1,#0
0000ce  d17c              BNE      |L12.458|
0000d0  e1df              B        |L12.1170|
                  |L12.210|
0000d2  2025              MOVS     r0,#0x25
0000d4  e7f4              B        |L12.192|
                  |L12.214|
0000d6  2100              MOVS     r1,#0
0000d8  2010              MOVS     r0,#0x10
0000da  f7fffffe          BL       getBits
0000de  9001              STR      r0,[sp,#4]
0000e0  2100              MOVS     r1,#0
0000e2  2008              MOVS     r0,#8
0000e4  f7fffffe          BL       getBits
0000e8  2808              CMP      r0,#8
0000ea  d001              BEQ      |L12.240|
0000ec  2007              MOVS     r0,#7
0000ee  e7e7              B        |L12.192|
                  |L12.240|
0000f0  2100              MOVS     r1,#0
0000f2  2010              MOVS     r0,#0x10
0000f4  f7fffffe          BL       getBits
0000f8  4fc1              LDR      r7,|L12.1024|
0000fa  2800              CMP      r0,#0
0000fc  8278              STRH     r0,[r7,#0x12]
0000fe  d003              BEQ      |L12.264|
000100  2601              MOVS     r6,#1
000102  03b6              LSLS     r6,r6,#14
000104  42b0              CMP      r0,r6
000106  d901              BLS      |L12.268|
                  |L12.264|
000108  2008              MOVS     r0,#8
00010a  e7d9              B        |L12.192|
                  |L12.268|
00010c  2100              MOVS     r1,#0
00010e  2010              MOVS     r0,#0x10
000110  f7fffffe          BL       getBits
000114  8238              STRH     r0,[r7,#0x10]
000116  2800              CMP      r0,#0
000118  d001              BEQ      |L12.286|
00011a  42b0              CMP      r0,r6
00011c  d901              BLS      |L12.290|
                  |L12.286|
00011e  2009              MOVS     r0,#9
000120  e7ce              B        |L12.192|
                  |L12.290|
000122  2100              MOVS     r1,#0
000124  2008              MOVS     r0,#8
000126  f7fffffe          BL       getBits
00012a  b2c0              UXTB     r0,r0
00012c  71b8              STRB     r0,[r7,#6]
00012e  2803              CMP      r0,#3
000130  d902              BLS      |L12.312|
000132  200a              MOVS     r0,#0xa
000134  e7c4              B        |L12.192|
                  |L12.310|
000136  e095              B        |L12.612|
                  |L12.312|
000138  0042              LSLS     r2,r0,#1
00013a  1812              ADDS     r2,r2,r0
00013c  9b01              LDR      r3,[sp,#4]
00013e  3208              ADDS     r2,r2,#8
000140  429a              CMP      r2,r3
000142  d001              BEQ      |L12.328|
000144  200b              MOVS     r0,#0xb
000146  e7bb              B        |L12.192|
                  |L12.328|
000148  2600              MOVS     r6,#0
00014a  2800              CMP      r0,#0
00014c  d922              BLS      |L12.404|
00014e  4fad              LDR      r7,|L12.1028|
                  |L12.336|
000150  2100              MOVS     r1,#0
000152  2008              MOVS     r0,#8
000154  f7fffffe          BL       getBits
000158  49ab              LDR      r1,|L12.1032|
00015a  5588              STRB     r0,[r1,r6]
00015c  2100              MOVS     r1,#0
00015e  2004              MOVS     r0,#4
000160  f7fffffe          BL       getBits
000164  49a9              LDR      r1,|L12.1036|
000166  5588              STRB     r0,[r1,r6]
000168  2100              MOVS     r1,#0
00016a  2004              MOVS     r0,#4
00016c  f7fffffe          BL       getBits
000170  55b8              STRB     r0,[r7,r6]
000172  2100              MOVS     r1,#0
000174  2008              MOVS     r0,#8
000176  f7fffffe          BL       getBits
00017a  b2c0              UXTB     r0,r0
00017c  49a4              LDR      r1,|L12.1040|
00017e  2801              CMP      r0,#1
000180  5588              STRB     r0,[r1,r6]
000182  d901              BLS      |L12.392|
000184  2024              MOVS     r0,#0x24
000186  e79b              B        |L12.192|
                  |L12.392|
000188  489d              LDR      r0,|L12.1024|
00018a  1c76              ADDS     r6,r6,#1
00018c  7980              LDRB     r0,[r0,#6]  ; gCompsInFrame
00018e  b2f6              UXTB     r6,r6
000190  4286              CMP      r6,r0
000192  d3dd              BCC      |L12.336|
                  |L12.404|
000194  4628              MOV      r0,r5
000196  e793              B        |L12.192|
                  |L12.408|
000198  2011              MOVS     r0,#0x11
00019a  e791              B        |L12.192|
                  |L12.412|
00019c  7983              LDRB     r3,[r0,#6]  ; gCompsInFrame
00019e  4a9d              LDR      r2,|L12.1044|
0001a0  2b01              CMP      r3,#1
0001a2  d003              BEQ      |L12.428|
0001a4  2b03              CMP      r3,#3
0001a6  d011              BEQ      |L12.460|
0001a8  221a              MOVS     r2,#0x1a
0001aa  e055              B        |L12.600|
                  |L12.428|
0001ac  4b97              LDR      r3,|L12.1036|
0001ae  781b              LDRB     r3,[r3,#0]  ; gCompHSamp
0001b0  2b01              CMP      r3,#1
0001b2  d15e              BNE      |L12.626|
0001b4  4b93              LDR      r3,|L12.1028|
0001b6  781b              LDRB     r3,[r3,#0]  ; gCompVSamp
0001b8  2b01              CMP      r3,#1
0001ba  d15a              BNE      |L12.626|
0001bc  7205              STRB     r5,[r0,#8]
0001be  7243              STRB     r3,[r0,#9]
0001c0  7015              STRB     r5,[r2,#0]
0001c2  2208              MOVS     r2,#8
0001c4  7282              STRB     r2,[r0,#0xa]
0001c6  72c2              STRB     r2,[r0,#0xb]
0001c8  e030              B        |L12.556|
                  |L12.458|
0001ca  e04a              B        |L12.610|
                  |L12.460|
0001cc  4e8f              LDR      r6,|L12.1036|
0001ce  7873              LDRB     r3,[r6,#1]  ; gCompHSamp
0001d0  2b01              CMP      r3,#1
0001d2  d14e              BNE      |L12.626|
0001d4  1cf7              ADDS     r7,r6,#3
0001d6  787b              LDRB     r3,[r7,#1]  ; gCompVSamp
0001d8  2b01              CMP      r3,#1
0001da  d14a              BNE      |L12.626|
0001dc  78b3              LDRB     r3,[r6,#2]  ; gCompHSamp
0001de  2b01              CMP      r3,#1
0001e0  d147              BNE      |L12.626|
0001e2  78bb              LDRB     r3,[r7,#2]  ; gCompVSamp
0001e4  2b01              CMP      r3,#1
0001e6  d144              BNE      |L12.626|
0001e8  7836              LDRB     r6,[r6,#0]  ; gCompHSamp
0001ea  2302              MOVS     r3,#2
0001ec  2e01              CMP      r6,#1
0001ee  d002              BEQ      |L12.502|
0001f0  2e02              CMP      r6,#2
0001f2  d039              BEQ      |L12.616|
0001f4  e03d              B        |L12.626|
                  |L12.502|
0001f6  783e              LDRB     r6,[r7,#0]  ; gCompVSamp
0001f8  2703              MOVS     r7,#3                 ;2312
0001fa  2e01              CMP      r6,#1                 ;2312
0001fc  d002              BEQ      |L12.516|
0001fe  2e02              CMP      r6,#2                 ;2312
000200  d008              BEQ      |L12.532|
000202  e036              B        |L12.626|
                  |L12.516|
000204  2601              MOVS     r6,#1                 ;2312
000206  7206              STRB     r6,[r0,#8]            ;2312
000208  7247              STRB     r7,[r0,#9]            ;2312
00020a  7015              STRB     r5,[r2,#0]            ;2312
00020c  7056              STRB     r6,[r2,#1]            ;2312
00020e  7093              STRB     r3,[r2,#2]            ;2312
000210  2208              MOVS     r2,#8                 ;2312
000212  e048              B        |L12.678|
                  |L12.532|
000214  7207              STRB     r7,[r0,#8]            ;2312
000216  2604              MOVS     r6,#4                 ;2312
000218  7246              STRB     r6,[r0,#9]            ;2312
00021a  7015              STRB     r5,[r2,#0]            ;2312
00021c  7055              STRB     r5,[r2,#1]            ;2312
00021e  2601              MOVS     r6,#1                 ;2312
000220  7096              STRB     r6,[r2,#2]            ;2312
000222  70d3              STRB     r3,[r2,#3]            ;2312
000224  2208              MOVS     r2,#8                 ;2312
000226  7282              STRB     r2,[r0,#0xa]          ;2312
000228  2210              MOVS     r2,#0x10              ;2312
                  |L12.554|
00022a  72c2              STRB     r2,[r0,#0xb]          ;2312
                  |L12.556|
00022c  8a02              LDRH     r2,[r0,#0x10]         ;2312  ; gImageXSize
00022e  7a83              LDRB     r3,[r0,#0xa]          ;2312  ; gMaxMCUXSize
000230  18d2              ADDS     r2,r2,r3              ;2312
000232  1e52              SUBS     r2,r2,#1              ;2312
000234  2b08              CMP      r3,#8                 ;2312
000236  d038              BEQ      |L12.682|
000238  2304              MOVS     r3,#4                 ;2312
                  |L12.570|
00023a  411a              ASRS     r2,r2,r3              ;2312
00023c  b293              UXTH     r3,r2                 ;2312
00023e  8343              STRH     r3,[r0,#0x1a]         ;2312
000240  8a42              LDRH     r2,[r0,#0x12]         ;2312  ; gImageYSize
000242  7ac6              LDRB     r6,[r0,#0xb]          ;2312  ; gMaxMCUYSize
000244  1992              ADDS     r2,r2,r6              ;2312
000246  1e52              SUBS     r2,r2,#1              ;2312
000248  2e08              CMP      r6,#8                 ;2312
00024a  d030              BEQ      |L12.686|
00024c  2604              MOVS     r6,#4                 ;2312
                  |L12.590|
00024e  4132              ASRS     r2,r2,r6              ;2312
000250  8382              STRH     r2,[r0,#0x1c]         ;2312
000252  4353              MULS     r3,r2,r3              ;2312
000254  83c3              STRH     r3,[r0,#0x1e]         ;2312
000256  2200              MOVS     r2,#0                 ;2312
                  |L12.600|
000258  4610              MOV      r0,r2                 ;2312
;;;2324   
;;;2325      status = initFrame();
;;;2326      if ((status) || (gCallbackStatus))
00025a  4308              ORRS     r0,r0,r1
00025c  d029              BEQ      |L12.690|
;;;2327         return gCallbackStatus ? gCallbackStatus : status;
00025e  2900              CMP      r1,#0
000260  d070              BEQ      |L12.836|
                  |L12.610|
000262  4608              MOV      r0,r1
                  |L12.612|
;;;2328   
;;;2329      status = initScan();
;;;2330      if ((status) || (gCallbackStatus))
;;;2331         return gCallbackStatus ? gCallbackStatus : status;
;;;2332   
;;;2333      pInfo->m_width = gImageXSize; pInfo->m_height = gImageYSize; pInfo->m_comps = gCompsInFrame;
;;;2334      pInfo->m_scanType = gScanType;
;;;2335      pInfo->m_MCUSPerRow = gMaxMCUSPerRow; pInfo->m_MCUSPerCol = gMaxMCUSPerCol;
;;;2336      pInfo->m_MCUWidth = gMaxMCUXSize; pInfo->m_MCUHeight = gMaxMCUYSize;
;;;2337      pInfo->m_pMCUBufR = gMCUBufR; pInfo->m_pMCUBufG = gMCUBufG; pInfo->m_pMCUBufB = gMCUBufB;
;;;2338         
;;;2339      return 0;
;;;2340   }
000264  b003              ADD      sp,sp,#0xc
000266  bdf0              POP      {r4-r7,pc}
                  |L12.616|
000268  783e              LDRB     r6,[r7,#0]  ; gCompVSamp
00026a  2e01              CMP      r6,#1
00026c  d003              BEQ      |L12.630|
00026e  2e02              CMP      r6,#2
000270  d00d              BEQ      |L12.654|
                  |L12.626|
000272  221b              MOVS     r2,#0x1b
000274  e7f0              B        |L12.600|
                  |L12.630|
000276  7203              STRB     r3,[r0,#8]
000278  2604              MOVS     r6,#4
00027a  7246              STRB     r6,[r0,#9]
00027c  7015              STRB     r5,[r2,#0]
00027e  7055              STRB     r5,[r2,#1]
000280  2601              MOVS     r6,#1
000282  7096              STRB     r6,[r2,#2]
000284  70d3              STRB     r3,[r2,#3]
000286  2210              MOVS     r2,#0x10
000288  7282              STRB     r2,[r0,#0xa]
00028a  2208              MOVS     r2,#8
00028c  e7cd              B        |L12.554|
                  |L12.654|
00028e  2604              MOVS     r6,#4
000290  7206              STRB     r6,[r0,#8]
000292  2606              MOVS     r6,#6
000294  7246              STRB     r6,[r0,#9]
000296  7015              STRB     r5,[r2,#0]
000298  7055              STRB     r5,[r2,#1]
00029a  7095              STRB     r5,[r2,#2]
00029c  70d5              STRB     r5,[r2,#3]
00029e  2601              MOVS     r6,#1
0002a0  7116              STRB     r6,[r2,#4]
0002a2  7153              STRB     r3,[r2,#5]
0002a4  2210              MOVS     r2,#0x10
                  |L12.678|
0002a6  7282              STRB     r2,[r0,#0xa]
0002a8  e7bf              B        |L12.554|
                  |L12.682|
0002aa  2303              MOVS     r3,#3
0002ac  e7c5              B        |L12.570|
                  |L12.686|
0002ae  2603              MOVS     r6,#3
0002b0  e7cd              B        |L12.590|
                  |L12.690|
0002b2  2000              MOVS     r0,#0
0002b4  9001              STR      r0,[sp,#4]
0002b6  4668              MOV      r0,sp
0002b8  f7fffffe          BL       processMarkers
0002bc  2800              CMP      r0,#0
0002be  d140              BNE      |L12.834|
0002c0  4668              MOV      r0,sp
0002c2  7800              LDRB     r0,[r0,#0]
0002c4  28d9              CMP      r0,#0xd9
0002c6  d001              BEQ      |L12.716|
0002c8  28da              CMP      r0,#0xda
0002ca  d001              BEQ      |L12.720|
                  |L12.716|
0002cc  2012              MOVS     r0,#0x12
0002ce  e0d8              B        |L12.1154|
                  |L12.720|
0002d0  2100              MOVS     r1,#0
0002d2  2010              MOVS     r0,#0x10
0002d4  f7fffffe          BL       getBits
0002d8  4605              MOV      r5,r0
0002da  2100              MOVS     r1,#0
0002dc  2008              MOVS     r0,#8
0002de  f7fffffe          BL       getBits
0002e2  b2c0              UXTB     r0,r0
0002e4  4946              LDR      r1,|L12.1024|
0002e6  1eed              SUBS     r5,r5,#3
0002e8  0042              LSLS     r2,r0,#1
0002ea  b2ad              UXTH     r5,r5
0002ec  1cd2              ADDS     r2,r2,#3
0002ee  71c8              STRB     r0,[r1,#7]
0002f0  42aa              CMP      r2,r5
0002f2  d103              BNE      |L12.764|
0002f4  2800              CMP      r0,#0
0002f6  d001              BEQ      |L12.764|
0002f8  2803              CMP      r0,#3
0002fa  d901              BLS      |L12.768|
                  |L12.764|
0002fc  200e              MOVS     r0,#0xe
0002fe  e0c0              B        |L12.1154|
                  |L12.768|
000300  2700              MOVS     r7,#0
000302  2800              CMP      r0,#0
000304  d92f              BLS      |L12.870|
                  |L12.774|
000306  2100              MOVS     r1,#0
000308  2008              MOVS     r0,#8
00030a  f7fffffe          BL       getBits
00030e  b2c6              UXTB     r6,r0
000310  2100              MOVS     r1,#0
000312  2008              MOVS     r0,#8
000314  f7fffffe          BL       getBits
000318  4939              LDR      r1,|L12.1024|
00031a  b2c0              UXTB     r0,r0
00031c  4684              MOV      r12,r0
00031e  1ead              SUBS     r5,r5,#2
000320  7989              LDRB     r1,[r1,#6]  ; gCompsInFrame
000322  2000              MOVS     r0,#0
000324  b2ad              UXTH     r5,r5
000326  2900              CMP      r1,#0
000328  d907              BLS      |L12.826|
00032a  4a37              LDR      r2,|L12.1032|
                  |L12.812|
00032c  5c13              LDRB     r3,[r2,r0]
00032e  42b3              CMP      r3,r6
000330  d003              BEQ      |L12.826|
000332  1c40              ADDS     r0,r0,#1
000334  b2c0              UXTB     r0,r0
000336  4288              CMP      r0,r1
000338  d3f8              BCC      |L12.812|
                  |L12.826|
00033a  4a31              LDR      r2,|L12.1024|
00033c  4288              CMP      r0,r1
00033e  d302              BCC      |L12.838|
000340  200f              MOVS     r0,#0xf
                  |L12.834|
000342  e09e              B        |L12.1154|
                  |L12.836|
000344  e0a5              B        |L12.1170|
                  |L12.838|
000346  4934              LDR      r1,|L12.1048|
000348  55c8              STRB     r0,[r1,r7]
00034a  4661              MOV      r1,r12
00034c  090b              LSRS     r3,r1,#4
00034e  4933              LDR      r1,|L12.1052|
000350  1c7f              ADDS     r7,r7,#1
000352  540b              STRB     r3,[r1,r0]
000354  4661              MOV      r1,r12
000356  070b              LSLS     r3,r1,#28
000358  4931              LDR      r1,|L12.1056|
00035a  0f1b              LSRS     r3,r3,#28
00035c  540b              STRB     r3,[r1,r0]
00035e  79d0              LDRB     r0,[r2,#7]  ; gCompsInScan
000360  b2ff              UXTB     r7,r7
000362  4287              CMP      r7,r0
000364  d3cf              BCC      |L12.774|
                  |L12.870|
000366  2100              MOVS     r1,#0
000368  2008              MOVS     r0,#8
00036a  f7fffffe          BL       getBits
00036e  2100              MOVS     r1,#0
000370  2008              MOVS     r0,#8
000372  f7fffffe          BL       getBits
000376  2100              MOVS     r1,#0
000378  2004              MOVS     r0,#4
00037a  f7fffffe          BL       getBits
00037e  2100              MOVS     r1,#0
000380  2004              MOVS     r0,#4
000382  f7fffffe          BL       getBits
000386  1eed              SUBS     r5,r5,#3
000388  042d              LSLS     r5,r5,#16
00038a  0c2d              LSRS     r5,r5,#16
00038c  d007              BEQ      |L12.926|
                  |L12.910|
00038e  2100              MOVS     r1,#0
000390  2008              MOVS     r0,#8
000392  f7fffffe          BL       getBits
000396  1e6d              SUBS     r5,r5,#1
000398  042d              LSLS     r5,r5,#16
00039a  0c2d              LSRS     r5,r5,#16
00039c  d1f7              BNE      |L12.910|
                  |L12.926|
00039e  9801              LDR      r0,[sp,#4]
0003a0  2800              CMP      r0,#0
0003a2  d193              BNE      |L12.716|
0003a4  4816              LDR      r0,|L12.1024|
0003a6  2200              MOVS     r2,#0
0003a8  79c1              LDRB     r1,[r0,#7]  ; gCompsInScan
0003aa  2900              CMP      r1,#0
0003ac  d916              BLS      |L12.988|
0003ae  7803              LDRB     r3,[r0,#0]            ;2312
                  |L12.944|
0003b0  4819              LDR      r0,|L12.1048|
0003b2  4d1a              LDR      r5,|L12.1052|
0003b4  5c80              LDRB     r0,[r0,r2]            ;2312
0003b6  2701              MOVS     r7,#1                 ;2312
0003b8  5c2e              LDRB     r6,[r5,r0]            ;2312
0003ba  1ced              ADDS     r5,r5,#3              ;2312
0003bc  5c28              LDRB     r0,[r5,r0]            ;2312
0003be  1c80              ADDS     r0,r0,#2              ;2312
0003c0  b2c5              UXTB     r5,r0                 ;2312
0003c2  4638              MOV      r0,r7                 ;2312
0003c4  40b0              LSLS     r0,r0,r6              ;2312
0003c6  4218              TST      r0,r3                 ;2312
0003c8  d002              BEQ      |L12.976|
0003ca  40af              LSLS     r7,r7,r5              ;2312
0003cc  421f              TST      r7,r3                 ;2312
0003ce  d101              BNE      |L12.980|
                  |L12.976|
0003d0  2018              MOVS     r0,#0x18              ;2312
0003d2  e056              B        |L12.1154|
                  |L12.980|
0003d4  1c52              ADDS     r2,r2,#1              ;2312
0003d6  b2d2              UXTB     r2,r2                 ;2312
0003d8  428a              CMP      r2,r1                 ;2312
0003da  d3e9              BCC      |L12.944|
                  |L12.988|
0003dc  2000              MOVS     r0,#0                 ;2312
0003de  4f08              LDR      r7,|L12.1024|
0003e0  2900              CMP      r1,#0                 ;2312
0003e2  d923              BLS      |L12.1068|
0003e4  4d0a              LDR      r5,|L12.1040|
0003e6  787a              LDRB     r2,[r7,#1]            ;2312
0003e8  1cee              ADDS     r6,r5,#3              ;2312
                  |L12.1002|
0003ea  5c33              LDRB     r3,[r6,r0]            ;2312
0003ec  5ceb              LDRB     r3,[r5,r3]            ;2312
0003ee  2b00              CMP      r3,#0                 ;2312
0003f0  d001              BEQ      |L12.1014|
0003f2  2302              MOVS     r3,#2                 ;2312
0003f4  e000              B        |L12.1016|
                  |L12.1014|
0003f6  2301              MOVS     r3,#1                 ;2312
                  |L12.1016|
0003f8  421a              TST      r2,r3                 ;2312
0003fa  d113              BNE      |L12.1060|
0003fc  2017              MOVS     r0,#0x17              ;2312
0003fe  e040              B        |L12.1154|
                  |L12.1024|
                          DCD      ||.data||
                  |L12.1028|
                          DCD      ||.data||+0x26
                  |L12.1032|
                          DCD      ||.data||+0x20
                  |L12.1036|
                          DCD      ||.data||+0x23
                  |L12.1040|
                          DCD      ||.data||+0x29
                  |L12.1044|
                          DCD      ||.data||+0x4a
                  |L12.1048|
                          DCD      ||.data||+0x2c
                  |L12.1052|
                          DCD      ||.data||+0x2f
                  |L12.1056|
                          DCD      ||.data||+0x32
                  |L12.1060|
000424  1c40              ADDS     r0,r0,#1              ;2312
000426  b2c0              UXTB     r0,r0                 ;2312
000428  4288              CMP      r0,r1                 ;2312
00042a  d3de              BCC      |L12.1002|
                  |L12.1068|
00042c  4827              LDR      r0,|L12.1228|
00042e  2500              MOVS     r5,#0                 ;2312
000430  8005              STRH     r5,[r0,#0]            ;2312
000432  8045              STRH     r5,[r0,#2]            ;2312
000434  8085              STRH     r5,[r0,#4]            ;2312
000436  8ab8              LDRH     r0,[r7,#0x14]         ;2312  ; gRestartInterval
000438  2800              CMP      r0,#0                 ;2312
00043a  d001              BEQ      |L12.1088|
00043c  8338              STRH     r0,[r7,#0x18]         ;2312
00043e  82fd              STRH     r5,[r7,#0x16]         ;2312
                  |L12.1088|
000440  7978              LDRB     r0,[r7,#5]            ;2312  ; gBitsLeft
000442  4923              LDR      r1,|L12.1232|
000444  2800              CMP      r0,#0                 ;2312
000446  d008              BEQ      |L12.1114|
000448  78fa              LDRB     r2,[r7,#3]            ;2312  ; gInBufOfs
00044a  7bb8              LDRB     r0,[r7,#0xe]          ;2312  ; gBitBuf
00044c  1e52              SUBS     r2,r2,#1              ;2312
00044e  b2d2              UXTB     r2,r2                 ;2312
000450  70fa              STRB     r2,[r7,#3]            ;2312
000452  5488              STRB     r0,[r1,r2]            ;2312
000454  7938              LDRB     r0,[r7,#4]            ;2312  ; gInBufLeft
000456  1c40              ADDS     r0,r0,#1              ;2312
000458  7138              STRB     r0,[r7,#4]            ;2312
                  |L12.1114|
00045a  78fa              LDRB     r2,[r7,#3]            ;2312  ; gInBufOfs
00045c  89f8              LDRH     r0,[r7,#0xe]          ;2312  ; gBitBuf
00045e  1e52              SUBS     r2,r2,#1              ;2312
000460  b2d2              UXTB     r2,r2                 ;2312
000462  0a00              LSRS     r0,r0,#8              ;2312
000464  70fa              STRB     r2,[r7,#3]            ;2312
000466  5488              STRB     r0,[r1,r2]            ;2312
000468  7938              LDRB     r0,[r7,#4]            ;2312  ; gInBufLeft
00046a  2101              MOVS     r1,#1                 ;2312
00046c  1c40              ADDS     r0,r0,#1              ;2312
00046e  7138              STRB     r0,[r7,#4]            ;2312
000470  2008              MOVS     r0,#8                 ;2312
000472  7178              STRB     r0,[r7,#5]            ;2312
000474  f7fffffe          BL       getBits
000478  2101              MOVS     r1,#1                 ;2312
00047a  2008              MOVS     r0,#8                 ;2312
00047c  f7fffffe          BL       getBits
000480  4628              MOV      r0,r5                 ;2312
                  |L12.1154|
000482  4914              LDR      r1,|L12.1236|
000484  4603              MOV      r3,r0                 ;2330
000486  7b0a              LDRB     r2,[r1,#0xc]          ;2330  ; gCallbackStatus
000488  4313              ORRS     r3,r3,r2              ;2330
00048a  d005              BEQ      |L12.1176|
00048c  2a00              CMP      r2,#0                 ;2331
00048e  d100              BNE      |L12.1170|
000490  e6e8              B        |L12.612|
                  |L12.1170|
000492  4610              MOV      r0,r2                 ;2331
000494  b003              ADD      sp,sp,#0xc
000496  bdf0              POP      {r4-r7,pc}
                  |L12.1176|
000498  8a08              LDRH     r0,[r1,#0x10]         ;2333  ; gImageXSize
00049a  6020              STR      r0,[r4,#0]            ;2333
00049c  8a48              LDRH     r0,[r1,#0x12]         ;2333  ; gImageYSize
00049e  6060              STR      r0,[r4,#4]            ;2333
0004a0  7988              LDRB     r0,[r1,#6]            ;2333  ; gCompsInFrame
0004a2  60a0              STR      r0,[r4,#8]            ;2334
0004a4  7a08              LDRB     r0,[r1,#8]            ;2334  ; gScanType
0004a6  7520              STRB     r0,[r4,#0x14]         ;2334
0004a8  8b48              LDRH     r0,[r1,#0x1a]         ;2335  ; gMaxMCUSPerRow
0004aa  60e0              STR      r0,[r4,#0xc]          ;2335
0004ac  8b88              LDRH     r0,[r1,#0x1c]         ;2335  ; gMaxMCUSPerCol
0004ae  6120              STR      r0,[r4,#0x10]         ;2336
0004b0  7a88              LDRB     r0,[r1,#0xa]          ;2336  ; gMaxMCUXSize
0004b2  61a0              STR      r0,[r4,#0x18]         ;2336
0004b4  7ac8              LDRB     r0,[r1,#0xb]          ;2336  ; gMaxMCUYSize
0004b6  61e0              STR      r0,[r4,#0x1c]         ;2337
0004b8  4807              LDR      r0,|L12.1240|
0004ba  6220              STR      r0,[r4,#0x20]         ;2337
0004bc  4807              LDR      r0,|L12.1244|
0004be  6260              STR      r0,[r4,#0x24]         ;2337
0004c0  4807              LDR      r0,|L12.1248|
0004c2  62a0              STR      r0,[r4,#0x28]         ;2339
0004c4  2000              MOVS     r0,#0                 ;2339
0004c6  b003              ADD      sp,sp,#0xc
0004c8  bdf0              POP      {r4-r7,pc}
                          ENDP

0004ca  0000              DCW      0x0000
                  |L12.1228|
                          DCD      ||.data||+0x44
                  |L12.1232|
                          DCD      ||.bss||+0x7e0
                  |L12.1236|
                          DCD      ||.data||
                  |L12.1240|
                          DCD      ||.bss||+0x80
                  |L12.1244|
                          DCD      ||.bss||+0x180
                  |L12.1248|
                          DCD      ||.bss||+0x280

                          AREA ||i.pjpeg_decode_mcu||, CODE, READONLY, ALIGN=2

                  pjpeg_decode_mcu PROC
;;;2282   //------------------------------------------------------------------------------
;;;2283   unsigned char pjpeg_decode_mcu(void)
000000  b510              PUSH     {r4,lr}
;;;2284   {
;;;2285      uint8 status;
;;;2286      
;;;2287      if (gCallbackStatus)
000002  4c0c              LDR      r4,|L13.52|
000004  7b20              LDRB     r0,[r4,#0xc]  ; gCallbackStatus
000006  2800              CMP      r0,#0
000008  d10c              BNE      |L13.36|
;;;2288         return gCallbackStatus;
;;;2289      
;;;2290      if (!gNumMCUSRemaining)
00000a  8be0              LDRH     r0,[r4,#0x1e]  ; gNumMCUSRemaining
00000c  2800              CMP      r0,#0
00000e  d00a              BEQ      |L13.38|
;;;2291         return PJPG_NO_MORE_BLOCKS;
;;;2292         
;;;2293      status = decodeNextMCU();
000010  f7fffffe          BL       decodeNextMCU
000014  4601              MOV      r1,r0
;;;2294      if ((status) || (gCallbackStatus))
000016  7b20              LDRB     r0,[r4,#0xc]  ; gCallbackStatus
000018  460a              MOV      r2,r1
00001a  4302              ORRS     r2,r2,r0
00001c  d005              BEQ      |L13.42|
;;;2295         return gCallbackStatus ? gCallbackStatus : status;
00001e  2800              CMP      r0,#0
000020  d100              BNE      |L13.36|
000022  4608              MOV      r0,r1
                  |L13.36|
;;;2296         
;;;2297      gNumMCUSRemaining--;
;;;2298      
;;;2299      return 0;
;;;2300   }
000024  bd10              POP      {r4,pc}
                  |L13.38|
000026  2001              MOVS     r0,#1                 ;2291
000028  bd10              POP      {r4,pc}
                  |L13.42|
00002a  8be0              LDRH     r0,[r4,#0x1e]         ;2297  ; gNumMCUSRemaining
00002c  1e40              SUBS     r0,r0,#1              ;2297
00002e  83e0              STRH     r0,[r4,#0x1e]         ;2297
000030  2000              MOVS     r0,#0                 ;2299
000032  bd10              POP      {r4,pc}
;;;2301   //------------------------------------------------------------------------------
                          ENDP

                  |L13.52|
                          DCD      ||.data||

                          AREA ||i.processMarkers||, CODE, READONLY, ALIGN=2

                  processMarkers PROC
;;;795    // encountered.
;;;796    static uint8 processMarkers(uint8* pMarker)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;797    {
000002  b08c              SUB      sp,sp,#0x30
                  |L14.4|
000004  2100              MOVS     r1,#0
000006  2008              MOVS     r0,#8
000008  f7fffffe          BL       getBits
00000c  b2c0              UXTB     r0,r0
00000e  28ff              CMP      r0,#0xff
000010  d1f8              BNE      |L14.4|
                  |L14.18|
000012  2100              MOVS     r1,#0
000014  2008              MOVS     r0,#8
000016  f7fffffe          BL       getBits
00001a  b2c0              UXTB     r0,r0
00001c  28ff              CMP      r0,#0xff
00001e  d0f8              BEQ      |L14.18|
000020  2800              CMP      r0,#0
000022  d0ef              BEQ      |L14.4|
;;;798       for ( ; ; )
;;;799       {
;;;800          uint8 c = nextMarker();
;;;801    
;;;802          switch (c)
000024  28ce              CMP      r0,#0xce
000026  d032              BEQ      |L14.142|
000028  dc20              BGT      |L14.108|
00002a  28c6              CMP      r0,#0xc6
00002c  d02f              BEQ      |L14.142|
00002e  dc10              BGT      |L14.82|
000030  28c2              CMP      r0,#0xc2
000032  d02c              BEQ      |L14.142|
000034  dc06              BGT      |L14.68|
000036  2801              CMP      r0,#1
000038  d079              BEQ      |L14.302|
00003a  28c0              CMP      r0,#0xc0
00003c  d027              BEQ      |L14.142|
00003e  28c1              CMP      r0,#0xc1
000040  d176              BNE      |L14.304|
000042  e024              B        |L14.142|
                  |L14.68|
000044  28c3              CMP      r0,#0xc3
000046  d022              BEQ      |L14.142|
000048  28c4              CMP      r0,#0xc4
00004a  d025              BEQ      |L14.152|
00004c  28c5              CMP      r0,#0xc5
00004e  d16f              BNE      |L14.304|
000050  e01d              B        |L14.142|
                  |L14.82|
000052  4601              MOV      r1,r0
000054  39c7              SUBS     r1,r1,#0xc7
000056  2907              CMP      r1,#7
000058  d26a              BCS      |L14.304|
00005a  000a              MOVS     r2,r1
00005c  447a              ADD      r2,r2,pc
00005e  7912              LDRB     r2,[r2,#4]
000060  1892              ADDS     r2,r2,r2
000062  4497              ADD      pc,pc,r2
000064  14641414          DCB      0x14,0x64,0x14,0x14
000068  14b61400          DCB      0x14,0xb6,0x14,0x00
                  |L14.108|
00006c  4601              MOV      r1,r0
00006e  39cf              SUBS     r1,r1,#0xcf
000070  290f              CMP      r1,#0xf
000072  d25d              BCS      |L14.304|
000074  000a              MOVS     r2,r1
000076  447a              ADD      r2,r2,pc
000078  7912              LDRB     r2,[r2,#4]
00007a  1892              ADDS     r2,r2,r2
00007c  4497              ADD      pc,pc,r2
00007e  0757              DCB      0x07,0x57
000080  57575757          DCB      0x57,0x57,0x57,0x57
000084  57575707          DCB      0x57,0x57,0x57,0x07
000088  0707ac58          DCB      0x07,0x07,0xac,0x58
00008c  fe00              DCB      0xfe,0x00
                  |L14.142|
;;;803          {
;;;804             case M_SOF0:
;;;805             case M_SOF1:
;;;806             case M_SOF2:
;;;807             case M_SOF3:
;;;808             case M_SOF5:
;;;809             case M_SOF6:
;;;810             case M_SOF7:
;;;811             //      case M_JPG:
;;;812             case M_SOF9:
;;;813             case M_SOF10:
;;;814             case M_SOF11:
;;;815             case M_SOF13:
;;;816             case M_SOF14:
;;;817             case M_SOF15:
;;;818             case M_SOI:
;;;819             case M_EOI:
;;;820             case M_SOS:
;;;821             {
;;;822                *pMarker = c;
00008e  990c              LDR      r1,[sp,#0x30]
000090  7008              STRB     r0,[r1,#0]
;;;823                return 0;
000092  2000              MOVS     r0,#0
;;;824             }
;;;825             case M_DHT:
;;;826             {
;;;827                readDHTMarker();
;;;828                break;
;;;829             }
;;;830             // Sorry, no arithmetic support at this time. Dumb patents!
;;;831             case M_DAC:
;;;832             {
;;;833                return PJPG_NO_ARITHMITIC_SUPPORT;
;;;834             }
;;;835             case M_DQT:
;;;836             {
;;;837                readDQTMarker();
;;;838                break;
;;;839             }
;;;840             case M_DRI:
;;;841             {
;;;842                readDRIMarker();
;;;843                break;
;;;844             }
;;;845             //case M_APP0:  /* no need to read the JFIF marker */
;;;846    
;;;847             case M_JPG:
;;;848             case M_RST0:    /* no parameters */
;;;849             case M_RST1:
;;;850             case M_RST2:
;;;851             case M_RST3:
;;;852             case M_RST4:
;;;853             case M_RST5:
;;;854             case M_RST6:
;;;855             case M_RST7:
;;;856             case M_TEM:
;;;857             {
;;;858                return PJPG_UNEXPECTED_MARKER;
;;;859             }
;;;860             default:    /* must be DNL, DHP, EXP, APPn, JPGn, COM, or RESn or APP0 */
;;;861             {
;;;862                skipVariableMarker();
;;;863                break;
;;;864             }
;;;865          }
;;;866       }
;;;867    //   return 0;
;;;868    }
000094  b00d              ADD      sp,sp,#0x34
000096  bdf0              POP      {r4-r7,pc}
                  |L14.152|
000098  2100              MOVS     r1,#0
00009a  2010              MOVS     r0,#0x10
00009c  f7fffffe          BL       getBits
0000a0  2802              CMP      r0,#2
                  |L14.162|
0000a2  d3af              BCC      |L14.4|
0000a4  1e80              SUBS     r0,r0,#2
0000a6  0400              LSLS     r0,r0,#16
0000a8  0c00              LSRS     r0,r0,#16
0000aa  9004              STR      r0,[sp,#0x10]
0000ac  d0aa              BEQ      |L14.4|
                  |L14.174|
0000ae  2100              MOVS     r1,#0
0000b0  2008              MOVS     r0,#8
0000b2  f7fffffe          BL       getBits
0000b6  b2c0              UXTB     r0,r0
0000b8  0701              LSLS     r1,r0,#28
0000ba  0f09              LSRS     r1,r1,#28
0000bc  2901              CMP      r1,#1
0000be  d8a1              BHI      |L14.4|
0000c0  0901              LSRS     r1,r0,#4
0000c2  0109              LSLS     r1,r1,#4
0000c4  2910              CMP      r1,#0x10
0000c6  d89d              BHI      |L14.4|
0000c8  08c1              LSRS     r1,r0,#3
0000ca  2202              MOVS     r2,#2
0000cc  07c0              LSLS     r0,r0,#31
0000ce  4011              ANDS     r1,r1,r2
0000d0  0fc0              LSRS     r0,r0,#31
0000d2  1808              ADDS     r0,r1,r0
0000d4  900a              STR      r0,[sp,#0x28]
0000d6  d02c              BEQ      |L14.306|
0000d8  2801              CMP      r0,#1
0000da  d02e              BEQ      |L14.314|
0000dc  2802              CMP      r0,#2
0000de  d02e              BEQ      |L14.318|
0000e0  2803              CMP      r0,#3
0000e2  d02e              BEQ      |L14.322|
0000e4  2000              MOVS     r0,#0
                  |L14.230|
0000e6  9005              STR      r0,[sp,#0x14]
0000e8  980a              LDR      r0,[sp,#0x28]
0000ea  2801              CMP      r0,#1
0000ec  d02b              BEQ      |L14.326|
0000ee  2802              CMP      r0,#2
0000f0  d02b              BEQ      |L14.330|
0000f2  2803              CMP      r0,#3
0000f4  d02b              BEQ      |L14.334|
0000f6  2600              MOVS     r6,#0
                  |L14.248|
0000f8  990a              LDR      r1,[sp,#0x28]
0000fa  2001              MOVS     r0,#1
0000fc  4088              LSLS     r0,r0,r1
0000fe  4976              LDR      r1,|L14.728|
000100  af06              ADD      r7,sp,#0x18
000102  780a              LDRB     r2,[r1,#0]  ; gValidHuffTables
000104  4310              ORRS     r0,r0,r2
000106  2400              MOVS     r4,#0
000108  7008              STRB     r0,[r1,#0]
00010a  4625              MOV      r5,r4
                  |L14.268|
00010c  2100              MOVS     r1,#0
00010e  2008              MOVS     r0,#8
000110  f7fffffe          BL       getBits
000114  b2c0              UXTB     r0,r0
000116  5578              STRB     r0,[r7,r5]
000118  1820              ADDS     r0,r4,r0
00011a  1c6d              ADDS     r5,r5,#1
00011c  b2ed              UXTB     r5,r5
00011e  b284              UXTH     r4,r0
000120  2d0f              CMP      r5,#0xf
000122  d9f3              BLS      |L14.268|
000124  980a              LDR      r0,[sp,#0x28]
000126  2802              CMP      r0,#2
000128  d213              BCS      |L14.338|
00012a  200c              MOVS     r0,#0xc
00012c  e012              B        |L14.340|
                  |L14.302|
00012e  e0bc              B        |L14.682|
                  |L14.304|
000130  e0be              B        |L14.688|
                  |L14.306|
000132  486a              LDR      r0,|L14.732|
000134  4e6a              LDR      r6,|L14.736|
000136  9005              STR      r0,[sp,#0x14]
000138  e7de              B        |L14.248|
                  |L14.314|
00013a  486a              LDR      r0,|L14.740|
00013c  e7d3              B        |L14.230|
                  |L14.318|
00013e  486a              LDR      r0,|L14.744|
000140  e7d1              B        |L14.230|
                  |L14.322|
000142  486a              LDR      r0,|L14.748|
000144  e7cf              B        |L14.230|
                  |L14.326|
000146  4e6a              LDR      r6,|L14.752|
000148  e7d6              B        |L14.248|
                  |L14.330|
00014a  4e6a              LDR      r6,|L14.756|
00014c  e7d4              B        |L14.248|
                  |L14.334|
00014e  4e6a              LDR      r6,|L14.760|
000150  e7d2              B        |L14.248|
                  |L14.338|
000152  20ff              MOVS     r0,#0xff
                  |L14.340|
000154  42a0              CMP      r0,r4
000156  d3a4              BCC      |L14.162|
000158  2500              MOVS     r5,#0
00015a  2c00              CMP      r4,#0
00015c  d908              BLS      |L14.368|
                  |L14.350|
00015e  2100              MOVS     r1,#0
000160  2008              MOVS     r0,#8
000162  f7fffffe          BL       getBits
000166  5570              STRB     r0,[r6,r5]
000168  1c6d              ADDS     r5,r5,#1
00016a  b2ed              UXTB     r5,r5
00016c  42a5              CMP      r5,r4
00016e  d3f6              BCC      |L14.350|
                  |L14.368|
000170  3411              ADDS     r4,r4,#0x11
000172  9904              LDR      r1,[sp,#0x10]
000174  b2a0              UXTH     r0,r4
000176  4281              CMP      r1,r0
000178  d393              BCC      |L14.162|
00017a  1a08              SUBS     r0,r1,r0
00017c  b280              UXTH     r0,r0
00017e  9004              STR      r0,[sp,#0x10]
000180  2000              MOVS     r0,#0
000182  9905              LDR      r1,[sp,#0x14]
000184  ae06              ADD      r6,sp,#0x18
000186  4604              MOV      r4,r0
000188  4602              MOV      r2,r0
                  |L14.394|
00018a  5c33              LDRB     r3,[r6,r0]
00018c  2b00              CMP      r3,#0
00018e  d016              BEQ      |L14.446|
000190  0045              LSLS     r5,r0,#1
000192  534a              STRH     r2,[r1,r5]
000194  18d7              ADDS     r7,r2,r3
000196  1e7a              SUBS     r2,r7,#1
000198  186d              ADDS     r5,r5,r1
00019a  842a              STRH     r2,[r5,#0x20]
00019c  180a              ADDS     r2,r1,r0
00019e  3240              ADDS     r2,r2,#0x40
0001a0  7014              STRB     r4,[r2,#0]
0001a2  18e2              ADDS     r2,r4,r3
0001a4  b2d4              UXTB     r4,r2
0001a6  b2ba              UXTH     r2,r7
                  |L14.424|
0001a8  0452              LSLS     r2,r2,#17
0001aa  1c40              ADDS     r0,r0,#1
0001ac  0c12              LSRS     r2,r2,#16
0001ae  b2c0              UXTB     r0,r0
0001b0  280f              CMP      r0,#0xf
0001b2  d9ea              BLS      |L14.394|
0001b4  9804              LDR      r0,[sp,#0x10]
0001b6  2800              CMP      r0,#0
0001b8  d000              BEQ      |L14.444|
0001ba  e778              B        |L14.174|
                  |L14.444|
0001bc  e722              B        |L14.4|
                  |L14.446|
0001be  2300              MOVS     r3,#0
0001c0  0045              LSLS     r5,r0,#1
0001c2  534b              STRH     r3,[r1,r5]
0001c4  4f4d              LDR      r7,|L14.764|
0001c6  186d              ADDS     r5,r5,r1
0001c8  842f              STRH     r7,[r5,#0x20]
0001ca  180d              ADDS     r5,r1,r0
0001cc  3540              ADDS     r5,r5,#0x40
0001ce  702b              STRB     r3,[r5,#0]
0001d0  e7ea              B        |L14.424|
0001d2  2011              MOVS     r0,#0x11              ;833
0001d4  b00d              ADD      sp,sp,#0x34
0001d6  bdf0              POP      {r4-r7,pc}
0001d8  2100              MOVS     r1,#0
0001da  2010              MOVS     r0,#0x10
0001dc  f7fffffe          BL       getBits
0001e0  2802              CMP      r0,#2
0001e2  d3eb              BCC      |L14.444|
0001e4  1e80              SUBS     r0,r0,#2
0001e6  0400              LSLS     r0,r0,#16
0001e8  0c00              LSRS     r0,r0,#16
0001ea  9000              STR      r0,[sp,#0]
0001ec  d0e6              BEQ      |L14.444|
                  |L14.494|
0001ee  2100              MOVS     r1,#0
0001f0  2008              MOVS     r0,#8
0001f2  f7fffffe          BL       getBits
0001f6  b2c0              UXTB     r0,r0
0001f8  0707              LSLS     r7,r0,#28
0001fa  0906              LSRS     r6,r0,#4
0001fc  0f3f              LSRS     r7,r7,#28
0001fe  2f01              CMP      r7,#1
000200  d8dc              BHI      |L14.444|
000202  2f00              CMP      r7,#0
000204  d001              BEQ      |L14.522|
000206  2102              MOVS     r1,#2
000208  e000              B        |L14.524|
                  |L14.522|
00020a  2101              MOVS     r1,#1
                  |L14.524|
00020c  4832              LDR      r0,|L14.728|
00020e  7842              LDRB     r2,[r0,#1]  ; gValidQuantTables
000210  4311              ORRS     r1,r1,r2
000212  7041              STRB     r1,[r0,#1]
000214  2500              MOVS     r5,#0
                  |L14.534|
000216  2100              MOVS     r1,#0
000218  2008              MOVS     r0,#8
00021a  f7fffffe          BL       getBits
00021e  4604              MOV      r4,r0
000220  2e00              CMP      r6,#0
000222  d006              BEQ      |L14.562|
000224  2100              MOVS     r1,#0
000226  2008              MOVS     r0,#8
000228  f7fffffe          BL       getBits
00022c  0221              LSLS     r1,r4,#8
00022e  1840              ADDS     r0,r0,r1
000230  b284              UXTH     r4,r0
                  |L14.562|
000232  2f00              CMP      r7,#0
000234  d002              BEQ      |L14.572|
000236  0069              LSLS     r1,r5,#1
000238  4831              LDR      r0,|L14.768|
00023a  e001              B        |L14.576|
                  |L14.572|
00023c  4831              LDR      r0,|L14.772|
00023e  0069              LSLS     r1,r5,#1
                  |L14.576|
000240  1c6d              ADDS     r5,r5,#1
000242  b2ed              UXTB     r5,r5
000244  5244              STRH     r4,[r0,r1]
000246  2d40              CMP      r5,#0x40
000248  d3e5              BCC      |L14.534|
00024a  2f00              CMP      r7,#0
00024c  d001              BEQ      |L14.594|
00024e  482c              LDR      r0,|L14.768|
000250  e000              B        |L14.596|
                  |L14.594|
000252  482c              LDR      r0,|L14.772|
                  |L14.596|
000254  492c              LDR      r1,|L14.776|
000256  2340              MOVS     r3,#0x40
000258  025d              LSLS     r5,r3,#9
                  |L14.602|
00025a  2400              MOVS     r4,#0
00025c  5f04              LDRSH    r4,[r0,r4]
00025e  780a              LDRB     r2,[r1,#0]
000260  1c49              ADDS     r1,r1,#1
000262  4362              MULS     r2,r4,r2
000264  0352              LSLS     r2,r2,#13
000266  1952              ADDS     r2,r2,r5
000268  1412              ASRS     r2,r2,#16
00026a  8002              STRH     r2,[r0,#0]
00026c  1c80              ADDS     r0,r0,#2
00026e  1e5b              SUBS     r3,r3,#1
000270  d1f3              BNE      |L14.602|
000272  2041              MOVS     r0,#0x41
000274  2e00              CMP      r6,#0
000276  d000              BEQ      |L14.634|
000278  2081              MOVS     r0,#0x81
                  |L14.634|
00027a  e000              B        |L14.638|
00027c  e008              B        |L14.656|
                  |L14.638|
00027e  9900              LDR      r1,[sp,#0]
000280  4281              CMP      r1,r0
000282  d39b              BCC      |L14.444|
000284  1a08              SUBS     r0,r1,r0
000286  0400              LSLS     r0,r0,#16
000288  0c00              LSRS     r0,r0,#16
00028a  9000              STR      r0,[sp,#0]
00028c  d1af              BNE      |L14.494|
                  |L14.654|
00028e  e6b9              B        |L14.4|
                  |L14.656|
000290  2100              MOVS     r1,#0
000292  2010              MOVS     r0,#0x10
000294  f7fffffe          BL       getBits
000298  2804              CMP      r0,#4
00029a  d18f              BNE      |L14.444|
00029c  2100              MOVS     r1,#0
00029e  2010              MOVS     r0,#0x10
0002a0  f7fffffe          BL       getBits
0002a4  490c              LDR      r1,|L14.728|
0002a6  8288              STRH     r0,[r1,#0x14]
0002a8  e6ac              B        |L14.4|
                  |L14.682|
0002aa  2012              MOVS     r0,#0x12              ;858
0002ac  b00d              ADD      sp,sp,#0x34
0002ae  bdf0              POP      {r4-r7,pc}
                  |L14.688|
0002b0  2100              MOVS     r1,#0
0002b2  2010              MOVS     r0,#0x10
0002b4  f7fffffe          BL       getBits
0002b8  2802              CMP      r0,#2
0002ba  d3e8              BCC      |L14.654|
0002bc  1e80              SUBS     r0,r0,#2
0002be  0404              LSLS     r4,r0,#16
0002c0  0c24              LSRS     r4,r4,#16
0002c2  d0e4              BEQ      |L14.654|
                  |L14.708|
0002c4  2100              MOVS     r1,#0
0002c6  2008              MOVS     r0,#8
0002c8  f7fffffe          BL       getBits
0002cc  1e64              SUBS     r4,r4,#1
0002ce  0424              LSLS     r4,r4,#16
0002d0  0c24              LSRS     r4,r4,#16
0002d2  d1f7              BNE      |L14.708|
0002d4  e696              B        |L14.4|
;;;869    //------------------------------------------------------------------------------
                          ENDP

0002d6  0000              DCW      0x0000
                  |L14.728|
                          DCD      ||.data||
                  |L14.732|
                          DCD      ||.bss||+0x480
                  |L14.736|
                          DCD      ||.bss||+0x4d0
                  |L14.740|
                          DCD      ||.bss||+0x4e0
                  |L14.744|
                          DCD      ||.bss||+0x540
                  |L14.748|
                          DCD      ||.bss||+0x690
                  |L14.752|
                          DCD      ||.bss||+0x530
                  |L14.756|
                          DCD      ||.bss||+0x590
                  |L14.760|
                          DCD      ||.bss||+0x6e0
                  |L14.764|
                          DCD      0x0000ffff
                  |L14.768|
                          DCD      ||.bss||+0x400
                  |L14.772|
                          DCD      ||.bss||+0x380
                  |L14.776|
                          DCD      ||.constdata||+0x40

                          AREA ||i.transformBlock||, CODE, READONLY, ALIGN=2

                  transformBlock PROC
                  |symbol_number.255|
;;;1816   #endif
;;;1817   static void transformBlock(uint8 mcuBlock)
000000  b510              PUSH     {r4,lr}
;;;1818   {
000002  4604              MOV      r4,r0
;;;1819      idctRows();
000004  f7fffffe          BL       idctRows
;;;1820      idctCols();
000008  f7fffffe          BL       idctCols
;;;1821      
;;;1822      switch (gScanType)
00000c  4842              LDR      r0,|L15.280|
00000e  7a00              LDRB     r0,[r0,#8]  ; gScanType
000010  2805              CMP      r0,#5
000012  d210              BCS      |L15.54|
000014  0001              MOVS     r1,r0
000016  4479              ADD      r1,r1,pc
000018  7909              LDRB     r1,[r1,#4]
00001a  1849              ADDS     r1,r1,r1
00001c  448f              ADD      pc,pc,r1
00001e  5102              DCB      0x51,0x02
000020  2c104600          DCB      0x2c,0x10,0x46,0x00
;;;1823      {
;;;1824         case PJPG_GRAYSCALE:
;;;1825         {
;;;1826            // MCU size: 1, 1 block per MCU
;;;1827            copyY(0);
;;;1828            break;
;;;1829         }
;;;1830         case PJPG_YH1V1:
;;;1831         {
;;;1832            // MCU size: 8x8, 3 blocks per MCU
;;;1833            switch (mcuBlock)
000024  2c00              CMP      r4,#0
000026  d04c              BEQ      |L15.194|
000028  2c01              CMP      r4,#1
00002a  d005              BEQ      |L15.56|
00002c  2c02              CMP      r4,#2
00002e  d102              BNE      |L15.54|
;;;1834            {
;;;1835               case 0:
;;;1836               {
;;;1837                  copyY(0);
;;;1838                  break;
;;;1839               }
;;;1840               case 1:
;;;1841               {
;;;1842                  convertCb(0);
;;;1843                  break;
;;;1844               }
;;;1845               case 2:
;;;1846               {
;;;1847                  convertCr(0);
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       convertCr
                  |L15.54|
;;;1848                  break;
;;;1849               }
;;;1850            }
;;;1851   
;;;1852            break;
;;;1853         }
;;;1854         case PJPG_YH1V2:
;;;1855         {
;;;1856            // MCU size: 8x16, 4 blocks per MCU
;;;1857            switch (mcuBlock)
;;;1858            {
;;;1859               case 0:
;;;1860               {
;;;1861                  copyY(0);
;;;1862                  break;
;;;1863               }
;;;1864               case 1:
;;;1865               {
;;;1866                  copyY(128);
;;;1867                  break;
;;;1868               }
;;;1869               case 2:
;;;1870               {
;;;1871                  upsampleCbV(0, 0);
;;;1872                  upsampleCbV(4*8, 128);
;;;1873                  break;
;;;1874               }
;;;1875               case 3:
;;;1876               {
;;;1877                  upsampleCrV(0, 0);
;;;1878                  upsampleCrV(4*8, 128);
;;;1879                  break;
;;;1880               }
;;;1881            }
;;;1882   
;;;1883            break;
;;;1884         }        
;;;1885         case PJPG_YH2V1:
;;;1886         {
;;;1887            // MCU size: 16x8, 4 blocks per MCU
;;;1888            switch (mcuBlock)
;;;1889            {
;;;1890               case 0:
;;;1891               {
;;;1892                  copyY(0);
;;;1893                  break;
;;;1894               }
;;;1895               case 1:
;;;1896               {
;;;1897                  copyY(64);
;;;1898                  break;
;;;1899               }
;;;1900               case 2:
;;;1901               {
;;;1902                  upsampleCbH(0, 0);
;;;1903                  upsampleCbH(4, 64);
;;;1904                  break;
;;;1905               }
;;;1906               case 3:
;;;1907               {
;;;1908                  upsampleCrH(0, 0);
;;;1909                  upsampleCrH(4, 64);
;;;1910                  break;
;;;1911               }
;;;1912            }
;;;1913            
;;;1914            break;
;;;1915         }        
;;;1916         case PJPG_YH2V2:
;;;1917         {
;;;1918            // MCU size: 16x16, 6 blocks per MCU
;;;1919            switch (mcuBlock)
;;;1920            {
;;;1921               case 0:
;;;1922               {
;;;1923                  copyY(0);
;;;1924                  break;
;;;1925               }
;;;1926               case 1:
;;;1927               {
;;;1928                  copyY(64);
;;;1929                  break;
;;;1930               }
;;;1931               case 2:
;;;1932               {
;;;1933                  copyY(128);
;;;1934                  break;
;;;1935               }
;;;1936               case 3:
;;;1937               {
;;;1938                  copyY(192);
;;;1939                  break;
;;;1940               }
;;;1941               case 4:
;;;1942               {
;;;1943                  upsampleCb(0, 0);
;;;1944                  upsampleCb(4, 64);
;;;1945                  upsampleCb(4*8, 128);
;;;1946                  upsampleCb(4+4*8, 192);
;;;1947                  break;
;;;1948               }
;;;1949               case 5:
;;;1950               {
;;;1951                  upsampleCr(0, 0);
;;;1952                  upsampleCr(4, 64);
;;;1953                  upsampleCr(4*8, 128);
;;;1954                  upsampleCr(4+4*8, 192);
;;;1955                  break;
;;;1956               }
;;;1957            }
;;;1958   
;;;1959            break;
;;;1960         }         
;;;1961      }      
;;;1962   }
000036  bd10              POP      {r4,pc}
                  |L15.56|
000038  2000              MOVS     r0,#0                 ;1842
00003a  f7fffffe          BL       convertCb
                  |L15.62|
00003e  bd10              POP      {r4,pc}
000040  2c00              CMP      r4,#0                 ;1857
000042  d03e              BEQ      |L15.194|
000044  2c01              CMP      r4,#1                 ;1857
000046  d00c              BEQ      |L15.98|
000048  2c02              CMP      r4,#2                 ;1857
00004a  d00c              BEQ      |L15.102|
00004c  2c03              CMP      r4,#3                 ;1857
00004e  d1f6              BNE      |L15.62|
000050  2100              MOVS     r1,#0                 ;1877
000052  4608              MOV      r0,r1                 ;1877
000054  f7fffffe          BL       upsampleCrV
000058  2180              MOVS     r1,#0x80              ;1878
00005a  2020              MOVS     r0,#0x20              ;1878
00005c  f7fffffe          BL       upsampleCrV
000060  bd10              POP      {r4,pc}
                  |L15.98|
000062  2080              MOVS     r0,#0x80              ;1866
000064  e032              B        |L15.204|
                  |L15.102|
000066  2100              MOVS     r1,#0                 ;1871
000068  4608              MOV      r0,r1                 ;1871
00006a  f7fffffe          BL       upsampleCbV
00006e  2180              MOVS     r1,#0x80              ;1872
000070  2020              MOVS     r0,#0x20              ;1872
000072  f7fffffe          BL       upsampleCbV
                  |L15.118|
000076  bd10              POP      {r4,pc}
000078  2c00              CMP      r4,#0                 ;1888
00007a  d022              BEQ      |L15.194|
00007c  2c01              CMP      r4,#1                 ;1888
00007e  d022              BEQ      |L15.198|
000080  2c02              CMP      r4,#2                 ;1888
000082  d00a              BEQ      |L15.154|
000084  2c03              CMP      r4,#3                 ;1888
000086  d1f6              BNE      |L15.118|
000088  2100              MOVS     r1,#0                 ;1908
00008a  4608              MOV      r0,r1                 ;1908
00008c  f7fffffe          BL       upsampleCrH
000090  2140              MOVS     r1,#0x40              ;1909
000092  2004              MOVS     r0,#4                 ;1909
000094  f7fffffe          BL       upsampleCrH
000098  bd10              POP      {r4,pc}
                  |L15.154|
00009a  2100              MOVS     r1,#0                 ;1902
00009c  4608              MOV      r0,r1                 ;1902
00009e  f7fffffe          BL       upsampleCbH
0000a2  2140              MOVS     r1,#0x40              ;1903
0000a4  2004              MOVS     r0,#4                 ;1903
0000a6  f7fffffe          BL       upsampleCbH
                  |L15.170|
0000aa  bd10              POP      {r4,pc}
0000ac  2c06              CMP      r4,#6                 ;1919
0000ae  d2fc              BCS      |L15.170|
0000b0  0020              MOVS     r0,r4                 ;1919
0000b2  4478              ADD      r0,r0,pc              ;1919
0000b4  7900              LDRB     r0,[r0,#4]            ;1919
0000b6  1800              ADDS     r0,r0,r0              ;1919
0000b8  4487              ADD      pc,pc,r0              ;1919
0000ba  0305              DCB      0x03,0x05
0000bc  02070b1c          DCB      0x02,0x07,0x0b,0x1c
0000c0  e7cf              B        |L15.98|
                  |L15.194|
0000c2  2000              MOVS     r0,#0                 ;1923
0000c4  e002              B        |L15.204|
                  |L15.198|
0000c6  2040              MOVS     r0,#0x40              ;1928
0000c8  e000              B        |L15.204|
0000ca  20c0              MOVS     r0,#0xc0              ;1938
                  |L15.204|
0000cc  f7fffffe          BL       copyY
0000d0  bd10              POP      {r4,pc}
0000d2  2100              MOVS     r1,#0                 ;1943
0000d4  4608              MOV      r0,r1                 ;1943
0000d6  f7fffffe          BL       upsampleCb
0000da  2140              MOVS     r1,#0x40              ;1944
0000dc  2004              MOVS     r0,#4                 ;1944
0000de  f7fffffe          BL       upsampleCb
0000e2  2180              MOVS     r1,#0x80              ;1945
0000e4  2020              MOVS     r0,#0x20              ;1945
0000e6  f7fffffe          BL       upsampleCb
0000ea  21c0              MOVS     r1,#0xc0              ;1946
0000ec  2024              MOVS     r0,#0x24              ;1946
0000ee  f7fffffe          BL       upsampleCb
0000f2  bd10              POP      {r4,pc}
0000f4  2100              MOVS     r1,#0                 ;1951
0000f6  4608              MOV      r0,r1                 ;1951
0000f8  f7fffffe          BL       upsampleCr
0000fc  2140              MOVS     r1,#0x40              ;1952
0000fe  2004              MOVS     r0,#4                 ;1952
000100  f7fffffe          BL       upsampleCr
000104  2180              MOVS     r1,#0x80              ;1953
000106  2020              MOVS     r0,#0x20              ;1953
000108  f7fffffe          BL       upsampleCr
00010c  21c0              MOVS     r1,#0xc0              ;1954
00010e  2024              MOVS     r0,#0x24              ;1954
000110  f7fffffe          BL       upsampleCr
000114  bd10              POP      {r4,pc}
;;;1963   //------------------------------------------------------------------------------
                          ENDP

000116  0000              DCW      0x0000
                  |L15.280|
                          DCD      ||.data||

                          AREA ||i.transformBlockReduce||, CODE, READONLY, ALIGN=2

                  transformBlockReduce PROC
                  |symbol_number.257|
;;;1966   #endif
;;;1967   static void transformBlockReduce(uint8 mcuBlock)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;1968   {
;;;1969      uint8 c = clamp(PJPG_DESCALE(gCoeffBuf[0]) + 128);
000002  49fd              LDR      r1,|L16.1016|
000004  2000              MOVS     r0,#0
000006  5e08              LDRSH    r0,[r1,r0]  ; gCoeffBuf
000008  b094              SUB      sp,sp,#0x50           ;1968
00000a  3040              ADDS     r0,r0,#0x40
00000c  09c0              LSRS     r0,r0,#7
00000e  3080              ADDS     r0,r0,#0x80
000010  b200              SXTH     r0,r0
000012  b281              UXTH     r1,r0
000014  29ff              CMP      r1,#0xff
000016  d907              BLS      |L16.40|
000018  2800              CMP      r0,#0                 ;1968
00001a  da01              BGE      |L16.32|
00001c  2000              MOVS     r0,#0                 ;1968
00001e  e004              B        |L16.42|
                  |L16.32|
000020  28ff              CMP      r0,#0xff              ;1968
000022  dd01              BLE      |L16.40|
000024  20ff              MOVS     r0,#0xff              ;1968
000026  e000              B        |L16.42|
                  |L16.40|
000028  b2c0              UXTB     r0,r0                 ;1968
                  |L16.42|
;;;1970      int16 cbG, cbB, crR, crG;
;;;1971   
;;;1972      switch (gScanType)
00002a  49f4              LDR      r1,|L16.1020|
;;;1973      {
;;;1974         case PJPG_GRAYSCALE:
;;;1975         {
;;;1976            // MCU size: 1, 1 block per MCU
;;;1977            gMCUBufR[0] = c;
;;;1978            break;
;;;1979         }
;;;1980         case PJPG_YH1V1:
;;;1981         {
;;;1982            // MCU size: 8x8, 3 blocks per MCU
;;;1983            switch (mcuBlock)
;;;1984            {
;;;1985               case 0:
;;;1986               {
;;;1987                  gMCUBufR[0] = c;
;;;1988                  gMCUBufG[0] = c;
;;;1989                  gMCUBufB[0] = c;
00002c  4bf6              LDR      r3,|L16.1032|
00002e  7a0f              LDRB     r7,[r1,#8]            ;1972  ; gScanType
000030  49f3              LDR      r1,|L16.1024|
000032  781b              LDRB     r3,[r3,#0]
000034  7809              LDRB     r1,[r1,#0]            ;1977
000036  4cf5              LDR      r4,|L16.1036|
000038  468c              MOV      r12,r1                ;1977
00003a  49f2              LDR      r1,|L16.1028|
00003c  780a              LDRB     r2,[r1,#0]            ;1988
;;;1990                  break;
;;;1991               }
;;;1992               case 1:
;;;1993               {
;;;1994                  cbG = ((c * 88U) >> 8U) - 44U;
;;;1995                  gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
;;;1996   
;;;1997                  cbB = (c + ((c * 198U) >> 8U)) - 227U;
;;;1998                  gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
;;;1999                  break;
;;;2000               }
;;;2001               case 2:
;;;2002               {
;;;2003                  crR = (c + ((c * 103U) >> 8U)) - 179;
;;;2004                  gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
;;;2005   
;;;2006                  crG = ((c * 183U) >> 8U) - 91;
;;;2007                  gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
;;;2008                  break;
;;;2009               }
;;;2010            }
;;;2011   
;;;2012            break;
;;;2013         }
;;;2014         case PJPG_YH1V2:
;;;2015         {
;;;2016            // MCU size: 8x16, 4 blocks per MCU
;;;2017            switch (mcuBlock)
;;;2018            {
;;;2019               case 0:
;;;2020               {
;;;2021                  gMCUBufR[0] = c;
;;;2022                  gMCUBufG[0] = c;
;;;2023                  gMCUBufB[0] = c;
;;;2024                  break;
;;;2025               }
;;;2026               case 1:
;;;2027               {
;;;2028                  gMCUBufR[128] = c;
00003e  9405              STR      r4,[sp,#0x14]
000040  7824              LDRB     r4,[r4,#0]
;;;2029                  gMCUBufG[128] = c;
000042  460d              MOV      r5,r1
000044  3580              ADDS     r5,r5,#0x80
000046  9411              STR      r4,[sp,#0x44]
000048  782c              LDRB     r4,[r5,#0]
00004a  940a              STR      r4,[sp,#0x28]
00004c  4cf0              LDR      r4,|L16.1040|
;;;2030                  gMCUBufB[128] = c;
00004e  9404              STR      r4,[sp,#0x10]
000050  7824              LDRB     r4,[r4,#0]
000052  940f              STR      r4,[sp,#0x3c]
000054  4cef              LDR      r4,|L16.1044|
;;;2031                  break;
;;;2032               }
;;;2033               case 2:
;;;2034               {
;;;2035                  cbG = ((c * 88U) >> 8U) - 44U;
;;;2036                  gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
;;;2037                  gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
;;;2038   
;;;2039                  cbB = (c + ((c * 198U) >> 8U)) - 227U;
;;;2040                  gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
;;;2041                  gMCUBufB[128] = addAndClamp(gMCUBufB[128], cbB);
;;;2042   
;;;2043                  break;
;;;2044               }
;;;2045               case 3:
;;;2046               {
;;;2047                  crR = (c + ((c * 103U) >> 8U)) - 179;
;;;2048                  gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
;;;2049                  gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
;;;2050   
;;;2051                  crG = ((c * 183U) >> 8U) - 91;
;;;2052                  gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
;;;2053                  gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
;;;2054   
;;;2055                  break;
;;;2056               }
;;;2057            }
;;;2058            break;
;;;2059         }
;;;2060         case PJPG_YH2V1:
;;;2061         {
;;;2062            // MCU size: 16x8, 4 blocks per MCU
;;;2063            switch (mcuBlock)
;;;2064            {
;;;2065               case 0:
;;;2066               {
;;;2067                  gMCUBufR[0] = c;
;;;2068                  gMCUBufG[0] = c;
;;;2069                  gMCUBufB[0] = c;
;;;2070                  break;
;;;2071               }
;;;2072               case 1:
;;;2073               {
;;;2074                  gMCUBufR[64] = c;
000056  9403              STR      r4,[sp,#0xc]
000058  7824              LDRB     r4,[r4,#0]
;;;2075                  gMCUBufG[64] = c;
00005a  9412              STR      r4,[sp,#0x48]
00005c  460c              MOV      r4,r1
00005e  3440              ADDS     r4,r4,#0x40
000060  7826              LDRB     r6,[r4,#0]
000062  960d              STR      r6,[sp,#0x34]
000064  4eec              LDR      r6,|L16.1048|
;;;2076                  gMCUBufB[64] = c;
000066  9602              STR      r6,[sp,#8]
000068  7836              LDRB     r6,[r6,#0]
00006a  9610              STR      r6,[sp,#0x40]         ;1972
00006c  2f05              CMP      r7,#5                 ;1972
00006e  d26f              BCS      |L16.336|
000070  003e              MOVS     r6,r7                 ;1972
000072  447e              ADD      r6,r6,pc              ;1972
000074  7936              LDRB     r6,[r6,#4]            ;1972
000076  19b6              ADDS     r6,r6,r6              ;1972
000078  44b7              ADD      pc,pc,r6              ;1972
00007a  0204              DCB      0x02,0x04
00007c  f352ed00          DCB      0xf3,0x52,0xed,0x00
000080  49df              LDR      r1,|L16.1024|
000082  e2d0              B        |L16.1574|
000084  9c14              LDR      r4,[sp,#0x50]         ;1983
000086  2c00              CMP      r4,#0                 ;1983
000088  d075              BEQ      |L16.374|
00008a  2c01              CMP      r4,#1                 ;1983
00008c  d00f              BEQ      |L16.174|
00008e  2c02              CMP      r4,#2                 ;1983
000090  d15e              BNE      |L16.336|
000092  2367              MOVS     r3,#0x67              ;2003
000094  4343              MULS     r3,r0,r3              ;2003
000096  0a1b              LSRS     r3,r3,#8              ;2003
000098  181b              ADDS     r3,r3,r0              ;2003
00009a  3bb3              SUBS     r3,r3,#0xb3           ;2004
00009c  4463              ADD      r3,r3,r12             ;2004
00009e  4cd8              LDR      r4,|L16.1024|
0000a0  b29d              UXTH     r5,r3                 ;2004
0000a2  2dff              CMP      r5,#0xff              ;2004
0000a4  d928              BLS      |L16.248|
0000a6  2b00              CMP      r3,#0                 ;2004
0000a8  da22              BGE      |L16.240|
0000aa  2300              MOVS     r3,#0                 ;2004
0000ac  e025              B        |L16.250|
                  |L16.174|
0000ae  2458              MOVS     r4,#0x58              ;1994
0000b0  4344              MULS     r4,r0,r4              ;1994
0000b2  0a24              LSRS     r4,r4,#8              ;1994
0000b4  3c2c              SUBS     r4,r4,#0x2c           ;1994
0000b6  1b12              SUBS     r2,r2,r4              ;1994
0000b8  b294              UXTH     r4,r2                 ;1994
0000ba  2cff              CMP      r4,#0xff              ;1994
0000bc  d907              BLS      |L16.206|
0000be  2a00              CMP      r2,#0                 ;1994
0000c0  da01              BGE      |L16.198|
0000c2  2200              MOVS     r2,#0                 ;1994
0000c4  e004              B        |L16.208|
                  |L16.198|
0000c6  2aff              CMP      r2,#0xff              ;1994
0000c8  dd01              BLE      |L16.206|
0000ca  22ff              MOVS     r2,#0xff              ;1994
0000cc  e000              B        |L16.208|
                  |L16.206|
0000ce  b2d2              UXTB     r2,r2                 ;1994
                  |L16.208|
0000d0  700a              STRB     r2,[r1,#0]            ;1995
0000d2  21c6              MOVS     r1,#0xc6              ;1997
0000d4  4341              MULS     r1,r0,r1              ;1997
0000d6  0a09              LSRS     r1,r1,#8              ;1997
0000d8  1808              ADDS     r0,r1,r0              ;1997
0000da  38e3              SUBS     r0,r0,#0xe3           ;1998
0000dc  1818              ADDS     r0,r3,r0              ;1998
0000de  49ca              LDR      r1,|L16.1032|
0000e0  b282              UXTH     r2,r0                 ;1998
0000e2  2aff              CMP      r2,#0xff              ;1998
0000e4  d91a              BLS      |L16.284|
0000e6  2800              CMP      r0,#0                 ;1998
0000e8  db12              BLT      |L16.272|
0000ea  28ff              CMP      r0,#0xff              ;1998
0000ec  dc14              BGT      |L16.280|
0000ee  e015              B        |L16.284|
                  |L16.240|
0000f0  2bff              CMP      r3,#0xff              ;1998
0000f2  dd01              BLE      |L16.248|
0000f4  23ff              MOVS     r3,#0xff              ;1998
0000f6  e000              B        |L16.250|
                  |L16.248|
0000f8  b2db              UXTB     r3,r3                 ;1998
                  |L16.250|
0000fa  7023              STRB     r3,[r4,#0]            ;2004
0000fc  23b7              MOVS     r3,#0xb7              ;2006
0000fe  4358              MULS     r0,r3,r0              ;2006
000100  0a00              LSRS     r0,r0,#8              ;2006
000102  385b              SUBS     r0,r0,#0x5b           ;2006
000104  1a10              SUBS     r0,r2,r0              ;2006
000106  b282              UXTH     r2,r0                 ;2006
000108  2aff              CMP      r2,#0xff              ;2006
00010a  d907              BLS      |L16.284|
00010c  2800              CMP      r0,#0                 ;2006
00010e  da01              BGE      |L16.276|
                  |L16.272|
000110  2000              MOVS     r0,#0                 ;2006
000112  e288              B        |L16.1574|
                  |L16.276|
000114  28ff              CMP      r0,#0xff              ;2006
000116  dd01              BLE      |L16.284|
                  |L16.280|
000118  20ff              MOVS     r0,#0xff              ;2006
00011a  e284              B        |L16.1574|
                  |L16.284|
00011c  b2c0              UXTB     r0,r0                 ;2006
00011e  e282              B        |L16.1574|
000120  9c14              LDR      r4,[sp,#0x50]         ;2017
000122  2c00              CMP      r4,#0                 ;2017
000124  d027              BEQ      |L16.374|
000126  2c01              CMP      r4,#1                 ;2017
000128  d013              BEQ      |L16.338|
00012a  2c02              CMP      r4,#2                 ;2017
00012c  d016              BEQ      |L16.348|
00012e  2c03              CMP      r4,#3                 ;2017
000130  d10e              BNE      |L16.336|
000132  2367              MOVS     r3,#0x67              ;2047
000134  4343              MULS     r3,r0,r3              ;2047
000136  0a1b              LSRS     r3,r3,#8              ;2047
000138  181b              ADDS     r3,r3,r0              ;2047
00013a  4664              MOV      r4,r12                ;2048
00013c  3bb3              SUBS     r3,r3,#0xb3           ;2048
00013e  18e4              ADDS     r4,r4,r3              ;2048
000140  4eaf              LDR      r6,|L16.1024|
000142  b2a7              UXTH     r7,r4                 ;2048
000144  2fff              CMP      r7,#0xff              ;2048
000146  d954              BLS      |L16.498|
000148  2c00              CMP      r4,#0                 ;2048
00014a  da4e              BGE      |L16.490|
00014c  2400              MOVS     r4,#0                 ;2048
00014e  e051              B        |L16.500|
                  |L16.336|
000150  e085              B        |L16.606|
                  |L16.338|
000152  9905              LDR      r1,[sp,#0x14]         ;2028
000154  7008              STRB     r0,[r1,#0]            ;2028
000156  7028              STRB     r0,[r5,#0]            ;2029
000158  9904              LDR      r1,[sp,#0x10]         ;2031
00015a  e264              B        |L16.1574|
                  |L16.348|
00015c  2458              MOVS     r4,#0x58              ;2035
00015e  4344              MULS     r4,r0,r4              ;2035
000160  0a24              LSRS     r4,r4,#8              ;2035
000162  460e              MOV      r6,r1                 ;2036
000164  3c2c              SUBS     r4,r4,#0x2c           ;2036
000166  1b11              SUBS     r1,r2,r4              ;2036
000168  b28a              UXTH     r2,r1                 ;2036
00016a  2aff              CMP      r2,#0xff              ;2036
00016c  d908              BLS      |L16.384|
00016e  2900              CMP      r1,#0                 ;2036
000170  da02              BGE      |L16.376|
000172  2100              MOVS     r1,#0                 ;2036
000174  e005              B        |L16.386|
                  |L16.374|
000176  e0f4              B        |L16.866|
                  |L16.376|
000178  29ff              CMP      r1,#0xff              ;2036
00017a  dd01              BLE      |L16.384|
00017c  21ff              MOVS     r1,#0xff              ;2036
00017e  e000              B        |L16.386|
                  |L16.384|
000180  b2c9              UXTB     r1,r1                 ;2036
                  |L16.386|
000182  7031              STRB     r1,[r6,#0]            ;2036
000184  990a              LDR      r1,[sp,#0x28]         ;2036
000186  1b09              SUBS     r1,r1,r4              ;2036
000188  b28a              UXTH     r2,r1                 ;2036
00018a  2aff              CMP      r2,#0xff              ;2036
00018c  d907              BLS      |L16.414|
00018e  2900              CMP      r1,#0                 ;2036
000190  da01              BGE      |L16.406|
000192  2100              MOVS     r1,#0                 ;2036
000194  e004              B        |L16.416|
                  |L16.406|
000196  29ff              CMP      r1,#0xff              ;2036
000198  dd01              BLE      |L16.414|
00019a  21ff              MOVS     r1,#0xff              ;2036
00019c  e000              B        |L16.416|
                  |L16.414|
00019e  b2c9              UXTB     r1,r1                 ;2036
                  |L16.416|
0001a0  7029              STRB     r1,[r5,#0]            ;2037
0001a2  21c6              MOVS     r1,#0xc6              ;2039
0001a4  4341              MULS     r1,r0,r1              ;2039
0001a6  0a09              LSRS     r1,r1,#8              ;2039
0001a8  1808              ADDS     r0,r1,r0              ;2039
0001aa  38e3              SUBS     r0,r0,#0xe3           ;2040
0001ac  1819              ADDS     r1,r3,r0              ;2040
0001ae  4a96              LDR      r2,|L16.1032|
0001b0  b28b              UXTH     r3,r1                 ;2040
0001b2  2bff              CMP      r3,#0xff              ;2040
0001b4  d907              BLS      |L16.454|
0001b6  2900              CMP      r1,#0                 ;2040
0001b8  da01              BGE      |L16.446|
0001ba  2100              MOVS     r1,#0                 ;2040
0001bc  e004              B        |L16.456|
                  |L16.446|
0001be  29ff              CMP      r1,#0xff              ;2040
0001c0  dd01              BLE      |L16.454|
0001c2  21ff              MOVS     r1,#0xff              ;2040
0001c4  e000              B        |L16.456|
                  |L16.454|
0001c6  b2c9              UXTB     r1,r1                 ;2040
                  |L16.456|
0001c8  7011              STRB     r1,[r2,#0]            ;2040
0001ca  990f              LDR      r1,[sp,#0x3c]         ;2040
0001cc  1808              ADDS     r0,r1,r0              ;2040
0001ce  b281              UXTH     r1,r0                 ;2040
0001d0  29ff              CMP      r1,#0xff              ;2040
0001d2  d907              BLS      |L16.484|
0001d4  2800              CMP      r0,#0                 ;2040
0001d6  da01              BGE      |L16.476|
0001d8  2000              MOVS     r0,#0                 ;2040
0001da  e004              B        |L16.486|
                  |L16.476|
0001dc  28ff              CMP      r0,#0xff              ;2040
0001de  dd01              BLE      |L16.484|
0001e0  20ff              MOVS     r0,#0xff              ;2040
0001e2  e000              B        |L16.486|
                  |L16.484|
0001e4  b2c0              UXTB     r0,r0                 ;2040
                  |L16.486|
0001e6  9904              LDR      r1,[sp,#0x10]         ;2043
0001e8  e21d              B        |L16.1574|
                  |L16.490|
0001ea  2cff              CMP      r4,#0xff              ;2043
0001ec  dd01              BLE      |L16.498|
0001ee  24ff              MOVS     r4,#0xff              ;2043
0001f0  e000              B        |L16.500|
                  |L16.498|
0001f2  b2e4              UXTB     r4,r4                 ;2043
                  |L16.500|
0001f4  7034              STRB     r4,[r6,#0]            ;2048
0001f6  9c11              LDR      r4,[sp,#0x44]         ;2048
0001f8  18e3              ADDS     r3,r4,r3              ;2048
0001fa  b29c              UXTH     r4,r3                 ;2048
0001fc  2cff              CMP      r4,#0xff              ;2048
0001fe  d907              BLS      |L16.528|
000200  2b00              CMP      r3,#0                 ;2048
000202  da01              BGE      |L16.520|
000204  2300              MOVS     r3,#0                 ;2048
000206  e004              B        |L16.530|
                  |L16.520|
000208  2bff              CMP      r3,#0xff              ;2048
00020a  dd01              BLE      |L16.528|
00020c  23ff              MOVS     r3,#0xff              ;2048
00020e  e000              B        |L16.530|
                  |L16.528|
000210  b2db              UXTB     r3,r3                 ;2048
                  |L16.530|
000212  9c05              LDR      r4,[sp,#0x14]         ;2049
000214  7023              STRB     r3,[r4,#0]            ;2049
000216  23b7              MOVS     r3,#0xb7              ;2051
000218  4358              MULS     r0,r3,r0              ;2051
00021a  0a00              LSRS     r0,r0,#8              ;2051
00021c  460b              MOV      r3,r1                 ;2052
00021e  385b              SUBS     r0,r0,#0x5b           ;2052
000220  1a11              SUBS     r1,r2,r0              ;2052
000222  b28a              UXTH     r2,r1                 ;2052
000224  2aff              CMP      r2,#0xff              ;2052
000226  d907              BLS      |L16.568|
000228  2900              CMP      r1,#0                 ;2052
00022a  da01              BGE      |L16.560|
00022c  2100              MOVS     r1,#0                 ;2052
00022e  e004              B        |L16.570|
                  |L16.560|
000230  29ff              CMP      r1,#0xff              ;2052
000232  dd01              BLE      |L16.568|
000234  21ff              MOVS     r1,#0xff              ;2052
000236  e000              B        |L16.570|
                  |L16.568|
000238  b2c9              UXTB     r1,r1                 ;2052
                  |L16.570|
00023a  7019              STRB     r1,[r3,#0]            ;2052
00023c  990a              LDR      r1,[sp,#0x28]         ;2052
00023e  1a08              SUBS     r0,r1,r0              ;2052
000240  b281              UXTH     r1,r0                 ;2052
000242  29ff              CMP      r1,#0xff              ;2052
000244  d909              BLS      |L16.602|
000246  2800              CMP      r0,#0                 ;2052
000248  da01              BGE      |L16.590|
00024a  2000              MOVS     r0,#0                 ;2052
00024c  e006              B        |L16.604|
                  |L16.590|
00024e  28ff              CMP      r0,#0xff              ;2052
000250  dd03              BLE      |L16.602|
000252  20ff              MOVS     r0,#0xff              ;2052
000254  e002              B        |L16.604|
000256  e09d              B        |L16.916|
000258  e003              B        |L16.610|
                  |L16.602|
00025a  b2c0              UXTB     r0,r0                 ;2052
                  |L16.604|
00025c  7028              STRB     r0,[r5,#0]            ;2053
                  |L16.606|
;;;2077                  break;
;;;2078               }
;;;2079               case 2:
;;;2080               {
;;;2081                  cbG = ((c * 88U) >> 8U) - 44U;
;;;2082                  gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
;;;2083                  gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
;;;2084   
;;;2085                  cbB = (c + ((c * 198U) >> 8U)) - 227U;
;;;2086                  gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
;;;2087                  gMCUBufB[64] = addAndClamp(gMCUBufB[64], cbB);
;;;2088   
;;;2089                  break;
;;;2090               }
;;;2091               case 3:
;;;2092               {
;;;2093                  crR = (c + ((c * 103U) >> 8U)) - 179;
;;;2094                  gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
;;;2095                  gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
;;;2096   
;;;2097                  crG = ((c * 183U) >> 8U) - 91;
;;;2098                  gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
;;;2099                  gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
;;;2100   
;;;2101                  break;
;;;2102               }
;;;2103            }
;;;2104            break;
;;;2105         }
;;;2106         case PJPG_YH2V2:
;;;2107         {
;;;2108            // MCU size: 16x16, 6 blocks per MCU
;;;2109            switch (mcuBlock)
;;;2110            {
;;;2111               case 0:
;;;2112               {
;;;2113                  gMCUBufR[0] = c;
;;;2114                  gMCUBufG[0] = c;
;;;2115                  gMCUBufB[0] = c;
;;;2116                  break;
;;;2117               }
;;;2118               case 1:
;;;2119               {
;;;2120                  gMCUBufR[64] = c;
;;;2121                  gMCUBufG[64] = c;
;;;2122                  gMCUBufB[64] = c;
;;;2123                  break;
;;;2124               }
;;;2125               case 2:
;;;2126               {
;;;2127                  gMCUBufR[128] = c;
;;;2128                  gMCUBufG[128] = c;
;;;2129                  gMCUBufB[128] = c;
;;;2130                  break;
;;;2131               }
;;;2132               case 3:
;;;2133               {
;;;2134                  gMCUBufR[192] = c;
;;;2135                  gMCUBufG[192] = c;
;;;2136                  gMCUBufB[192] = c;
;;;2137                  break;
;;;2138               }
;;;2139               case 4:
;;;2140               {
;;;2141                  cbG = ((c * 88U) >> 8U) - 44U;
;;;2142                  gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
;;;2143                  gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
;;;2144                  gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
;;;2145                  gMCUBufG[192] = subAndClamp(gMCUBufG[192], cbG);
;;;2146   
;;;2147                  cbB = (c + ((c * 198U) >> 8U)) - 227U;
;;;2148                  gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
;;;2149                  gMCUBufB[64] = addAndClamp(gMCUBufB[64], cbB);
;;;2150                  gMCUBufB[128] = addAndClamp(gMCUBufB[128], cbB);
;;;2151                  gMCUBufB[192] = addAndClamp(gMCUBufB[192], cbB);
;;;2152   
;;;2153                  break;
;;;2154               }
;;;2155               case 5:
;;;2156               {
;;;2157                  crR = (c + ((c * 103U) >> 8U)) - 179;
;;;2158                  gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
;;;2159                  gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
;;;2160                  gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
;;;2161                  gMCUBufR[192] = addAndClamp(gMCUBufR[192], crR);
;;;2162   
;;;2163                  crG = ((c * 183U) >> 8U) - 91;
;;;2164                  gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
;;;2165                  gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
;;;2166                  gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
;;;2167                  gMCUBufG[192] = subAndClamp(gMCUBufG[192], crG);
;;;2168   
;;;2169                  break;
;;;2170               }
;;;2171            }
;;;2172            break;
;;;2173         }
;;;2174      }
;;;2175   }
00025e  b015              ADD      sp,sp,#0x54
000260  bdf0              POP      {r4-r7,pc}
                  |L16.610|
000262  9d14              LDR      r5,[sp,#0x50]         ;2063
000264  2d00              CMP      r5,#0                 ;2063
000266  d07c              BEQ      |L16.866|
000268  2d01              CMP      r5,#1                 ;2063
00026a  d07b              BEQ      |L16.868|
00026c  2d02              CMP      r5,#2                 ;2063
00026e  d010              BEQ      |L16.658|
000270  2d03              CMP      r5,#3                 ;2063
000272  d1f4              BNE      |L16.606|
000274  2367              MOVS     r3,#0x67              ;2093
000276  4343              MULS     r3,r0,r3              ;2093
000278  0a1b              LSRS     r3,r3,#8              ;2093
00027a  181b              ADDS     r3,r3,r0              ;2093
00027c  4665              MOV      r5,r12                ;2094
00027e  3bb3              SUBS     r3,r3,#0xb3           ;2094
000280  18ed              ADDS     r5,r5,r3              ;2094
000282  4e5f              LDR      r6,|L16.1024|
000284  b2af              UXTH     r7,r5                 ;2094
000286  2fff              CMP      r7,#0xff              ;2094
000288  d94d              BLS      |L16.806|
00028a  2d00              CMP      r5,#0                 ;2094
00028c  da47              BGE      |L16.798|
00028e  2500              MOVS     r5,#0                 ;2094
000290  e04a              B        |L16.808|
                  |L16.658|
000292  2558              MOVS     r5,#0x58              ;2081
000294  4345              MULS     r5,r0,r5              ;2081
000296  0a2d              LSRS     r5,r5,#8              ;2081
000298  460e              MOV      r6,r1                 ;2082
00029a  3d2c              SUBS     r5,r5,#0x2c           ;2082
00029c  1b51              SUBS     r1,r2,r5              ;2082
00029e  b28a              UXTH     r2,r1                 ;2082
0002a0  2aff              CMP      r2,#0xff              ;2082
0002a2  d907              BLS      |L16.692|
0002a4  2900              CMP      r1,#0                 ;2082
0002a6  da01              BGE      |L16.684|
0002a8  2100              MOVS     r1,#0                 ;2082
0002aa  e004              B        |L16.694|
                  |L16.684|
0002ac  29ff              CMP      r1,#0xff              ;2082
0002ae  dd01              BLE      |L16.692|
0002b0  21ff              MOVS     r1,#0xff              ;2082
0002b2  e000              B        |L16.694|
                  |L16.692|
0002b4  b2c9              UXTB     r1,r1                 ;2082
                  |L16.694|
0002b6  7031              STRB     r1,[r6,#0]            ;2082
0002b8  990d              LDR      r1,[sp,#0x34]         ;2082
0002ba  1b49              SUBS     r1,r1,r5              ;2082
0002bc  b28a              UXTH     r2,r1                 ;2082
0002be  2aff              CMP      r2,#0xff              ;2082
0002c0  d907              BLS      |L16.722|
0002c2  2900              CMP      r1,#0                 ;2082
0002c4  da01              BGE      |L16.714|
0002c6  2100              MOVS     r1,#0                 ;2082
0002c8  e004              B        |L16.724|
                  |L16.714|
0002ca  29ff              CMP      r1,#0xff              ;2082
0002cc  dd01              BLE      |L16.722|
0002ce  21ff              MOVS     r1,#0xff              ;2082
0002d0  e000              B        |L16.724|
                  |L16.722|
0002d2  b2c9              UXTB     r1,r1                 ;2082
                  |L16.724|
0002d4  7021              STRB     r1,[r4,#0]            ;2083
0002d6  21c6              MOVS     r1,#0xc6              ;2085
0002d8  4341              MULS     r1,r0,r1              ;2085
0002da  0a09              LSRS     r1,r1,#8              ;2085
0002dc  1808              ADDS     r0,r1,r0              ;2085
0002de  38e3              SUBS     r0,r0,#0xe3           ;2086
0002e0  1819              ADDS     r1,r3,r0              ;2086
0002e2  4a49              LDR      r2,|L16.1032|
0002e4  b28b              UXTH     r3,r1                 ;2086
0002e6  2bff              CMP      r3,#0xff              ;2086
0002e8  d907              BLS      |L16.762|
0002ea  2900              CMP      r1,#0                 ;2086
0002ec  da01              BGE      |L16.754|
0002ee  2100              MOVS     r1,#0                 ;2086
0002f0  e004              B        |L16.764|
                  |L16.754|
0002f2  29ff              CMP      r1,#0xff              ;2086
0002f4  dd01              BLE      |L16.762|
0002f6  21ff              MOVS     r1,#0xff              ;2086
0002f8  e000              B        |L16.764|
                  |L16.762|
0002fa  b2c9              UXTB     r1,r1                 ;2086
                  |L16.764|
0002fc  7011              STRB     r1,[r2,#0]            ;2086
0002fe  9910              LDR      r1,[sp,#0x40]         ;2086
000300  1808              ADDS     r0,r1,r0              ;2086
000302  b281              UXTH     r1,r0                 ;2086
000304  29ff              CMP      r1,#0xff              ;2086
000306  d907              BLS      |L16.792|
000308  2800              CMP      r0,#0                 ;2086
00030a  da01              BGE      |L16.784|
00030c  2000              MOVS     r0,#0                 ;2086
00030e  e004              B        |L16.794|
                  |L16.784|
000310  28ff              CMP      r0,#0xff              ;2086
000312  dd01              BLE      |L16.792|
000314  20ff              MOVS     r0,#0xff              ;2086
000316  e000              B        |L16.794|
                  |L16.792|
000318  b2c0              UXTB     r0,r0                 ;2086
                  |L16.794|
00031a  9902              LDR      r1,[sp,#8]            ;2089
00031c  e183              B        |L16.1574|
                  |L16.798|
00031e  2dff              CMP      r5,#0xff              ;2089
000320  dd01              BLE      |L16.806|
000322  25ff              MOVS     r5,#0xff              ;2089
000324  e000              B        |L16.808|
                  |L16.806|
000326  b2ed              UXTB     r5,r5                 ;2089
                  |L16.808|
000328  7035              STRB     r5,[r6,#0]            ;2094
00032a  9d12              LDR      r5,[sp,#0x48]         ;2094
00032c  18eb              ADDS     r3,r5,r3              ;2094
00032e  b29d              UXTH     r5,r3                 ;2094
000330  2dff              CMP      r5,#0xff              ;2094
000332  d907              BLS      |L16.836|
000334  2b00              CMP      r3,#0                 ;2094
000336  da01              BGE      |L16.828|
000338  2300              MOVS     r3,#0                 ;2094
00033a  e004              B        |L16.838|
                  |L16.828|
00033c  2bff              CMP      r3,#0xff              ;2094
00033e  dd01              BLE      |L16.836|
000340  23ff              MOVS     r3,#0xff              ;2094
000342  e000              B        |L16.838|
                  |L16.836|
000344  b2db              UXTB     r3,r3                 ;2094
                  |L16.838|
000346  9d03              LDR      r5,[sp,#0xc]          ;2095
000348  702b              STRB     r3,[r5,#0]            ;2095
00034a  23b7              MOVS     r3,#0xb7              ;2097
00034c  4358              MULS     r0,r3,r0              ;2097
00034e  0a00              LSRS     r0,r0,#8              ;2097
000350  385b              SUBS     r0,r0,#0x5b           ;2097
000352  1a12              SUBS     r2,r2,r0              ;2097
000354  b293              UXTH     r3,r2                 ;2097
000356  2bff              CMP      r3,#0xff              ;2097
000358  d909              BLS      |L16.878|
00035a  2a00              CMP      r2,#0                 ;2097
00035c  da03              BGE      |L16.870|
00035e  2200              MOVS     r2,#0                 ;2097
000360  e006              B        |L16.880|
                  |L16.866|
000362  e02b              B        |L16.956|
                  |L16.868|
000364  e02f              B        |L16.966|
                  |L16.870|
000366  2aff              CMP      r2,#0xff              ;2097
000368  dd01              BLE      |L16.878|
00036a  22ff              MOVS     r2,#0xff              ;2097
00036c  e000              B        |L16.880|
                  |L16.878|
00036e  b2d2              UXTB     r2,r2                 ;2097
                  |L16.880|
000370  700a              STRB     r2,[r1,#0]            ;2098
000372  990d              LDR      r1,[sp,#0x34]         ;2098
000374  1a08              SUBS     r0,r1,r0              ;2098
000376  b281              UXTH     r1,r0                 ;2098
000378  29ff              CMP      r1,#0xff              ;2098
00037a  d907              BLS      |L16.908|
00037c  2800              CMP      r0,#0                 ;2098
00037e  da01              BGE      |L16.900|
000380  2000              MOVS     r0,#0                 ;2098
000382  e004              B        |L16.910|
                  |L16.900|
000384  28ff              CMP      r0,#0xff              ;2098
000386  dd01              BLE      |L16.908|
000388  20ff              MOVS     r0,#0xff              ;2098
00038a  e000              B        |L16.910|
                  |L16.908|
00038c  b2c0              UXTB     r0,r0                 ;2098
                  |L16.910|
00038e  7020              STRB     r0,[r4,#0]            ;2099
                  |L16.912|
000390  b015              ADD      sp,sp,#0x54
000392  bdf0              POP      {r4-r7,pc}
                  |L16.916|
000394  4e21              LDR      r6,|L16.1052|
000396  9607              STR      r6,[sp,#0x1c]         ;2135
000398  7836              LDRB     r6,[r6,#0]            ;2135
00039a  960c              STR      r6,[sp,#0x30]         ;1989
00039c  4e20              LDR      r6,|L16.1056|
00039e  9f14              LDR      r7,[sp,#0x50]         ;2135
0003a0  9606              STR      r6,[sp,#0x18]         ;1977
0003a2  4e20              LDR      r6,|L16.1060|
0003a4  9608              STR      r6,[sp,#0x20]         ;2109
0003a6  2f06              CMP      r7,#6                 ;2109
0003a8  d2f2              BCS      |L16.912|
0003aa  003e              MOVS     r6,r7                 ;2109
0003ac  447e              ADD      r6,r6,pc              ;2109
0003ae  7936              LDRB     r6,[r6,#4]            ;2109
0003b0  19b6              ADDS     r6,r6,r6              ;2109
0003b2  44b7              ADD      pc,pc,r6              ;2109
0003b4  0308020d          DCB      0x03,0x08,0x02,0x0d
0003b8  13b2              DCB      0x13,0xb2
0003ba  e6ca              B        |L16.338|
                  |L16.956|
0003bc  4a10              LDR      r2,|L16.1024|
0003be  7010              STRB     r0,[r2,#0]            ;2113
0003c0  7008              STRB     r0,[r1,#0]            ;2114
0003c2  4911              LDR      r1,|L16.1032|
0003c4  e12f              B        |L16.1574|
                  |L16.966|
0003c6  9903              LDR      r1,[sp,#0xc]          ;2120
0003c8  7008              STRB     r0,[r1,#0]            ;2120
0003ca  7020              STRB     r0,[r4,#0]            ;2121
0003cc  9902              LDR      r1,[sp,#8]            ;2123
0003ce  e12a              B        |L16.1574|
0003d0  9908              LDR      r1,[sp,#0x20]         ;2134
0003d2  7008              STRB     r0,[r1,#0]            ;2134
0003d4  9907              LDR      r1,[sp,#0x1c]         ;2135
0003d6  7008              STRB     r0,[r1,#0]            ;2135
0003d8  9906              LDR      r1,[sp,#0x18]         ;2137
0003da  e124              B        |L16.1574|
0003dc  2658              MOVS     r6,#0x58              ;2141
0003de  4346              MULS     r6,r0,r6              ;2141
0003e0  0a36              LSRS     r6,r6,#8              ;2141
0003e2  460f              MOV      r7,r1                 ;2142
0003e4  3e2c              SUBS     r6,r6,#0x2c           ;2142
0003e6  1b91              SUBS     r1,r2,r6              ;2142
0003e8  b28a              UXTH     r2,r1                 ;2142
0003ea  2aff              CMP      r2,#0xff              ;2142
0003ec  d920              BLS      |L16.1072|
0003ee  2900              CMP      r1,#0                 ;2142
0003f0  da1a              BGE      |L16.1064|
0003f2  2100              MOVS     r1,#0                 ;2142
0003f4  e01d              B        |L16.1074|
0003f6  0000              DCW      0x0000
                  |L16.1016|
                          DCD      ||.bss||
                  |L16.1020|
                          DCD      ||.data||
                  |L16.1024|
                          DCD      ||.bss||+0x80
                  |L16.1028|
                          DCD      ||.bss||+0x180
                  |L16.1032|
                          DCD      ||.bss||+0x280
                  |L16.1036|
                          DCD      ||.bss||+0x100
                  |L16.1040|
                          DCD      ||.bss||+0x300
                  |L16.1044|
                          DCD      ||.bss||+0xc0
                  |L16.1048|
                          DCD      ||.bss||+0x2c0
                  |L16.1052|
                          DCD      ||.bss||+0x240
                  |L16.1056|
                          DCD      ||.bss||+0x340
                  |L16.1060|
                          DCD      ||.bss||+0x140
                  |L16.1064|
000428  29ff              CMP      r1,#0xff              ;2142
00042a  dd01              BLE      |L16.1072|
00042c  21ff              MOVS     r1,#0xff              ;2142
00042e  e000              B        |L16.1074|
                  |L16.1072|
000430  b2c9              UXTB     r1,r1                 ;2142
                  |L16.1074|
000432  7039              STRB     r1,[r7,#0]            ;2142
000434  990d              LDR      r1,[sp,#0x34]         ;2142
000436  1b89              SUBS     r1,r1,r6              ;2142
000438  b28a              UXTH     r2,r1                 ;2142
00043a  2aff              CMP      r2,#0xff              ;2142
00043c  d907              BLS      |L16.1102|
00043e  2900              CMP      r1,#0                 ;2142
000440  da01              BGE      |L16.1094|
000442  2100              MOVS     r1,#0                 ;2142
000444  e004              B        |L16.1104|
                  |L16.1094|
000446  29ff              CMP      r1,#0xff              ;2142
000448  dd01              BLE      |L16.1102|
00044a  21ff              MOVS     r1,#0xff              ;2142
00044c  e000              B        |L16.1104|
                  |L16.1102|
00044e  b2c9              UXTB     r1,r1                 ;2142
                  |L16.1104|
000450  7021              STRB     r1,[r4,#0]            ;2143
000452  990a              LDR      r1,[sp,#0x28]         ;2143
000454  1b89              SUBS     r1,r1,r6              ;2143
000456  b28a              UXTH     r2,r1                 ;2143
000458  2aff              CMP      r2,#0xff              ;2143
00045a  d907              BLS      |L16.1132|
00045c  2900              CMP      r1,#0                 ;2143
00045e  da01              BGE      |L16.1124|
000460  2100              MOVS     r1,#0                 ;2143
000462  e004              B        |L16.1134|
                  |L16.1124|
000464  29ff              CMP      r1,#0xff              ;2143
000466  dd01              BLE      |L16.1132|
000468  21ff              MOVS     r1,#0xff              ;2143
00046a  e000              B        |L16.1134|
                  |L16.1132|
00046c  b2c9              UXTB     r1,r1                 ;2143
                  |L16.1134|
00046e  7029              STRB     r1,[r5,#0]            ;2144
000470  990c              LDR      r1,[sp,#0x30]         ;2144
000472  1b89              SUBS     r1,r1,r6              ;2144
000474  b28a              UXTH     r2,r1                 ;2144
000476  2aff              CMP      r2,#0xff              ;2144
000478  d907              BLS      |L16.1162|
00047a  2900              CMP      r1,#0                 ;2144
00047c  da01              BGE      |L16.1154|
00047e  2100              MOVS     r1,#0                 ;2144
000480  e004              B        |L16.1164|
                  |L16.1154|
000482  29ff              CMP      r1,#0xff              ;2144
000484  dd01              BLE      |L16.1162|
000486  21ff              MOVS     r1,#0xff              ;2144
000488  e000              B        |L16.1164|
                  |L16.1162|
00048a  b2c9              UXTB     r1,r1                 ;2144
                  |L16.1164|
00048c  9a07              LDR      r2,[sp,#0x1c]         ;2145
00048e  7011              STRB     r1,[r2,#0]            ;2145
000490  21c6              MOVS     r1,#0xc6              ;2147
000492  4341              MULS     r1,r0,r1              ;2147
000494  0a09              LSRS     r1,r1,#8              ;2147
000496  1808              ADDS     r0,r1,r0              ;2147
000498  38e3              SUBS     r0,r0,#0xe3           ;2148
00049a  1819              ADDS     r1,r3,r0              ;2148
00049c  4a63              LDR      r2,|L16.1580|
00049e  b28b              UXTH     r3,r1                 ;2148
0004a0  2bff              CMP      r3,#0xff              ;2148
0004a2  d907              BLS      |L16.1204|
0004a4  2900              CMP      r1,#0                 ;2148
0004a6  da01              BGE      |L16.1196|
0004a8  2100              MOVS     r1,#0                 ;2148
0004aa  e004              B        |L16.1206|
                  |L16.1196|
0004ac  29ff              CMP      r1,#0xff              ;2148
0004ae  dd01              BLE      |L16.1204|
0004b0  21ff              MOVS     r1,#0xff              ;2148
0004b2  e000              B        |L16.1206|
                  |L16.1204|
0004b4  b2c9              UXTB     r1,r1                 ;2148
                  |L16.1206|
0004b6  7011              STRB     r1,[r2,#0]            ;2148
0004b8  9910              LDR      r1,[sp,#0x40]         ;2148
0004ba  1809              ADDS     r1,r1,r0              ;2148
0004bc  b28a              UXTH     r2,r1                 ;2148
0004be  2aff              CMP      r2,#0xff              ;2148
0004c0  d907              BLS      |L16.1234|
0004c2  2900              CMP      r1,#0                 ;2148
0004c4  da01              BGE      |L16.1226|
0004c6  2100              MOVS     r1,#0                 ;2148
0004c8  e004              B        |L16.1236|
                  |L16.1226|
0004ca  29ff              CMP      r1,#0xff              ;2148
0004cc  dd01              BLE      |L16.1234|
0004ce  21ff              MOVS     r1,#0xff              ;2148
0004d0  e000              B        |L16.1236|
                  |L16.1234|
0004d2  b2c9              UXTB     r1,r1                 ;2148
                  |L16.1236|
0004d4  9a02              LDR      r2,[sp,#8]            ;2149
0004d6  7011              STRB     r1,[r2,#0]            ;2149
0004d8  990f              LDR      r1,[sp,#0x3c]         ;2149
0004da  1809              ADDS     r1,r1,r0              ;2149
0004dc  b28a              UXTH     r2,r1                 ;2149
0004de  2aff              CMP      r2,#0xff              ;2149
0004e0  d907              BLS      |L16.1266|
0004e2  2900              CMP      r1,#0                 ;2149
0004e4  da01              BGE      |L16.1258|
0004e6  2100              MOVS     r1,#0                 ;2149
0004e8  e004              B        |L16.1268|
                  |L16.1258|
0004ea  29ff              CMP      r1,#0xff              ;2149
0004ec  dd01              BLE      |L16.1266|
0004ee  21ff              MOVS     r1,#0xff              ;2149
0004f0  e000              B        |L16.1268|
                  |L16.1266|
0004f2  b2c9              UXTB     r1,r1                 ;2149
                  |L16.1268|
0004f4  9a04              LDR      r2,[sp,#0x10]         ;2150
0004f6  7011              STRB     r1,[r2,#0]            ;2150
0004f8  9906              LDR      r1,[sp,#0x18]         ;2151
0004fa  7809              LDRB     r1,[r1,#0]            ;2151  ; gMCUBufB
0004fc  1808              ADDS     r0,r1,r0              ;2151
0004fe  b281              UXTH     r1,r0                 ;2151
000500  29ff              CMP      r1,#0xff              ;2151
000502  d907              BLS      |L16.1300|
000504  2800              CMP      r0,#0                 ;2151
000506  da01              BGE      |L16.1292|
000508  2000              MOVS     r0,#0                 ;2151
00050a  e004              B        |L16.1302|
                  |L16.1292|
00050c  28ff              CMP      r0,#0xff              ;2151
00050e  dd01              BLE      |L16.1300|
000510  20ff              MOVS     r0,#0xff              ;2151
000512  e000              B        |L16.1302|
                  |L16.1300|
000514  b2c0              UXTB     r0,r0                 ;2151
                  |L16.1302|
000516  9906              LDR      r1,[sp,#0x18]         ;2153
000518  e085              B        |L16.1574|
00051a  2367              MOVS     r3,#0x67              ;2157
00051c  4343              MULS     r3,r0,r3              ;2157
00051e  0a1b              LSRS     r3,r3,#8              ;2157
000520  181b              ADDS     r3,r3,r0              ;2157
000522  4666              MOV      r6,r12                ;2157
000524  3bb3              SUBS     r3,r3,#0xb3           ;2157
000526  18f6              ADDS     r6,r6,r3              ;2157
000528  b2b7              UXTH     r7,r6                 ;2157
00052a  2fff              CMP      r7,#0xff              ;2157
00052c  d907              BLS      |L16.1342|
00052e  2e00              CMP      r6,#0                 ;2157
000530  da01              BGE      |L16.1334|
000532  2600              MOVS     r6,#0                 ;2157
000534  e004              B        |L16.1344|
                  |L16.1334|
000536  2eff              CMP      r6,#0xff              ;2157
000538  dd01              BLE      |L16.1342|
00053a  26ff              MOVS     r6,#0xff              ;2157
00053c  e000              B        |L16.1344|
                  |L16.1342|
00053e  b2f6              UXTB     r6,r6                 ;2157
                  |L16.1344|
000540  4f3b              LDR      r7,|L16.1584|
000542  703e              STRB     r6,[r7,#0]            ;2158
000544  9e12              LDR      r6,[sp,#0x48]         ;2158
000546  18f6              ADDS     r6,r6,r3              ;2158
000548  b2b7              UXTH     r7,r6                 ;2158
00054a  2fff              CMP      r7,#0xff              ;2158
00054c  d907              BLS      |L16.1374|
00054e  2e00              CMP      r6,#0                 ;2158
000550  da01              BGE      |L16.1366|
000552  2600              MOVS     r6,#0                 ;2158
000554  e004              B        |L16.1376|
                  |L16.1366|
000556  2eff              CMP      r6,#0xff              ;2158
000558  dd01              BLE      |L16.1374|
00055a  26ff              MOVS     r6,#0xff              ;2158
00055c  e000              B        |L16.1376|
                  |L16.1374|
00055e  b2f6              UXTB     r6,r6                 ;2158
                  |L16.1376|
000560  9f03              LDR      r7,[sp,#0xc]          ;2159
000562  703e              STRB     r6,[r7,#0]            ;2159
000564  9e11              LDR      r6,[sp,#0x44]         ;2159
000566  18f6              ADDS     r6,r6,r3              ;2159
000568  b2b7              UXTH     r7,r6                 ;2159
00056a  2fff              CMP      r7,#0xff              ;2159
00056c  d907              BLS      |L16.1406|
00056e  2e00              CMP      r6,#0                 ;2159
000570  da01              BGE      |L16.1398|
000572  2600              MOVS     r6,#0                 ;2159
000574  e004              B        |L16.1408|
                  |L16.1398|
000576  2eff              CMP      r6,#0xff              ;2159
000578  dd01              BLE      |L16.1406|
00057a  26ff              MOVS     r6,#0xff              ;2159
00057c  e000              B        |L16.1408|
                  |L16.1406|
00057e  b2f6              UXTB     r6,r6                 ;2159
                  |L16.1408|
000580  9f05              LDR      r7,[sp,#0x14]         ;2160
000582  703e              STRB     r6,[r7,#0]            ;2160
000584  9e08              LDR      r6,[sp,#0x20]         ;2161
000586  7836              LDRB     r6,[r6,#0]            ;2161  ; gMCUBufR
000588  18f3              ADDS     r3,r6,r3              ;2161
00058a  b29e              UXTH     r6,r3                 ;2161
00058c  2eff              CMP      r6,#0xff              ;2161
00058e  d907              BLS      |L16.1440|
000590  2b00              CMP      r3,#0                 ;2161
000592  da01              BGE      |L16.1432|
000594  2300              MOVS     r3,#0                 ;2161
000596  e004              B        |L16.1442|
                  |L16.1432|
000598  2bff              CMP      r3,#0xff              ;2161
00059a  dd01              BLE      |L16.1440|
00059c  23ff              MOVS     r3,#0xff              ;2161
00059e  e000              B        |L16.1442|
                  |L16.1440|
0005a0  b2db              UXTB     r3,r3                 ;2161
                  |L16.1442|
0005a2  9e08              LDR      r6,[sp,#0x20]         ;2161
0005a4  7033              STRB     r3,[r6,#0]            ;2161
0005a6  23b7              MOVS     r3,#0xb7              ;2163
0005a8  4358              MULS     r0,r3,r0              ;2163
0005aa  0a00              LSRS     r0,r0,#8              ;2163
0005ac  460b              MOV      r3,r1                 ;2164
0005ae  385b              SUBS     r0,r0,#0x5b           ;2164
0005b0  1a11              SUBS     r1,r2,r0              ;2164
0005b2  b28a              UXTH     r2,r1                 ;2164
0005b4  2aff              CMP      r2,#0xff              ;2164
0005b6  d907              BLS      |L16.1480|
0005b8  2900              CMP      r1,#0                 ;2164
0005ba  da01              BGE      |L16.1472|
0005bc  2100              MOVS     r1,#0                 ;2164
0005be  e004              B        |L16.1482|
                  |L16.1472|
0005c0  29ff              CMP      r1,#0xff              ;2164
0005c2  dd01              BLE      |L16.1480|
0005c4  21ff              MOVS     r1,#0xff              ;2164
0005c6  e000              B        |L16.1482|
                  |L16.1480|
0005c8  b2c9              UXTB     r1,r1                 ;2164
                  |L16.1482|
0005ca  7019              STRB     r1,[r3,#0]            ;2164
0005cc  990d              LDR      r1,[sp,#0x34]         ;2164
0005ce  1a09              SUBS     r1,r1,r0              ;2164
0005d0  b28a              UXTH     r2,r1                 ;2164
0005d2  2aff              CMP      r2,#0xff              ;2164
0005d4  d907              BLS      |L16.1510|
0005d6  2900              CMP      r1,#0                 ;2164
0005d8  da01              BGE      |L16.1502|
0005da  2100              MOVS     r1,#0                 ;2164
0005dc  e004              B        |L16.1512|
                  |L16.1502|
0005de  29ff              CMP      r1,#0xff              ;2164
0005e0  dd01              BLE      |L16.1510|
0005e2  21ff              MOVS     r1,#0xff              ;2164
0005e4  e000              B        |L16.1512|
                  |L16.1510|
0005e6  b2c9              UXTB     r1,r1                 ;2164
                  |L16.1512|
0005e8  7021              STRB     r1,[r4,#0]            ;2165
0005ea  990a              LDR      r1,[sp,#0x28]         ;2165
0005ec  1a09              SUBS     r1,r1,r0              ;2165
0005ee  b28a              UXTH     r2,r1                 ;2165
0005f0  2aff              CMP      r2,#0xff              ;2165
0005f2  d907              BLS      |L16.1540|
0005f4  2900              CMP      r1,#0                 ;2165
0005f6  da01              BGE      |L16.1532|
0005f8  2100              MOVS     r1,#0                 ;2165
0005fa  e004              B        |L16.1542|
                  |L16.1532|
0005fc  29ff              CMP      r1,#0xff              ;2165
0005fe  dd01              BLE      |L16.1540|
000600  21ff              MOVS     r1,#0xff              ;2165
000602  e000              B        |L16.1542|
                  |L16.1540|
000604  b2c9              UXTB     r1,r1                 ;2165
                  |L16.1542|
000606  7029              STRB     r1,[r5,#0]            ;2166
000608  990c              LDR      r1,[sp,#0x30]         ;2166
00060a  1a08              SUBS     r0,r1,r0              ;2166
00060c  b281              UXTH     r1,r0                 ;2166
00060e  29ff              CMP      r1,#0xff              ;2166
000610  d907              BLS      |L16.1570|
000612  2800              CMP      r0,#0                 ;2166
000614  da01              BGE      |L16.1562|
000616  2000              MOVS     r0,#0                 ;2166
000618  e004              B        |L16.1572|
                  |L16.1562|
00061a  28ff              CMP      r0,#0xff              ;2166
00061c  dd01              BLE      |L16.1570|
00061e  20ff              MOVS     r0,#0xff              ;2166
000620  e000              B        |L16.1572|
                  |L16.1570|
000622  b2c0              UXTB     r0,r0                 ;2166
                  |L16.1572|
000624  9907              LDR      r1,[sp,#0x1c]         ;2166
                  |L16.1574|
000626  7008              STRB     r0,[r1,#0]            ;2151
000628  b015              ADD      sp,sp,#0x54
00062a  bdf0              POP      {r4-r7,pc}
;;;2176   
                          ENDP

                  |L16.1580|
                          DCD      ||.bss||+0x280
                  |L16.1584|
                          DCD      ||.bss||+0x80

                          AREA ||i.upsampleCb||, CODE, READONLY, ALIGN=2

                  upsampleCb PROC
                  |symbol_number.259|
;;;1535   #endif
;;;1536   static void upsampleCb(uint8 srcOfs, uint8 dstOfs)
000000  4a50              LDR      r2,|L17.324|
;;;1537   {
;;;1538      // Cb - affects G and B
;;;1539      uint8 x, y;
;;;1540      int16* pSrc = gCoeffBuf + srcOfs;
000002  0040              LSLS     r0,r0,#1
000004  1883              ADDS     r3,r0,r2
;;;1541      uint8* pDstG = gMCUBufG + dstOfs;
000006  4850              LDR      r0,|L17.328|
000008  b4f0              PUSH     {r4-r7}               ;1537
00000a  1842              ADDS     r2,r0,r1
;;;1542      uint8* pDstB = gMCUBufB + dstOfs;
00000c  484f              LDR      r0,|L17.332|
00000e  1841              ADDS     r1,r0,r1
;;;1543      for (y = 0; y < 4; y++)
000010  2000              MOVS     r0,#0
000012  4684              MOV      r12,r0
                  |L17.20|
;;;1544      {
;;;1545         for (x = 0; x < 4; x++)
000014  2600              MOVS     r6,#0
                  |L17.22|
;;;1546         {
;;;1547            uint8 cb = (uint8)*pSrc++;
000016  781c              LDRB     r4,[r3,#0]
;;;1548            int16 cbG, cbB;
;;;1549   
;;;1550            cbG = ((cb * 88U) >> 8U) - 44U;
000018  2058              MOVS     r0,#0x58
00001a  4360              MULS     r0,r4,r0
00001c  0a00              LSRS     r0,r0,#8
;;;1551            pDstG[0] = subAndClamp(pDstG[0], cbG);
00001e  7815              LDRB     r5,[r2,#0]
000020  382c              SUBS     r0,r0,#0x2c
000022  1a2d              SUBS     r5,r5,r0
000024  b2af              UXTH     r7,r5
000026  1c9b              ADDS     r3,r3,#2
000028  2fff              CMP      r7,#0xff
00002a  d907              BLS      |L17.60|
00002c  2d00              CMP      r5,#0
00002e  da01              BGE      |L17.52|
000030  2500              MOVS     r5,#0
000032  e004              B        |L17.62|
                  |L17.52|
000034  2dff              CMP      r5,#0xff
000036  dd01              BLE      |L17.60|
000038  25ff              MOVS     r5,#0xff
00003a  e000              B        |L17.62|
                  |L17.60|
00003c  b2ed              UXTB     r5,r5
                  |L17.62|
00003e  7015              STRB     r5,[r2,#0]
;;;1552            pDstG[1] = subAndClamp(pDstG[1], cbG);
000040  7855              LDRB     r5,[r2,#1]
000042  1a2d              SUBS     r5,r5,r0
000044  b2af              UXTH     r7,r5
000046  2fff              CMP      r7,#0xff
000048  d907              BLS      |L17.90|
00004a  2d00              CMP      r5,#0
00004c  da01              BGE      |L17.82|
00004e  2500              MOVS     r5,#0
000050  e004              B        |L17.92|
                  |L17.82|
000052  2dff              CMP      r5,#0xff
000054  dd01              BLE      |L17.90|
000056  25ff              MOVS     r5,#0xff
000058  e000              B        |L17.92|
                  |L17.90|
00005a  b2ed              UXTB     r5,r5
                  |L17.92|
00005c  7055              STRB     r5,[r2,#1]
;;;1553            pDstG[8] = subAndClamp(pDstG[8], cbG);
00005e  7a15              LDRB     r5,[r2,#8]
000060  1a2d              SUBS     r5,r5,r0
000062  b2af              UXTH     r7,r5
000064  2fff              CMP      r7,#0xff
000066  d907              BLS      |L17.120|
000068  2d00              CMP      r5,#0
00006a  da01              BGE      |L17.112|
00006c  2500              MOVS     r5,#0
00006e  e004              B        |L17.122|
                  |L17.112|
000070  2dff              CMP      r5,#0xff
000072  dd01              BLE      |L17.120|
000074  25ff              MOVS     r5,#0xff
000076  e000              B        |L17.122|
                  |L17.120|
000078  b2ed              UXTB     r5,r5
                  |L17.122|
00007a  7215              STRB     r5,[r2,#8]
;;;1554            pDstG[9] = subAndClamp(pDstG[9], cbG);
00007c  7a55              LDRB     r5,[r2,#9]
00007e  1a28              SUBS     r0,r5,r0
000080  b285              UXTH     r5,r0
000082  2dff              CMP      r5,#0xff
000084  d907              BLS      |L17.150|
000086  2800              CMP      r0,#0
000088  da01              BGE      |L17.142|
00008a  2000              MOVS     r0,#0
00008c  e004              B        |L17.152|
                  |L17.142|
00008e  28ff              CMP      r0,#0xff
000090  dd01              BLE      |L17.150|
000092  20ff              MOVS     r0,#0xff
000094  e000              B        |L17.152|
                  |L17.150|
000096  b2c0              UXTB     r0,r0
                  |L17.152|
000098  7250              STRB     r0,[r2,#9]
;;;1555   
;;;1556            cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
00009a  20c6              MOVS     r0,#0xc6
00009c  4360              MULS     r0,r4,r0
00009e  0a00              LSRS     r0,r0,#8
0000a0  1900              ADDS     r0,r0,r4
;;;1557            pDstB[0] = addAndClamp(pDstB[0], cbB);
0000a2  780c              LDRB     r4,[r1,#0]
0000a4  38e3              SUBS     r0,r0,#0xe3
0000a6  1824              ADDS     r4,r4,r0
0000a8  b2a5              UXTH     r5,r4
0000aa  2dff              CMP      r5,#0xff
0000ac  d907              BLS      |L17.190|
0000ae  2c00              CMP      r4,#0
0000b0  da01              BGE      |L17.182|
0000b2  2400              MOVS     r4,#0
0000b4  e004              B        |L17.192|
                  |L17.182|
0000b6  2cff              CMP      r4,#0xff
0000b8  dd01              BLE      |L17.190|
0000ba  24ff              MOVS     r4,#0xff
0000bc  e000              B        |L17.192|
                  |L17.190|
0000be  b2e4              UXTB     r4,r4
                  |L17.192|
0000c0  700c              STRB     r4,[r1,#0]
;;;1558            pDstB[1] = addAndClamp(pDstB[1], cbB);
0000c2  784c              LDRB     r4,[r1,#1]
0000c4  1824              ADDS     r4,r4,r0
0000c6  b2a5              UXTH     r5,r4
0000c8  2dff              CMP      r5,#0xff
0000ca  d907              BLS      |L17.220|
0000cc  2c00              CMP      r4,#0
0000ce  da01              BGE      |L17.212|
0000d0  2400              MOVS     r4,#0
0000d2  e004              B        |L17.222|
                  |L17.212|
0000d4  2cff              CMP      r4,#0xff
0000d6  dd01              BLE      |L17.220|
0000d8  24ff              MOVS     r4,#0xff
0000da  e000              B        |L17.222|
                  |L17.220|
0000dc  b2e4              UXTB     r4,r4
                  |L17.222|
0000de  704c              STRB     r4,[r1,#1]
;;;1559            pDstB[8] = addAndClamp(pDstB[8], cbB);
0000e0  7a0c              LDRB     r4,[r1,#8]
0000e2  1824              ADDS     r4,r4,r0
0000e4  b2a5              UXTH     r5,r4
0000e6  2dff              CMP      r5,#0xff
0000e8  d907              BLS      |L17.250|
0000ea  2c00              CMP      r4,#0
0000ec  da01              BGE      |L17.242|
0000ee  2400              MOVS     r4,#0
0000f0  e004              B        |L17.252|
                  |L17.242|
0000f2  2cff              CMP      r4,#0xff
0000f4  dd01              BLE      |L17.250|
0000f6  24ff              MOVS     r4,#0xff
0000f8  e000              B        |L17.252|
                  |L17.250|
0000fa  b2e4              UXTB     r4,r4
                  |L17.252|
0000fc  720c              STRB     r4,[r1,#8]
;;;1560            pDstB[9] = addAndClamp(pDstB[9], cbB);
0000fe  7a4c              LDRB     r4,[r1,#9]
000100  1820              ADDS     r0,r4,r0
000102  b284              UXTH     r4,r0
000104  2cff              CMP      r4,#0xff
000106  d907              BLS      |L17.280|
000108  2800              CMP      r0,#0
00010a  da01              BGE      |L17.272|
00010c  2000              MOVS     r0,#0
00010e  e004              B        |L17.282|
                  |L17.272|
000110  28ff              CMP      r0,#0xff
000112  dd01              BLE      |L17.280|
000114  20ff              MOVS     r0,#0xff
000116  e000              B        |L17.282|
                  |L17.280|
000118  b2c0              UXTB     r0,r0
                  |L17.282|
00011a  7248              STRB     r0,[r1,#9]
00011c  1c76              ADDS     r6,r6,#1
00011e  b2f6              UXTB     r6,r6                 ;1545
000120  1c89              ADDS     r1,r1,#2              ;1545
000122  1c92              ADDS     r2,r2,#2              ;1545
000124  2e04              CMP      r6,#4                 ;1545
000126  d200              BCS      |L17.298|
000128  e775              B        |L17.22|
                  |L17.298|
00012a  4660              MOV      r0,r12                ;1543
00012c  1c40              ADDS     r0,r0,#1              ;1543
00012e  b2c0              UXTB     r0,r0                 ;1543
000130  3108              ADDS     r1,r1,#8              ;1543
000132  3208              ADDS     r2,r2,#8              ;1543
000134  3308              ADDS     r3,r3,#8              ;1543
000136  4684              MOV      r12,r0                ;1543
000138  2804              CMP      r0,#4                 ;1543
00013a  d200              BCS      |L17.318|
00013c  e76a              B        |L17.20|
                  |L17.318|
;;;1561   
;;;1562            pDstG += 2;
;;;1563            pDstB += 2;
;;;1564         }
;;;1565   
;;;1566         pSrc = pSrc - 4 + 8;
;;;1567         pDstG = pDstG - 8 + 16;
;;;1568         pDstB = pDstB - 8 + 16;
;;;1569      }
;;;1570   }   
00013e  bcf0              POP      {r4-r7}
000140  4770              BX       lr
;;;1571   /*----------------------------------------------------------------------------*/
                          ENDP

000142  0000              DCW      0x0000
                  |L17.324|
                          DCD      ||.bss||
                  |L17.328|
                          DCD      ||.bss||+0x180
                  |L17.332|
                          DCD      ||.bss||+0x280

                          AREA ||i.upsampleCbH||, CODE, READONLY, ALIGN=2

                  upsampleCbH PROC
;;;1572   // Cb upsample and accumulate, 4x8 to 8x8
;;;1573   static void upsampleCbH(uint8 srcOfs, uint8 dstOfs)
000000  4a30              LDR      r2,|L18.196|
;;;1574   {
;;;1575      // Cb - affects G and B
;;;1576      uint8 x, y;
;;;1577      int16* pSrc = gCoeffBuf + srcOfs;
000002  0040              LSLS     r0,r0,#1
000004  1883              ADDS     r3,r0,r2
;;;1578      uint8* pDstG = gMCUBufG + dstOfs;
000006  4830              LDR      r0,|L18.200|
000008  b4f0              PUSH     {r4-r7}               ;1574
00000a  1842              ADDS     r2,r0,r1
;;;1579      uint8* pDstB = gMCUBufB + dstOfs;
00000c  482f              LDR      r0,|L18.204|
00000e  1841              ADDS     r1,r0,r1
;;;1580      for (y = 0; y < 8; y++)
000010  2000              MOVS     r0,#0
000012  4684              MOV      r12,r0
                  |L18.20|
;;;1581      {
;;;1582         for (x = 0; x < 4; x++)
000014  2600              MOVS     r6,#0
                  |L18.22|
;;;1583         {
;;;1584            uint8 cb = (uint8)*pSrc++;
000016  781c              LDRB     r4,[r3,#0]
;;;1585            int16 cbG, cbB;
;;;1586   
;;;1587            cbG = ((cb * 88U) >> 8U) - 44U;
000018  2058              MOVS     r0,#0x58
00001a  4360              MULS     r0,r4,r0
00001c  0a00              LSRS     r0,r0,#8
;;;1588            pDstG[0] = subAndClamp(pDstG[0], cbG);
00001e  7815              LDRB     r5,[r2,#0]
000020  382c              SUBS     r0,r0,#0x2c
000022  1a2d              SUBS     r5,r5,r0
000024  b2af              UXTH     r7,r5
000026  1c9b              ADDS     r3,r3,#2
000028  2fff              CMP      r7,#0xff
00002a  d907              BLS      |L18.60|
00002c  2d00              CMP      r5,#0
00002e  da01              BGE      |L18.52|
000030  2500              MOVS     r5,#0
000032  e004              B        |L18.62|
                  |L18.52|
000034  2dff              CMP      r5,#0xff
000036  dd01              BLE      |L18.60|
000038  25ff              MOVS     r5,#0xff
00003a  e000              B        |L18.62|
                  |L18.60|
00003c  b2ed              UXTB     r5,r5
                  |L18.62|
00003e  7015              STRB     r5,[r2,#0]
;;;1589            pDstG[1] = subAndClamp(pDstG[1], cbG);
000040  7855              LDRB     r5,[r2,#1]
000042  1a28              SUBS     r0,r5,r0
000044  b285              UXTH     r5,r0
000046  2dff              CMP      r5,#0xff
000048  d907              BLS      |L18.90|
00004a  2800              CMP      r0,#0
00004c  da01              BGE      |L18.82|
00004e  2000              MOVS     r0,#0
000050  e004              B        |L18.92|
                  |L18.82|
000052  28ff              CMP      r0,#0xff
000054  dd01              BLE      |L18.90|
000056  20ff              MOVS     r0,#0xff
000058  e000              B        |L18.92|
                  |L18.90|
00005a  b2c0              UXTB     r0,r0
                  |L18.92|
00005c  7050              STRB     r0,[r2,#1]
;;;1590   
;;;1591            cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
00005e  20c6              MOVS     r0,#0xc6
000060  4360              MULS     r0,r4,r0
000062  0a00              LSRS     r0,r0,#8
000064  1900              ADDS     r0,r0,r4
;;;1592            pDstB[0] = addAndClamp(pDstB[0], cbB);
000066  780c              LDRB     r4,[r1,#0]
000068  38e3              SUBS     r0,r0,#0xe3
00006a  1824              ADDS     r4,r4,r0
00006c  b2a5              UXTH     r5,r4
00006e  2dff              CMP      r5,#0xff
000070  d907              BLS      |L18.130|
000072  2c00              CMP      r4,#0
000074  da01              BGE      |L18.122|
000076  2400              MOVS     r4,#0
000078  e004              B        |L18.132|
                  |L18.122|
00007a  2cff              CMP      r4,#0xff
00007c  dd01              BLE      |L18.130|
00007e  24ff              MOVS     r4,#0xff
000080  e000              B        |L18.132|
                  |L18.130|
000082  b2e4              UXTB     r4,r4
                  |L18.132|
000084  700c              STRB     r4,[r1,#0]
;;;1593            pDstB[1] = addAndClamp(pDstB[1], cbB);
000086  784c              LDRB     r4,[r1,#1]
000088  1820              ADDS     r0,r4,r0
00008a  b284              UXTH     r4,r0
00008c  2cff              CMP      r4,#0xff
00008e  d907              BLS      |L18.160|
000090  2800              CMP      r0,#0
000092  da01              BGE      |L18.152|
000094  2000              MOVS     r0,#0
000096  e004              B        |L18.162|
                  |L18.152|
000098  28ff              CMP      r0,#0xff
00009a  dd01              BLE      |L18.160|
00009c  20ff              MOVS     r0,#0xff
00009e  e000              B        |L18.162|
                  |L18.160|
0000a0  b2c0              UXTB     r0,r0
                  |L18.162|
0000a2  7048              STRB     r0,[r1,#1]
0000a4  1c76              ADDS     r6,r6,#1
0000a6  b2f6              UXTB     r6,r6                 ;1582
0000a8  1c89              ADDS     r1,r1,#2              ;1582
0000aa  1c92              ADDS     r2,r2,#2              ;1582
0000ac  2e04              CMP      r6,#4                 ;1582
0000ae  d3b2              BCC      |L18.22|
0000b0  4660              MOV      r0,r12                ;1580
0000b2  1c40              ADDS     r0,r0,#1              ;1580
0000b4  b2c0              UXTB     r0,r0                 ;1580
0000b6  3308              ADDS     r3,r3,#8              ;1580
0000b8  4684              MOV      r12,r0                ;1580
0000ba  2808              CMP      r0,#8                 ;1580
0000bc  d3aa              BCC      |L18.20|
;;;1594   
;;;1595            pDstG += 2;
;;;1596            pDstB += 2;
;;;1597         }
;;;1598   
;;;1599         pSrc = pSrc - 4 + 8;
;;;1600      }
;;;1601   }   
0000be  bcf0              POP      {r4-r7}
0000c0  4770              BX       lr
;;;1602   /*----------------------------------------------------------------------------*/
                          ENDP

0000c2  0000              DCW      0x0000
                  |L18.196|
                          DCD      ||.bss||
                  |L18.200|
                          DCD      ||.bss||+0x180
                  |L18.204|
                          DCD      ||.bss||+0x280

                          AREA ||i.upsampleCbV||, CODE, READONLY, ALIGN=2

                  upsampleCbV PROC
;;;1603   // Cb upsample and accumulate, 8x4 to 8x8
;;;1604   static void upsampleCbV(uint8 srcOfs, uint8 dstOfs)
000000  b4f0              PUSH     {r4-r7}
;;;1605   {
;;;1606      // Cb - affects G and B
;;;1607      uint8 x, y;
;;;1608      int16* pSrc = gCoeffBuf + srcOfs;
000002  4a30              LDR      r2,|L19.196|
000004  0040              LSLS     r0,r0,#1
000006  1886              ADDS     r6,r0,r2
;;;1609      uint8* pDstG = gMCUBufG + dstOfs;
000008  482f              LDR      r0,|L19.200|
;;;1610      uint8* pDstB = gMCUBufB + dstOfs;
00000a  4a30              LDR      r2,|L19.204|
00000c  1840              ADDS     r0,r0,r1              ;1609
00000e  1851              ADDS     r1,r2,r1
;;;1611      for (y = 0; y < 4; y++)
000010  2200              MOVS     r2,#0
000012  4694              MOV      r12,r2
                  |L19.20|
;;;1612      {
;;;1613         for (x = 0; x < 8; x++)
000014  2500              MOVS     r5,#0
                  |L19.22|
;;;1614         {
;;;1615            uint8 cb = (uint8)*pSrc++;
000016  7833              LDRB     r3,[r6,#0]
;;;1616            int16 cbG, cbB;
;;;1617   
;;;1618            cbG = ((cb * 88U) >> 8U) - 44U;
000018  2258              MOVS     r2,#0x58
00001a  435a              MULS     r2,r3,r2
00001c  0a12              LSRS     r2,r2,#8
;;;1619            pDstG[0] = subAndClamp(pDstG[0], cbG);
00001e  7804              LDRB     r4,[r0,#0]
000020  3a2c              SUBS     r2,r2,#0x2c
000022  1aa4              SUBS     r4,r4,r2
000024  b2a7              UXTH     r7,r4
000026  1cb6              ADDS     r6,r6,#2
000028  2fff              CMP      r7,#0xff
00002a  d907              BLS      |L19.60|
00002c  2c00              CMP      r4,#0
00002e  da01              BGE      |L19.52|
000030  2400              MOVS     r4,#0
000032  e004              B        |L19.62|
                  |L19.52|
000034  2cff              CMP      r4,#0xff
000036  dd01              BLE      |L19.60|
000038  24ff              MOVS     r4,#0xff
00003a  e000              B        |L19.62|
                  |L19.60|
00003c  b2e4              UXTB     r4,r4
                  |L19.62|
00003e  7004              STRB     r4,[r0,#0]
;;;1620            pDstG[8] = subAndClamp(pDstG[8], cbG);
000040  7a04              LDRB     r4,[r0,#8]
000042  1aa2              SUBS     r2,r4,r2
000044  b294              UXTH     r4,r2
000046  2cff              CMP      r4,#0xff
000048  d907              BLS      |L19.90|
00004a  2a00              CMP      r2,#0
00004c  da01              BGE      |L19.82|
00004e  2200              MOVS     r2,#0
000050  e004              B        |L19.92|
                  |L19.82|
000052  2aff              CMP      r2,#0xff
000054  dd01              BLE      |L19.90|
000056  22ff              MOVS     r2,#0xff
000058  e000              B        |L19.92|
                  |L19.90|
00005a  b2d2              UXTB     r2,r2
                  |L19.92|
00005c  7202              STRB     r2,[r0,#8]
;;;1621   
;;;1622            cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
00005e  22c6              MOVS     r2,#0xc6
000060  435a              MULS     r2,r3,r2
000062  0a12              LSRS     r2,r2,#8
000064  18d2              ADDS     r2,r2,r3
;;;1623            pDstB[0] = addAndClamp(pDstB[0], cbB);
000066  780b              LDRB     r3,[r1,#0]
000068  3ae3              SUBS     r2,r2,#0xe3
00006a  189b              ADDS     r3,r3,r2
00006c  b29c              UXTH     r4,r3
00006e  2cff              CMP      r4,#0xff
000070  d907              BLS      |L19.130|
000072  2b00              CMP      r3,#0
000074  da01              BGE      |L19.122|
000076  2300              MOVS     r3,#0
000078  e004              B        |L19.132|
                  |L19.122|
00007a  2bff              CMP      r3,#0xff
00007c  dd01              BLE      |L19.130|
00007e  23ff              MOVS     r3,#0xff
000080  e000              B        |L19.132|
                  |L19.130|
000082  b2db              UXTB     r3,r3
                  |L19.132|
000084  700b              STRB     r3,[r1,#0]
;;;1624            pDstB[8] = addAndClamp(pDstB[8], cbB);
000086  7a0b              LDRB     r3,[r1,#8]
000088  189a              ADDS     r2,r3,r2
00008a  b293              UXTH     r3,r2
00008c  2bff              CMP      r3,#0xff
00008e  d907              BLS      |L19.160|
000090  2a00              CMP      r2,#0
000092  da01              BGE      |L19.152|
000094  2200              MOVS     r2,#0
000096  e004              B        |L19.162|
                  |L19.152|
000098  2aff              CMP      r2,#0xff
00009a  dd01              BLE      |L19.160|
00009c  22ff              MOVS     r2,#0xff
00009e  e000              B        |L19.162|
                  |L19.160|
0000a0  b2d2              UXTB     r2,r2
                  |L19.162|
0000a2  720a              STRB     r2,[r1,#8]
0000a4  1c6d              ADDS     r5,r5,#1
0000a6  b2ed              UXTB     r5,r5                 ;1613
0000a8  1c40              ADDS     r0,r0,#1              ;1613
0000aa  1c49              ADDS     r1,r1,#1              ;1613
0000ac  2d08              CMP      r5,#8                 ;1613
0000ae  d3b2              BCC      |L19.22|
0000b0  4662              MOV      r2,r12                ;1611
0000b2  1c52              ADDS     r2,r2,#1              ;1611
0000b4  b2d2              UXTB     r2,r2                 ;1611
0000b6  3008              ADDS     r0,r0,#8              ;1611
0000b8  3108              ADDS     r1,r1,#8              ;1611
0000ba  4694              MOV      r12,r2                ;1611
0000bc  2a04              CMP      r2,#4                 ;1611
0000be  d3a9              BCC      |L19.20|
;;;1625   
;;;1626            ++pDstG;
;;;1627            ++pDstB;
;;;1628         }
;;;1629   
;;;1630         pDstG = pDstG - 8 + 16;
;;;1631         pDstB = pDstB - 8 + 16;
;;;1632      }
;;;1633   }   
0000c0  bcf0              POP      {r4-r7}
0000c2  4770              BX       lr
;;;1634   /*----------------------------------------------------------------------------*/
                          ENDP

                  |L19.196|
                          DCD      ||.bss||
                  |L19.200|
                          DCD      ||.bss||+0x180
                  |L19.204|
                          DCD      ||.bss||+0x280

                          AREA ||i.upsampleCr||, CODE, READONLY, ALIGN=2

                  upsampleCr PROC
                  |symbol_number.263|
;;;1647   #endif
;;;1648   static void upsampleCr(uint8 srcOfs, uint8 dstOfs) 
000000  4a50              LDR      r2,|L20.324|
;;;1649   {
;;;1650      // Cr - affects R and G
;;;1651      uint8 x, y;
;;;1652      int16* pSrc = gCoeffBuf + srcOfs;
000002  0040              LSLS     r0,r0,#1
000004  1883              ADDS     r3,r0,r2
;;;1653      uint8* pDstR = gMCUBufR + dstOfs;
000006  4850              LDR      r0,|L20.328|
000008  b4f0              PUSH     {r4-r7}               ;1649
00000a  1842              ADDS     r2,r0,r1
;;;1654      uint8* pDstG = gMCUBufG + dstOfs;
00000c  484f              LDR      r0,|L20.332|
00000e  1841              ADDS     r1,r0,r1
;;;1655      for (y = 0; y < 4; y++)
000010  2000              MOVS     r0,#0
000012  4684              MOV      r12,r0
                  |L20.20|
;;;1656      {
;;;1657         for (x = 0; x < 4; x++)
000014  2600              MOVS     r6,#0
                  |L20.22|
;;;1658         {
;;;1659            uint8 cr = (uint8)*pSrc++;
000016  781c              LDRB     r4,[r3,#0]
;;;1660            int16 crR, crG;
;;;1661   
;;;1662            crR = (cr + ((cr * 103U) >> 8U)) - 179;
000018  2067              MOVS     r0,#0x67
00001a  4360              MULS     r0,r4,r0
00001c  0a00              LSRS     r0,r0,#8
00001e  1900              ADDS     r0,r0,r4
;;;1663            pDstR[0] = addAndClamp(pDstR[0], crR);
000020  7815              LDRB     r5,[r2,#0]
000022  38b3              SUBS     r0,r0,#0xb3
000024  182d              ADDS     r5,r5,r0
000026  b2af              UXTH     r7,r5
000028  1c9b              ADDS     r3,r3,#2
00002a  2fff              CMP      r7,#0xff
00002c  d907              BLS      |L20.62|
00002e  2d00              CMP      r5,#0
000030  da01              BGE      |L20.54|
000032  2500              MOVS     r5,#0
000034  e004              B        |L20.64|
                  |L20.54|
000036  2dff              CMP      r5,#0xff
000038  dd01              BLE      |L20.62|
00003a  25ff              MOVS     r5,#0xff
00003c  e000              B        |L20.64|
                  |L20.62|
00003e  b2ed              UXTB     r5,r5
                  |L20.64|
000040  7015              STRB     r5,[r2,#0]
;;;1664            pDstR[1] = addAndClamp(pDstR[1], crR);
000042  7855              LDRB     r5,[r2,#1]
000044  182d              ADDS     r5,r5,r0
000046  b2af              UXTH     r7,r5
000048  2fff              CMP      r7,#0xff
00004a  d907              BLS      |L20.92|
00004c  2d00              CMP      r5,#0
00004e  da01              BGE      |L20.84|
000050  2500              MOVS     r5,#0
000052  e004              B        |L20.94|
                  |L20.84|
000054  2dff              CMP      r5,#0xff
000056  dd01              BLE      |L20.92|
000058  25ff              MOVS     r5,#0xff
00005a  e000              B        |L20.94|
                  |L20.92|
00005c  b2ed              UXTB     r5,r5
                  |L20.94|
00005e  7055              STRB     r5,[r2,#1]
;;;1665            pDstR[8] = addAndClamp(pDstR[8], crR);
000060  7a15              LDRB     r5,[r2,#8]
000062  182d              ADDS     r5,r5,r0
000064  b2af              UXTH     r7,r5
000066  2fff              CMP      r7,#0xff
000068  d907              BLS      |L20.122|
00006a  2d00              CMP      r5,#0
00006c  da01              BGE      |L20.114|
00006e  2500              MOVS     r5,#0
000070  e004              B        |L20.124|
                  |L20.114|
000072  2dff              CMP      r5,#0xff
000074  dd01              BLE      |L20.122|
000076  25ff              MOVS     r5,#0xff
000078  e000              B        |L20.124|
                  |L20.122|
00007a  b2ed              UXTB     r5,r5
                  |L20.124|
00007c  7215              STRB     r5,[r2,#8]
;;;1666            pDstR[9] = addAndClamp(pDstR[9], crR);
00007e  7a55              LDRB     r5,[r2,#9]
000080  1828              ADDS     r0,r5,r0
000082  b285              UXTH     r5,r0
000084  2dff              CMP      r5,#0xff
000086  d907              BLS      |L20.152|
000088  2800              CMP      r0,#0
00008a  da01              BGE      |L20.144|
00008c  2000              MOVS     r0,#0
00008e  e004              B        |L20.154|
                  |L20.144|
000090  28ff              CMP      r0,#0xff
000092  dd01              BLE      |L20.152|
000094  20ff              MOVS     r0,#0xff
000096  e000              B        |L20.154|
                  |L20.152|
000098  b2c0              UXTB     r0,r0
                  |L20.154|
00009a  7250              STRB     r0,[r2,#9]
;;;1667            
;;;1668            crG = ((cr * 183U) >> 8U) - 91;
00009c  20b7              MOVS     r0,#0xb7
00009e  4344              MULS     r4,r0,r4
0000a0  0a20              LSRS     r0,r4,#8
;;;1669            pDstG[0] = subAndClamp(pDstG[0], crG);
0000a2  780c              LDRB     r4,[r1,#0]
0000a4  385b              SUBS     r0,r0,#0x5b
0000a6  1a24              SUBS     r4,r4,r0
0000a8  b2a5              UXTH     r5,r4
0000aa  2dff              CMP      r5,#0xff
0000ac  d907              BLS      |L20.190|
0000ae  2c00              CMP      r4,#0
0000b0  da01              BGE      |L20.182|
0000b2  2400              MOVS     r4,#0
0000b4  e004              B        |L20.192|
                  |L20.182|
0000b6  2cff              CMP      r4,#0xff
0000b8  dd01              BLE      |L20.190|
0000ba  24ff              MOVS     r4,#0xff
0000bc  e000              B        |L20.192|
                  |L20.190|
0000be  b2e4              UXTB     r4,r4
                  |L20.192|
0000c0  700c              STRB     r4,[r1,#0]
;;;1670            pDstG[1] = subAndClamp(pDstG[1], crG);
0000c2  784c              LDRB     r4,[r1,#1]
0000c4  1a24              SUBS     r4,r4,r0
0000c6  b2a5              UXTH     r5,r4
0000c8  2dff              CMP      r5,#0xff
0000ca  d907              BLS      |L20.220|
0000cc  2c00              CMP      r4,#0
0000ce  da01              BGE      |L20.212|
0000d0  2400              MOVS     r4,#0
0000d2  e004              B        |L20.222|
                  |L20.212|
0000d4  2cff              CMP      r4,#0xff
0000d6  dd01              BLE      |L20.220|
0000d8  24ff              MOVS     r4,#0xff
0000da  e000              B        |L20.222|
                  |L20.220|
0000dc  b2e4              UXTB     r4,r4
                  |L20.222|
0000de  704c              STRB     r4,[r1,#1]
;;;1671            pDstG[8] = subAndClamp(pDstG[8], crG);
0000e0  7a0c              LDRB     r4,[r1,#8]
0000e2  1a24              SUBS     r4,r4,r0
0000e4  b2a5              UXTH     r5,r4
0000e6  2dff              CMP      r5,#0xff
0000e8  d907              BLS      |L20.250|
0000ea  2c00              CMP      r4,#0
0000ec  da01              BGE      |L20.242|
0000ee  2400              MOVS     r4,#0
0000f0  e004              B        |L20.252|
                  |L20.242|
0000f2  2cff              CMP      r4,#0xff
0000f4  dd01              BLE      |L20.250|
0000f6  24ff              MOVS     r4,#0xff
0000f8  e000              B        |L20.252|
                  |L20.250|
0000fa  b2e4              UXTB     r4,r4
                  |L20.252|
0000fc  720c              STRB     r4,[r1,#8]
;;;1672            pDstG[9] = subAndClamp(pDstG[9], crG);
0000fe  7a4c              LDRB     r4,[r1,#9]
000100  1a20              SUBS     r0,r4,r0
000102  b284              UXTH     r4,r0
000104  2cff              CMP      r4,#0xff
000106  d907              BLS      |L20.280|
000108  2800              CMP      r0,#0
00010a  da01              BGE      |L20.272|
00010c  2000              MOVS     r0,#0
00010e  e004              B        |L20.282|
                  |L20.272|
000110  28ff              CMP      r0,#0xff
000112  dd01              BLE      |L20.280|
000114  20ff              MOVS     r0,#0xff
000116  e000              B        |L20.282|
                  |L20.280|
000118  b2c0              UXTB     r0,r0
                  |L20.282|
00011a  7248              STRB     r0,[r1,#9]
00011c  1c76              ADDS     r6,r6,#1
00011e  b2f6              UXTB     r6,r6                 ;1657
000120  1c89              ADDS     r1,r1,#2              ;1657
000122  1c92              ADDS     r2,r2,#2              ;1657
000124  2e04              CMP      r6,#4                 ;1657
000126  d200              BCS      |L20.298|
000128  e775              B        |L20.22|
                  |L20.298|
00012a  4660              MOV      r0,r12                ;1655
00012c  1c40              ADDS     r0,r0,#1              ;1655
00012e  b2c0              UXTB     r0,r0                 ;1655
000130  3108              ADDS     r1,r1,#8              ;1655
000132  3208              ADDS     r2,r2,#8              ;1655
000134  3308              ADDS     r3,r3,#8              ;1655
000136  4684              MOV      r12,r0                ;1655
000138  2804              CMP      r0,#4                 ;1655
00013a  d200              BCS      |L20.318|
00013c  e76a              B        |L20.20|
                  |L20.318|
;;;1673            
;;;1674            pDstR += 2;
;;;1675            pDstG += 2;
;;;1676         }
;;;1677   
;;;1678         pSrc = pSrc - 4 + 8;
;;;1679         pDstR = pDstR - 8 + 16;
;;;1680         pDstG = pDstG - 8 + 16;
;;;1681      }
;;;1682   }   
00013e  bcf0              POP      {r4-r7}
000140  4770              BX       lr
;;;1683   /*----------------------------------------------------------------------------*/
                          ENDP

000142  0000              DCW      0x0000
                  |L20.324|
                          DCD      ||.bss||
                  |L20.328|
                          DCD      ||.bss||+0x80
                  |L20.332|
                          DCD      ||.bss||+0x180

                          AREA ||i.upsampleCrH||, CODE, READONLY, ALIGN=2

                  upsampleCrH PROC
;;;1684   // Cr upsample and accumulate, 4x8 to 8x8
;;;1685   static void upsampleCrH(uint8 srcOfs, uint8 dstOfs)
000000  4a30              LDR      r2,|L21.196|
;;;1686   {
;;;1687      // Cr - affects R and G
;;;1688      uint8 x, y;
;;;1689      int16* pSrc = gCoeffBuf + srcOfs;
000002  0040              LSLS     r0,r0,#1
000004  1883              ADDS     r3,r0,r2
;;;1690      uint8* pDstR = gMCUBufR + dstOfs;
000006  4830              LDR      r0,|L21.200|
000008  b4f0              PUSH     {r4-r7}               ;1686
00000a  1842              ADDS     r2,r0,r1
;;;1691      uint8* pDstG = gMCUBufG + dstOfs;
00000c  482f              LDR      r0,|L21.204|
00000e  1841              ADDS     r1,r0,r1
;;;1692      for (y = 0; y < 8; y++)
000010  2000              MOVS     r0,#0
000012  4684              MOV      r12,r0
                  |L21.20|
;;;1693      {
;;;1694         for (x = 0; x < 4; x++)
000014  2600              MOVS     r6,#0
                  |L21.22|
;;;1695         {
;;;1696            uint8 cr = (uint8)*pSrc++;
000016  781c              LDRB     r4,[r3,#0]
;;;1697            int16 crR, crG;
;;;1698   
;;;1699            crR = (cr + ((cr * 103U) >> 8U)) - 179;
000018  2067              MOVS     r0,#0x67
00001a  4360              MULS     r0,r4,r0
00001c  0a00              LSRS     r0,r0,#8
00001e  1900              ADDS     r0,r0,r4
;;;1700            pDstR[0] = addAndClamp(pDstR[0], crR);
000020  7815              LDRB     r5,[r2,#0]
000022  38b3              SUBS     r0,r0,#0xb3
000024  182d              ADDS     r5,r5,r0
000026  b2af              UXTH     r7,r5
000028  1c9b              ADDS     r3,r3,#2
00002a  2fff              CMP      r7,#0xff
00002c  d907              BLS      |L21.62|
00002e  2d00              CMP      r5,#0
000030  da01              BGE      |L21.54|
000032  2500              MOVS     r5,#0
000034  e004              B        |L21.64|
                  |L21.54|
000036  2dff              CMP      r5,#0xff
000038  dd01              BLE      |L21.62|
00003a  25ff              MOVS     r5,#0xff
00003c  e000              B        |L21.64|
                  |L21.62|
00003e  b2ed              UXTB     r5,r5
                  |L21.64|
000040  7015              STRB     r5,[r2,#0]
;;;1701            pDstR[1] = addAndClamp(pDstR[1], crR);
000042  7855              LDRB     r5,[r2,#1]
000044  1828              ADDS     r0,r5,r0
000046  b285              UXTH     r5,r0
000048  2dff              CMP      r5,#0xff
00004a  d907              BLS      |L21.92|
00004c  2800              CMP      r0,#0
00004e  da01              BGE      |L21.84|
000050  2000              MOVS     r0,#0
000052  e004              B        |L21.94|
                  |L21.84|
000054  28ff              CMP      r0,#0xff
000056  dd01              BLE      |L21.92|
000058  20ff              MOVS     r0,#0xff
00005a  e000              B        |L21.94|
                  |L21.92|
00005c  b2c0              UXTB     r0,r0
                  |L21.94|
00005e  7050              STRB     r0,[r2,#1]
;;;1702            
;;;1703            crG = ((cr * 183U) >> 8U) - 91;
000060  20b7              MOVS     r0,#0xb7
000062  4344              MULS     r4,r0,r4
000064  0a20              LSRS     r0,r4,#8
;;;1704            pDstG[0] = subAndClamp(pDstG[0], crG);
000066  780c              LDRB     r4,[r1,#0]
000068  385b              SUBS     r0,r0,#0x5b
00006a  1a24              SUBS     r4,r4,r0
00006c  b2a5              UXTH     r5,r4
00006e  2dff              CMP      r5,#0xff
000070  d907              BLS      |L21.130|
000072  2c00              CMP      r4,#0
000074  da01              BGE      |L21.122|
000076  2400              MOVS     r4,#0
000078  e004              B        |L21.132|
                  |L21.122|
00007a  2cff              CMP      r4,#0xff
00007c  dd01              BLE      |L21.130|
00007e  24ff              MOVS     r4,#0xff
000080  e000              B        |L21.132|
                  |L21.130|
000082  b2e4              UXTB     r4,r4
                  |L21.132|
000084  700c              STRB     r4,[r1,#0]
;;;1705            pDstG[1] = subAndClamp(pDstG[1], crG);
000086  784c              LDRB     r4,[r1,#1]
000088  1a20              SUBS     r0,r4,r0
00008a  b284              UXTH     r4,r0
00008c  2cff              CMP      r4,#0xff
00008e  d907              BLS      |L21.160|
000090  2800              CMP      r0,#0
000092  da01              BGE      |L21.152|
000094  2000              MOVS     r0,#0
000096  e004              B        |L21.162|
                  |L21.152|
000098  28ff              CMP      r0,#0xff
00009a  dd01              BLE      |L21.160|
00009c  20ff              MOVS     r0,#0xff
00009e  e000              B        |L21.162|
                  |L21.160|
0000a0  b2c0              UXTB     r0,r0
                  |L21.162|
0000a2  7048              STRB     r0,[r1,#1]
0000a4  1c76              ADDS     r6,r6,#1
0000a6  b2f6              UXTB     r6,r6                 ;1694
0000a8  1c89              ADDS     r1,r1,#2              ;1694
0000aa  1c92              ADDS     r2,r2,#2              ;1694
0000ac  2e04              CMP      r6,#4                 ;1694
0000ae  d3b2              BCC      |L21.22|
0000b0  4660              MOV      r0,r12                ;1692
0000b2  1c40              ADDS     r0,r0,#1              ;1692
0000b4  b2c0              UXTB     r0,r0                 ;1692
0000b6  3308              ADDS     r3,r3,#8              ;1692
0000b8  4684              MOV      r12,r0                ;1692
0000ba  2808              CMP      r0,#8                 ;1692
0000bc  d3aa              BCC      |L21.20|
;;;1706            
;;;1707            pDstR += 2;
;;;1708            pDstG += 2;
;;;1709         }
;;;1710   
;;;1711         pSrc = pSrc - 4 + 8;
;;;1712      }
;;;1713   }   
0000be  bcf0              POP      {r4-r7}
0000c0  4770              BX       lr
;;;1714   /*----------------------------------------------------------------------------*/
                          ENDP

0000c2  0000              DCW      0x0000
                  |L21.196|
                          DCD      ||.bss||
                  |L21.200|
                          DCD      ||.bss||+0x80
                  |L21.204|
                          DCD      ||.bss||+0x180

                          AREA ||i.upsampleCrV||, CODE, READONLY, ALIGN=2

                  upsampleCrV PROC
;;;1715   // Cr upsample and accumulate, 8x4 to 8x8
;;;1716   static void upsampleCrV(uint8 srcOfs, uint8 dstOfs)
000000  b4f0              PUSH     {r4-r7}
;;;1717   {
;;;1718      // Cr - affects R and G
;;;1719      uint8 x, y;
;;;1720      int16* pSrc = gCoeffBuf + srcOfs;
000002  4a30              LDR      r2,|L22.196|
000004  0040              LSLS     r0,r0,#1
000006  1886              ADDS     r6,r0,r2
;;;1721      uint8* pDstR = gMCUBufR + dstOfs;
000008  482f              LDR      r0,|L22.200|
;;;1722      uint8* pDstG = gMCUBufG + dstOfs;
00000a  4a30              LDR      r2,|L22.204|
00000c  1840              ADDS     r0,r0,r1              ;1721
00000e  1851              ADDS     r1,r2,r1
;;;1723      for (y = 0; y < 4; y++)
000010  2200              MOVS     r2,#0
000012  4694              MOV      r12,r2
                  |L22.20|
;;;1724      {
;;;1725         for (x = 0; x < 8; x++)
000014  2500              MOVS     r5,#0
                  |L22.22|
;;;1726         {
;;;1727            uint8 cr = (uint8)*pSrc++;
000016  7833              LDRB     r3,[r6,#0]
;;;1728            int16 crR, crG;
;;;1729   
;;;1730            crR = (cr + ((cr * 103U) >> 8U)) - 179;
000018  2267              MOVS     r2,#0x67
00001a  435a              MULS     r2,r3,r2
00001c  0a12              LSRS     r2,r2,#8
00001e  18d2              ADDS     r2,r2,r3
;;;1731            pDstR[0] = addAndClamp(pDstR[0], crR);
000020  7804              LDRB     r4,[r0,#0]
000022  3ab3              SUBS     r2,r2,#0xb3
000024  18a4              ADDS     r4,r4,r2
000026  b2a7              UXTH     r7,r4
000028  1cb6              ADDS     r6,r6,#2
00002a  2fff              CMP      r7,#0xff
00002c  d907              BLS      |L22.62|
00002e  2c00              CMP      r4,#0
000030  da01              BGE      |L22.54|
000032  2400              MOVS     r4,#0
000034  e004              B        |L22.64|
                  |L22.54|
000036  2cff              CMP      r4,#0xff
000038  dd01              BLE      |L22.62|
00003a  24ff              MOVS     r4,#0xff
00003c  e000              B        |L22.64|
                  |L22.62|
00003e  b2e4              UXTB     r4,r4
                  |L22.64|
000040  7004              STRB     r4,[r0,#0]
;;;1732            pDstR[8] = addAndClamp(pDstR[8], crR);
000042  7a04              LDRB     r4,[r0,#8]
000044  18a2              ADDS     r2,r4,r2
000046  b294              UXTH     r4,r2
000048  2cff              CMP      r4,#0xff
00004a  d907              BLS      |L22.92|
00004c  2a00              CMP      r2,#0
00004e  da01              BGE      |L22.84|
000050  2200              MOVS     r2,#0
000052  e004              B        |L22.94|
                  |L22.84|
000054  2aff              CMP      r2,#0xff
000056  dd01              BLE      |L22.92|
000058  22ff              MOVS     r2,#0xff
00005a  e000              B        |L22.94|
                  |L22.92|
00005c  b2d2              UXTB     r2,r2
                  |L22.94|
00005e  7202              STRB     r2,[r0,#8]
;;;1733   
;;;1734            crG = ((cr * 183U) >> 8U) - 91;
000060  22b7              MOVS     r2,#0xb7
000062  4353              MULS     r3,r2,r3
000064  0a1a              LSRS     r2,r3,#8
;;;1735            pDstG[0] = subAndClamp(pDstG[0], crG);
000066  780b              LDRB     r3,[r1,#0]
000068  3a5b              SUBS     r2,r2,#0x5b
00006a  1a9b              SUBS     r3,r3,r2
00006c  b29c              UXTH     r4,r3
00006e  2cff              CMP      r4,#0xff
000070  d907              BLS      |L22.130|
000072  2b00              CMP      r3,#0
000074  da01              BGE      |L22.122|
000076  2300              MOVS     r3,#0
000078  e004              B        |L22.132|
                  |L22.122|
00007a  2bff              CMP      r3,#0xff
00007c  dd01              BLE      |L22.130|
00007e  23ff              MOVS     r3,#0xff
000080  e000              B        |L22.132|
                  |L22.130|
000082  b2db              UXTB     r3,r3
                  |L22.132|
000084  700b              STRB     r3,[r1,#0]
;;;1736            pDstG[8] = subAndClamp(pDstG[8], crG);
000086  7a0b              LDRB     r3,[r1,#8]
000088  1a9a              SUBS     r2,r3,r2
00008a  b293              UXTH     r3,r2
00008c  2bff              CMP      r3,#0xff
00008e  d907              BLS      |L22.160|
000090  2a00              CMP      r2,#0
000092  da01              BGE      |L22.152|
000094  2200              MOVS     r2,#0
000096  e004              B        |L22.162|
                  |L22.152|
000098  2aff              CMP      r2,#0xff
00009a  dd01              BLE      |L22.160|
00009c  22ff              MOVS     r2,#0xff
00009e  e000              B        |L22.162|
                  |L22.160|
0000a0  b2d2              UXTB     r2,r2
                  |L22.162|
0000a2  720a              STRB     r2,[r1,#8]
0000a4  1c6d              ADDS     r5,r5,#1
0000a6  b2ed              UXTB     r5,r5                 ;1725
0000a8  1c40              ADDS     r0,r0,#1              ;1725
0000aa  1c49              ADDS     r1,r1,#1              ;1725
0000ac  2d08              CMP      r5,#8                 ;1725
0000ae  d3b2              BCC      |L22.22|
0000b0  4662              MOV      r2,r12                ;1723
0000b2  1c52              ADDS     r2,r2,#1              ;1723
0000b4  b2d2              UXTB     r2,r2                 ;1723
0000b6  3008              ADDS     r0,r0,#8              ;1723
0000b8  3108              ADDS     r1,r1,#8              ;1723
0000ba  4694              MOV      r12,r2                ;1723
0000bc  2a04              CMP      r2,#4                 ;1723
0000be  d3a9              BCC      |L22.20|
;;;1737   
;;;1738            ++pDstR;
;;;1739            ++pDstG;
;;;1740         }
;;;1741   
;;;1742         pDstR = pDstR - 8 + 16;
;;;1743         pDstG = pDstG - 8 + 16;
;;;1744      }
;;;1745   } 
0000c0  bcf0              POP      {r4-r7}
0000c2  4770              BX       lr
;;;1746   /*----------------------------------------------------------------------------*/
                          ENDP

                  |L22.196|
                          DCD      ||.bss||
                  |L22.200|
                          DCD      ||.bss||+0x80
                  |L22.204|
                          DCD      ||.bss||+0x180

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  gCoeffBuf
                          %        128
                  gMCUBufR
                          %        256
                  gMCUBufG
                          %        256
                  gMCUBufB
                          %        256
                  gQuant0
                          %        128
                  gQuant1
                          %        128
                  gHuffTab0
                          %        80
                  gHuffVal0
                          %        16
                  gHuffTab1
                          %        80
                  gHuffVal1
                          %        16
                  gHuffTab2
                          %        80
                  gHuffVal2
                          %        256
                  gHuffTab3
                          %        80
                  gHuffVal3
                          %        256
                  gInBuf
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  ZAG
000000  00010810          DCB      0x00,0x01,0x08,0x10
000004  0902030a          DCB      0x09,0x02,0x03,0x0a
000008  11182019          DCB      0x11,0x18,0x20,0x19
00000c  120b0405          DCB      0x12,0x0b,0x04,0x05
000010  0c131a21          DCB      0x0c,0x13,0x1a,0x21
000014  28302922          DCB      0x28,0x30,0x29,0x22
000018  1b140d06          DCB      0x1b,0x14,0x0d,0x06
00001c  070e151c          DCB      0x07,0x0e,0x15,0x1c
000020  232a3138          DCB      0x23,0x2a,0x31,0x38
000024  39322b24          DCB      0x39,0x32,0x2b,0x24
000028  1d160f17          DCB      0x1d,0x16,0x0f,0x17
00002c  1e252c33          DCB      0x1e,0x25,0x2c,0x33
000030  3a3b342d          DCB      0x3a,0x3b,0x34,0x2d
000034  261f272e          DCB      0x26,0x1f,0x27,0x2e
000038  353c3d36          DCB      0x35,0x3c,0x3d,0x36
00003c  2f373e3f          DCB      0x2f,0x37,0x3e,0x3f
                  gWinogradQuant
000040  80b2b2a7          DCB      0x80,0xb2,0xb2,0xa7
000044  f6a797e8          DCB      0xf6,0xa7,0x97,0xe8
000048  e89780d1          DCB      0xe8,0x97,0x80,0xd1
00004c  dbd18065          DCB      0xdb,0xd1,0x80,0x65
000050  b2c5c5b2          DCB      0xb2,0xc5,0xc5,0xb2
000054  65458ba7          DCB      0x65,0x45,0x8b,0xa7
000058  b1a78b45          DCB      0xb1,0xa7,0x8b,0x45
00005c  23608397          DCB      0x23,0x60,0x83,0x97
000060  97836023          DCB      0x97,0x83,0x60,0x23
000064  315b7680          DCB      0x31,0x5b,0x76,0x80
000068  765b312e          DCB      0x76,0x5b,0x31,0x2e
00006c  51656551          DCB      0x51,0x65,0x65,0x51
000070  2e2a454f          DCB      0x2e,0x2a,0x45,0x4f
000074  452a2336          DCB      0x45,0x2a,0x23,0x36
000078  36231c25          DCB      0x36,0x23,0x1c,0x25
00007c  1c13130a          DCB      0x1c,0x13,0x13,0x0a

                          AREA ||.data||, DATA, ALIGN=2

                  gValidHuffTables
000000  00                DCB      0x00
                  gValidQuantTables
000001  00                DCB      0x00
                  gTemFlag
000002  00                DCB      0x00
                  gInBufOfs
000003  00                DCB      0x00
                  gInBufLeft
000004  00                DCB      0x00
                  gBitsLeft
000005  00                DCB      0x00
                  gCompsInFrame
000006  00                DCB      0x00
                  gCompsInScan
000007  00                DCB      0x00
                  gScanType
000008  00                DCB      0x00
                  gMaxBlocksPerMCU
000009  00                DCB      0x00
                  gMaxMCUXSize
00000a  00                DCB      0x00
                  gMaxMCUYSize
00000b  00                DCB      0x00
                  gCallbackStatus
00000c  00                DCB      0x00
                  gReduce
00000d  00                DCB      0x00
                  gBitBuf
00000e  0000              DCB      0x00,0x00
                  gImageXSize
000010  0000              DCB      0x00,0x00
                  gImageYSize
000012  0000              DCB      0x00,0x00
                  gRestartInterval
000014  0000              DCB      0x00,0x00
                  gNextRestartNum
000016  0000              DCB      0x00,0x00
                  gRestartsLeft
000018  0000              DCB      0x00,0x00
                  gMaxMCUSPerRow
00001a  0000              DCB      0x00,0x00
                  gMaxMCUSPerCol
00001c  0000              DCB      0x00,0x00
                  gNumMCUSRemaining
00001e  0000              DCB      0x00,0x00
                  gCompIdent
000020  000000            DCB      0x00,0x00,0x00
                  gCompHSamp
000023  00                DCB      0x00
000024  0000              DCB      0x00,0x00
                  gCompVSamp
000026  0000              DCB      0x00,0x00
000028  00                DCB      0x00
                  gCompQuant
000029  000000            DCB      0x00,0x00,0x00
                  gCompList
00002c  000000            DCB      0x00,0x00,0x00
                  gCompDCTab
00002f  00                DCB      0x00
000030  0000              DCB      0x00,0x00
                  gCompACTab
000032  0000              DCB      0x00,0x00
000034  00000000          DCB      0x00,0x00,0x00,0x00
                  huffDecode_ctr
                          DCD      0x00000000
                  g_pNeedBytesCallback
                          DCD      0x00000000
                  g_pCallback_data
                          DCD      0x00000000
                  gLastDC
                          DCD      0x00000000
000048  0000              DCB      0x00,0x00
                  gMCUOrg
00004a  0000              DCB      0x00,0x00
                          DCD      0x00000000
