; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\picojpeg.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\picojpeg.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O3 --diag_suppress=9931 -I.\Include -I.\Source\Profiler -I.\Source\LCD -I.\Source\FS -I.\Source\ulibSD -I.\RTE\Device\MKL25Z128xxx4 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.15.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DMKL25Z128xxx4 --omf_browse=.\objects\picojpeg.crf Source\LCD\picojpeg.c]
                          THUMB

                          AREA ||i.addAndClamp||, CODE, READONLY, ALIGN=1

                  addAndClamp PROC
;;;1492   /*----------------------------------------------------------------------------*/
;;;1493   static PJPG_INLINE uint8 addAndClamp(uint8 a, int16 b)
000000  1840              ADDS     r0,r0,r1
;;;1494   {
;;;1495      b = a + b;
000002  b200              SXTH     r0,r0
;;;1496      
;;;1497      if ((uint16)b > 255U)
000004  b281              UXTH     r1,r0
000006  29ff              CMP      r1,#0xff
000008  d907              BLS      |L1.26|
;;;1498      {
;;;1499         if (b < 0)
00000a  2800              CMP      r0,#0
00000c  da01              BGE      |L1.18|
;;;1500            return 0;
00000e  2000              MOVS     r0,#0
;;;1501         else if (b > 255)
;;;1502            return 255;
;;;1503      }
;;;1504         
;;;1505      return (uint8)b;
;;;1506   }
000010  4770              BX       lr
                  |L1.18|
000012  28ff              CMP      r0,#0xff              ;1501
000014  dd01              BLE      |L1.26|
000016  20ff              MOVS     r0,#0xff              ;1502
000018  4770              BX       lr
                  |L1.26|
00001a  b2c0              UXTB     r0,r0                 ;1505
00001c  4770              BX       lr
;;;1507   /*----------------------------------------------------------------------------*/
                          ENDP


                          AREA ||i.clamp||, CODE, READONLY, ALIGN=1

                  clamp PROC
;;;1317   
;;;1318   static PJPG_INLINE uint8 clamp(int16 s)
000000  b281              UXTH     r1,r0
;;;1319   {
;;;1320      if ((uint16)s > 255U)
000002  29ff              CMP      r1,#0xff
000004  d907              BLS      |L2.22|
;;;1321      {
;;;1322         if (s < 0) 
000006  2800              CMP      r0,#0
000008  da01              BGE      |L2.14|
;;;1323            return 0; 
00000a  2000              MOVS     r0,#0
;;;1324         else if (s > 255) 
;;;1325            return 255;
;;;1326      }
;;;1327         
;;;1328      return (uint8)s;
;;;1329   }
00000c  4770              BX       lr
                  |L2.14|
00000e  28ff              CMP      r0,#0xff              ;1324
000010  dd01              BLE      |L2.22|
000012  20ff              MOVS     r0,#0xff              ;1325
000014  4770              BX       lr
                  |L2.22|
000016  b2c0              UXTB     r0,r0                 ;1328
000018  4770              BX       lr
;;;1330   
                          ENDP


                          AREA ||i.convertCb||, CODE, READONLY, ALIGN=2

                  convertCb PROC
                  ||__tagsym$$noinline||
;;;1769   #endif
;;;1770   static void convertCb(uint8 dstOfs)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1771   {
;;;1772      uint8 i;
;;;1773      uint8* pDstG = gMCUBufG + dstOfs;
000002  4912              LDR      r1,|L3.76|
;;;1774      uint8* pDstB = gMCUBufB + dstOfs;
;;;1775      int16* pSrc = gCoeffBuf;
000004  4f12              LDR      r7,|L3.80|
000006  180e              ADDS     r6,r1,r0              ;1773
000008  31ff              ADDS     r1,r1,#0xff           ;1774
00000a  3101              ADDS     r1,#1                 ;1774
00000c  180d              ADDS     r5,r1,r0              ;1774
;;;1776   
;;;1777      for (i = 64; i > 0; i--)
00000e  2040              MOVS     r0,#0x40
000010  9000              STR      r0,[sp,#0]
                  |L3.18|
;;;1778      {
;;;1779         uint8 cb = (uint8)*pSrc++;
000012  783c              LDRB     r4,[r7,#0]
;;;1780         int16 cbG, cbB;
;;;1781   
;;;1782         cbG = ((cb * 88U) >> 8U) - 44U;
000014  2058              MOVS     r0,#0x58
000016  4360              MULS     r0,r4,r0
000018  0a01              LSRS     r1,r0,#8
;;;1783         *pDstG++ = subAndClamp(pDstG[0], cbG);
00001a  7830              LDRB     r0,[r6,#0]
00001c  392c              SUBS     r1,r1,#0x2c
00001e  1cbf              ADDS     r7,r7,#2
000020  f7fffffe          BL       subAndClamp
000024  7030              STRB     r0,[r6,#0]
;;;1784   
;;;1785         cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
000026  20c6              MOVS     r0,#0xc6
000028  4360              MULS     r0,r4,r0
00002a  0a00              LSRS     r0,r0,#8
00002c  1901              ADDS     r1,r0,r4
;;;1786         *pDstB++ = addAndClamp(pDstB[0], cbB);
00002e  7828              LDRB     r0,[r5,#0]
000030  39e3              SUBS     r1,r1,#0xe3
000032  1c76              ADDS     r6,r6,#1
000034  f7fffffe          BL       addAndClamp
000038  7028              STRB     r0,[r5,#0]
00003a  9800              LDR      r0,[sp,#0]            ;1777
00003c  1c6d              ADDS     r5,r5,#1              ;1777
00003e  1e40              SUBS     r0,r0,#1              ;1777
000040  b2c0              UXTB     r0,r0                 ;1777
000042  9000              STR      r0,[sp,#0]            ;1777
000044  2800              CMP      r0,#0                 ;1777
000046  d1e4              BNE      |L3.18|
;;;1787      }
;;;1788   }
000048  bdf8              POP      {r3-r7,pc}
;;;1789   /*----------------------------------------------------------------------------*/
                          ENDP

00004a  0000              DCW      0x0000
                  |L3.76|
                          DCD      ||.bss||+0x180
                  |L3.80|
                          DCD      ||.bss||

                          AREA ||i.convertCr||, CODE, READONLY, ALIGN=2

                  convertCr PROC
                  |symbol_number.382|
;;;1793   #endif
;;;1794   static void convertCr(uint8 dstOfs)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1795   {
;;;1796      uint8 i;
;;;1797      uint8* pDstR = gMCUBufR + dstOfs;
000002  4912              LDR      r1,|L4.76|
;;;1798      uint8* pDstG = gMCUBufG + dstOfs;
;;;1799      int16* pSrc = gCoeffBuf;
000004  4f11              LDR      r7,|L4.76|
000006  180e              ADDS     r6,r1,r0              ;1797
000008  31ff              ADDS     r1,r1,#0xff           ;1798
00000a  3101              ADDS     r1,#1                 ;1798
00000c  180d              ADDS     r5,r1,r0              ;1798
00000e  3f80              SUBS     r7,r7,#0x80
;;;1800   
;;;1801      for (i = 64; i > 0; i--)
000010  2040              MOVS     r0,#0x40
000012  9000              STR      r0,[sp,#0]
                  |L4.20|
;;;1802      {
;;;1803         uint8 cr = (uint8)*pSrc++;
000014  783c              LDRB     r4,[r7,#0]
;;;1804         int16 crR, crG;
;;;1805   
;;;1806         crR = (cr + ((cr * 103U) >> 8U)) - 179;
000016  2067              MOVS     r0,#0x67
000018  4360              MULS     r0,r4,r0
00001a  0a00              LSRS     r0,r0,#8
00001c  1901              ADDS     r1,r0,r4
;;;1807         *pDstR++ = addAndClamp(pDstR[0], crR);
00001e  7830              LDRB     r0,[r6,#0]
000020  39b3              SUBS     r1,r1,#0xb3
000022  1cbf              ADDS     r7,r7,#2
000024  f7fffffe          BL       addAndClamp
000028  7030              STRB     r0,[r6,#0]
;;;1808   
;;;1809         crG = ((cr * 183U) >> 8U) - 91;
00002a  20b7              MOVS     r0,#0xb7
00002c  4344              MULS     r4,r0,r4
00002e  0a21              LSRS     r1,r4,#8
;;;1810         *pDstG++ = subAndClamp(pDstG[0], crG);
000030  7828              LDRB     r0,[r5,#0]
000032  395b              SUBS     r1,r1,#0x5b
000034  1c76              ADDS     r6,r6,#1
000036  f7fffffe          BL       subAndClamp
00003a  7028              STRB     r0,[r5,#0]
00003c  9800              LDR      r0,[sp,#0]            ;1801
00003e  1c6d              ADDS     r5,r5,#1              ;1801
000040  1e40              SUBS     r0,r0,#1              ;1801
000042  b2c0              UXTB     r0,r0                 ;1801
000044  9000              STR      r0,[sp,#0]            ;1801
000046  2800              CMP      r0,#0                 ;1801
000048  d1e4              BNE      |L4.20|
;;;1811      }
;;;1812   }
00004a  bdf8              POP      {r3-r7,pc}
;;;1813   /*----------------------------------------------------------------------------*/
                          ENDP

                  |L4.76|
                          DCD      ||.bss||+0x80

                          AREA ||i.copyY||, CODE, READONLY, ALIGN=2

                  copyY PROC
;;;1747   // Convert Y to RGB
;;;1748   static void copyY(uint8 dstOfs) // AD Opt: Move data 32 bits at a time. Need prolog and epilog.
000000  490c              LDR      r1,|L5.52|
;;;1749   {
000002  b530              PUSH     {r4,r5,lr}
;;;1750      uint8 i;
;;;1751      uint8* pRDst = gMCUBufR + dstOfs;
000004  180b              ADDS     r3,r1,r0
;;;1752      uint8* pGDst = gMCUBufG + dstOfs;
000006  31ff              ADDS     r1,r1,#0xff
000008  3101              ADDS     r1,#1
00000a  180a              ADDS     r2,r1,r0
;;;1753      uint8* pBDst = gMCUBufB + dstOfs;
00000c  31ff              ADDS     r1,r1,#0xff
00000e  3101              ADDS     r1,#1
;;;1754      int16* pSrc = gCoeffBuf;
000010  4c08              LDR      r4,|L5.52|
000012  180d              ADDS     r5,r1,r0              ;1753
000014  3c80              SUBS     r4,r4,#0x80
;;;1755      
;;;1756      for (i = 64; i > 0; i--)
000016  2040              MOVS     r0,#0x40
                  |L5.24|
;;;1757      {
;;;1758         uint8 c = (uint8)*pSrc++;
000018  7821              LDRB     r1,[r4,#0]
;;;1759         
;;;1760         *pRDst++ = c;
00001a  7019              STRB     r1,[r3,#0]
;;;1761         *pGDst++ = c;
00001c  7011              STRB     r1,[r2,#0]
;;;1762         *pBDst++ = c;
00001e  1e40              SUBS     r0,r0,#1
000020  7029              STRB     r1,[r5,#0]
000022  1c52              ADDS     r2,r2,#1
000024  1c5b              ADDS     r3,r3,#1
000026  1ca4              ADDS     r4,r4,#2
000028  1c6d              ADDS     r5,r5,#1
00002a  0600              LSLS     r0,r0,#24             ;1756
00002c  0e00              LSRS     r0,r0,#24             ;1756
00002e  d1f3              BNE      |L5.24|
;;;1763      }
;;;1764   }
000030  bd30              POP      {r4,r5,pc}
;;;1765   /*----------------------------------------------------------------------------*/
                          ENDP

000032  0000              DCW      0x0000
                  |L5.52|
                          DCD      ||.bss||+0x80

                          AREA ||i.decodeNextMCU||, CODE, READONLY, ALIGN=2

                  decodeNextMCU PROC
                  |symbol_number.385|
;;;2181   
;;;2182   static uint8 decodeNextMCU(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;2183   {
;;;2184      uint8 status;
;;;2185      uint8 mcuBlock;   
;;;2186   
;;;2187      if (gRestartInterval) {
000002  4c70              LDR      r4,|L6.452|
000004  8aa0              LDRH     r0,[r4,#0x14]  ; gRestartInterval
000006  2800              CMP      r0,#0
000008  d009              BEQ      |L6.30|
;;;2188         if (gRestartsLeft == 0) {
00000a  8b20              LDRH     r0,[r4,#0x18]  ; gRestartsLeft
00000c  2800              CMP      r0,#0
00000e  d103              BNE      |L6.24|
;;;2189            status = processRestart();
000010  f7fffffe          BL       processRestart
;;;2190            if (status)
000014  2800              CMP      r0,#0
000016  d170              BNE      |L6.250|
                  |L6.24|
;;;2191               return status;
;;;2192         }
;;;2193         gRestartsLeft--;
000018  8b20              LDRH     r0,[r4,#0x18]  ; gRestartsLeft
00001a  1e40              SUBS     r0,r0,#1
00001c  8320              STRH     r0,[r4,#0x18]
                  |L6.30|
;;;2194      }      
;;;2195      
;;;2196      for (mcuBlock = 0; mcuBlock < gMaxBlocksPerMCU; mcuBlock++) {
00001e  2000              MOVS     r0,#0
000020  e0c8              B        |L6.436|
                  |L6.34|
;;;2197         uint8 componentID = gMCUOrg[mcuBlock];
000022  4968              LDR      r1,|L6.452|
000024  314a              ADDS     r1,r1,#0x4a
000026  5c0c              LDRB     r4,[r1,r0]
;;;2198         uint8 compQuant = gCompQuant[componentID];	
000028  4608              MOV      r0,r1
00002a  3821              SUBS     r0,r0,#0x21
00002c  5d00              LDRB     r0,[r0,r4]
;;;2199         uint8 compDCTab = gCompDCTab[componentID];
00002e  391b              SUBS     r1,r1,#0x1b
000030  5d09              LDRB     r1,[r1,r4]
;;;2200         uint8 numExtraBits, compACTab, k;
;;;2201         const int16* pQ = compQuant ? gQuant1 : gQuant0;
000032  2800              CMP      r0,#0
000034  d001              BEQ      |L6.58|
000036  4864              LDR      r0,|L6.456|
000038  e001              B        |L6.62|
                  |L6.58|
00003a  4863              LDR      r0,|L6.456|
00003c  3880              SUBS     r0,r0,#0x80
                  |L6.62|
;;;2202         uint16 r, dc;
;;;2203         uint8 s = huffDecode(compDCTab ? &gHuffTab1 : &gHuffTab0, compDCTab ? gHuffVal1 : gHuffVal0);
00003e  9001              STR      r0,[sp,#4]
000040  2900              CMP      r1,#0
000042  d003              BEQ      |L6.76|
000044  4961              LDR      r1,|L6.460|
000046  4608              MOV      r0,r1
000048  3850              SUBS     r0,r0,#0x50
00004a  e003              B        |L6.84|
                  |L6.76|
00004c  495f              LDR      r1,|L6.460|
00004e  3960              SUBS     r1,r1,#0x60
000050  4608              MOV      r0,r1
000052  3850              SUBS     r0,r0,#0x50
                  |L6.84|
000054  f7fffffe          BL       huffDecode
000058  4606              MOV      r6,r0
;;;2204        
;;;2205         r = 0;
00005a  2000              MOVS     r0,#0
;;;2206         numExtraBits = s & 0xF;
00005c  0731              LSLS     r1,r6,#28
00005e  0f09              LSRS     r1,r1,#28
;;;2207         if (numExtraBits)
000060  d002              BEQ      |L6.104|
;;;2208            r = getBits2(numExtraBits);
000062  4608              MOV      r0,r1
000064  f7fffffe          BL       getBits2
                  |L6.104|
;;;2209         dc = huffExtend(r, s);          
000068  4631              MOV      r1,r6
00006a  f7fffffe          BL       huffExtend
;;;2210         dc = dc + gLastDC[componentID];
00006e  4a55              LDR      r2,|L6.452|
000070  0061              LSLS     r1,r4,#1
000072  3244              ADDS     r2,r2,#0x44
000074  5a53              LDRH     r3,[r2,r1]
000076  1818              ADDS     r0,r3,r0
;;;2211         gLastDC[componentID] = dc;
000078  5250              STRH     r0,[r2,r1]
;;;2212         gCoeffBuf[0] = dc * pQ[0];
00007a  9901              LDR      r1,[sp,#4]
00007c  8809              LDRH     r1,[r1,#0]
00007e  4341              MULS     r1,r0,r1
000080  4853              LDR      r0,|L6.464|
000082  8001              STRH     r1,[r0,#0]
;;;2213         compACTab = gCompACTab[componentID];
000084  4610              MOV      r0,r2
000086  3812              SUBS     r0,r0,#0x12
000088  5d06              LDRB     r6,[r0,r4]
;;;2214   
;;;2215         if (gReduce) {
00008a  7b68              LDRB     r0,[r5,#0xd]  ; gReduce
00008c  2800              CMP      r0,#0
00008e  d02d              BEQ      |L6.236|
;;;2216            // Decode, but throw out the AC coefficients in reduce mode.
;;;2217            for (k = 1; k < 64; k++) {
000090  2401              MOVS     r4,#1
                  |L6.146|
;;;2218               s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2, compACTab ? gHuffVal3 : gHuffVal2);
000092  2e00              CMP      r6,#0
000094  d003              BEQ      |L6.158|
000096  494f              LDR      r1,|L6.468|
000098  4608              MOV      r0,r1
00009a  3850              SUBS     r0,r0,#0x50
00009c  e003              B        |L6.166|
                  |L6.158|
00009e  494b              LDR      r1,|L6.460|
0000a0  3160              ADDS     r1,r1,#0x60
0000a2  4608              MOV      r0,r1
0000a4  3850              SUBS     r0,r0,#0x50
                  |L6.166|
0000a6  f7fffffe          BL       huffDecode
;;;2219               numExtraBits = s & 0xF;
0000aa  0705              LSLS     r5,r0,#28
0000ac  4607              MOV      r7,r0                 ;2218
0000ae  0f2d              LSRS     r5,r5,#28
;;;2220               if (numExtraBits)
0000b0  d002              BEQ      |L6.184|
;;;2221                  getBits2(numExtraBits);
0000b2  4628              MOV      r0,r5
0000b4  f7fffffe          BL       getBits2
                  |L6.184|
;;;2222               r = s >> 4;
0000b8  0938              LSRS     r0,r7,#4
;;;2223               s &= 15;
;;;2224               if (s) {
0000ba  2d00              CMP      r5,#0
0000bc  d006              BEQ      |L6.204|
;;;2225                  if (r) {
0000be  2800              CMP      r0,#0
0000c0  d00c              BEQ      |L6.220|
;;;2226                     if ((k + r) > 63)
0000c2  1820              ADDS     r0,r4,r0
0000c4  283f              CMP      r0,#0x3f
0000c6  d85a              BHI      |L6.382|
;;;2227                        return PJPG_DECODE_ERROR;
;;;2228                     k = (uint8)(k + r);
0000c8  b2c4              UXTB     r4,r0
0000ca  e007              B        |L6.220|
                  |L6.204|
;;;2229                  }
;;;2230               } else {
;;;2231                  if (r == 15) {
0000cc  280f              CMP      r0,#0xf
0000ce  d109              BNE      |L6.228|
;;;2232                     if ((k + 16) > 64)
0000d0  4620              MOV      r0,r4
0000d2  3010              ADDS     r0,r0,#0x10
0000d4  2840              CMP      r0,#0x40
0000d6  d852              BHI      |L6.382|
0000d8  340f              ADDS     r4,r4,#0xf
;;;2233                        return PJPG_DECODE_ERROR;
;;;2234                     k += (16 - 1); // - 1 because the loop counter is k
0000da  b2e4              UXTB     r4,r4
                  |L6.220|
0000dc  1c64              ADDS     r4,r4,#1
0000de  b2e4              UXTB     r4,r4                 ;2217
0000e0  2c40              CMP      r4,#0x40              ;2217
0000e2  d3d6              BCC      |L6.146|
                  |L6.228|
;;;2235                  } else
;;;2236                     break;
;;;2237               }
;;;2238            }
;;;2239            transformBlockReduce(mcuBlock); 
0000e4  9800              LDR      r0,[sp,#0]
0000e6  f7fffffe          BL       transformBlockReduce
0000ea  e060              B        |L6.430|
                  |L6.236|
;;;2240         } else {
;;;2241            // Decode and dequantize AC coefficients
;;;2242            for (k = 1; k < 64; k++) {
0000ec  2401              MOVS     r4,#1
                  |L6.238|
;;;2243               uint16 extraBits;
;;;2244               s = huffDecode(compACTab ? &gHuffTab3 : &gHuffTab2, compACTab ? gHuffVal3 : gHuffVal2);
0000ee  2e00              CMP      r6,#0
0000f0  d004              BEQ      |L6.252|
0000f2  4938              LDR      r1,|L6.468|
0000f4  4608              MOV      r0,r1
0000f6  3850              SUBS     r0,r0,#0x50
0000f8  e004              B        |L6.260|
                  |L6.250|
0000fa  e041              B        |L6.384|
                  |L6.252|
0000fc  4933              LDR      r1,|L6.460|
0000fe  3160              ADDS     r1,r1,#0x60
000100  4608              MOV      r0,r1
000102  3850              SUBS     r0,r0,#0x50
                  |L6.260|
000104  f7fffffe          BL       huffDecode
000108  4607              MOV      r7,r0
;;;2245               extraBits = 0;
00010a  2200              MOVS     r2,#0
;;;2246               numExtraBits = s & 0xF;
00010c  0700              LSLS     r0,r0,#28
00010e  0f00              LSRS     r0,r0,#28
000110  4605              MOV      r5,r0
;;;2247               if (numExtraBits)
000112  d002              BEQ      |L6.282|
;;;2248                  extraBits = getBits2(numExtraBits);
000114  f7fffffe          BL       getBits2
000118  4602              MOV      r2,r0
                  |L6.282|
;;;2249   
;;;2250               r = s >> 4;
00011a  0938              LSRS     r0,r7,#4
00011c  0029              MOVS     r1,r5
;;;2251               s &= 15;
;;;2252               if (s) {
00011e  d01d              BEQ      |L6.348|
;;;2253                  int16 ac;
;;;2254                  if (r) {
000120  2800              CMP      r0,#0
000122  d00e              BEQ      |L6.322|
;;;2255                     if ((k + r) > 63)
000124  1823              ADDS     r3,r4,r0
000126  2b3f              CMP      r3,#0x3f
000128  d829              BHI      |L6.382|
00012a  2300              MOVS     r3,#0
                  |L6.300|
;;;2256                        return PJPG_DECODE_ERROR;
;;;2257                     while (r) {
;;;2258                        gCoeffBuf[ZAG[k++]] = 0;
00012c  4d2a              LDR      r5,|L6.472|
00012e  572d              LDRSB    r5,[r5,r4]
000130  1c64              ADDS     r4,r4,#1
000132  006f              LSLS     r7,r5,#1
000134  4d26              LDR      r5,|L6.464|
000136  1e40              SUBS     r0,r0,#1
;;;2259                        r--;
000138  0400              LSLS     r0,r0,#16
00013a  53eb              STRH     r3,[r5,r7]            ;2258
00013c  b2e4              UXTB     r4,r4                 ;2258
00013e  0c00              LSRS     r0,r0,#16
000140  d1f4              BNE      |L6.300|
                  |L6.322|
;;;2260                     }
;;;2261                  }
;;;2262                  ac = huffExtend(extraBits, s);
000142  4610              MOV      r0,r2
000144  f7fffffe          BL       huffExtend
;;;2263                  gCoeffBuf[ZAG[k]] = ac * pQ[k]; 
000148  9901              LDR      r1,[sp,#4]
00014a  0062              LSLS     r2,r4,#1
00014c  5a89              LDRH     r1,[r1,r2]
00014e  4341              MULS     r1,r0,r1
000150  4821              LDR      r0,|L6.472|
000152  5700              LDRSB    r0,[r0,r4]
000154  0042              LSLS     r2,r0,#1
000156  481e              LDR      r0,|L6.464|
000158  5281              STRH     r1,[r0,r2]
;;;2264               } else {
00015a  e021              B        |L6.416|
                  |L6.348|
;;;2265                  if (r == 15) {
00015c  280f              CMP      r0,#0xf
00015e  d00a              BEQ      |L6.374|
000160  481b              LDR      r0,|L6.464|
000162  4a1d              LDR      r2,|L6.472|
000164  2100              MOVS     r1,#0
                  |L6.358|
;;;2266                     if ((k + 16) > 64)
;;;2267                        return PJPG_DECODE_ERROR;
;;;2268                     for (r = 16; r > 0; r--)
;;;2269                        gCoeffBuf[ZAG[k++]] = 0;
;;;2270                     k--; // - 1 because the loop counter is k
;;;2271                  } else
;;;2272                     break;
;;;2273               }
;;;2274            }     
;;;2275            while (k < 64)
000166  2c40              CMP      r4,#0x40
000168  d21e              BCS      |L6.424|
;;;2276               gCoeffBuf[ZAG[k++]] = 0;
00016a  5713              LDRSB    r3,[r2,r4]
00016c  005b              LSLS     r3,r3,#1
00016e  1c64              ADDS     r4,r4,#1
000170  52c1              STRH     r1,[r0,r3]
000172  b2e4              UXTB     r4,r4
000174  e7f7              B        |L6.358|
                  |L6.374|
000176  4620              MOV      r0,r4                 ;2266
000178  3010              ADDS     r0,r0,#0x10           ;2266
00017a  2840              CMP      r0,#0x40              ;2266
00017c  d901              BLS      |L6.386|
                  |L6.382|
00017e  201c              MOVS     r0,#0x1c              ;2267
                  |L6.384|
;;;2277            transformBlock(mcuBlock); 
;;;2278         }
;;;2279      }        
;;;2280      return 0;
;;;2281   }
000180  bdfe              POP      {r1-r7,pc}
                  |L6.386|
000182  2010              MOVS     r0,#0x10              ;2268
000184  4a12              LDR      r2,|L6.464|
000186  4b14              LDR      r3,|L6.472|
000188  2100              MOVS     r1,#0                 ;2268
                  |L6.394|
00018a  571d              LDRSB    r5,[r3,r4]            ;2269
00018c  1c64              ADDS     r4,r4,#1              ;2269
00018e  006d              LSLS     r5,r5,#1              ;2269
000190  1e40              SUBS     r0,r0,#1              ;2269
000192  0400              LSLS     r0,r0,#16             ;2268
000194  5351              STRH     r1,[r2,r5]            ;2269
000196  b2e4              UXTB     r4,r4                 ;2269
000198  0c00              LSRS     r0,r0,#16             ;2268
00019a  d1f6              BNE      |L6.394|
00019c  1e64              SUBS     r4,r4,#1              ;2268
00019e  b2e4              UXTB     r4,r4                 ;2270
                  |L6.416|
0001a0  1c64              ADDS     r4,r4,#1              ;2270
0001a2  b2e4              UXTB     r4,r4                 ;2242
0001a4  2c40              CMP      r4,#0x40              ;2242
0001a6  d3a2              BCC      |L6.238|
                  |L6.424|
0001a8  9800              LDR      r0,[sp,#0]            ;2277
0001aa  f7fffffe          BL       transformBlock
                  |L6.430|
0001ae  9800              LDR      r0,[sp,#0]            ;2196
0001b0  1c40              ADDS     r0,r0,#1              ;2196
0001b2  b2c0              UXTB     r0,r0                 ;2196
                  |L6.436|
0001b4  4d03              LDR      r5,|L6.452|
0001b6  9000              STR      r0,[sp,#0]            ;2196
0001b8  7a69              LDRB     r1,[r5,#9]            ;2196  ; gMaxBlocksPerMCU
0001ba  4288              CMP      r0,r1                 ;2196
0001bc  d200              BCS      |L6.448|
0001be  e730              B        |L6.34|
                  |L6.448|
0001c0  2000              MOVS     r0,#0                 ;2280
0001c2  bdfe              POP      {r1-r7,pc}
;;;2282   //------------------------------------------------------------------------------
                          ENDP

                  |L6.452|
                          DCD      ||.data||
                  |L6.456|
                          DCD      ||.bss||+0x400
                  |L6.460|
                          DCD      ||.bss||+0x530
                  |L6.464|
                          DCD      ||.bss||
                  |L6.468|
                          DCD      ||.bss||+0x6e0
                  |L6.472|
                          DCD      ||.constdata||

                          AREA ||i.getBit||, CODE, READONLY, ALIGN=2

                  getBit PROC
;;;341    //------------------------------------------------------------------------------
;;;342    static PJPG_INLINE uint8 getBit(void)
000000  b570              PUSH     {r4-r6,lr}
;;;343    {
;;;344       uint8 ret = 0;
;;;345       if (gBitBuf & 0x8000) 
000002  4c0c              LDR      r4,|L7.52|
000004  2500              MOVS     r5,#0                 ;344
000006  89e1              LDRH     r1,[r4,#0xe]  ; gBitBuf
000008  0408              LSLS     r0,r1,#16
00000a  d500              BPL      |L7.14|
;;;346          ret = 1;
00000c  2501              MOVS     r5,#1
                  |L7.14|
;;;347       
;;;348       if (!gBitsLeft)
00000e  7960              LDRB     r0,[r4,#5]  ; gBitsLeft
000010  2800              CMP      r0,#0
000012  d005              BEQ      |L7.32|
000014  1e40              SUBS     r0,r0,#1
;;;349       {
;;;350          gBitBuf |= getOctet(1);
;;;351    
;;;352          gBitsLeft += 8;
;;;353    // AD Opt
;;;354    			gBitsLeft--;
;;;355    			gBitBuf <<= 1;
;;;356    	    return ret;
;;;357       } else {
;;;358    			gBitsLeft--;
000016  7160              STRB     r0,[r4,#5]
;;;359    			gBitBuf <<= 1;
000018  0048              LSLS     r0,r1,#1
                  |L7.26|
00001a  81e0              STRH     r0,[r4,#0xe]
;;;360    			return ret;
00001c  4628              MOV      r0,r5
;;;361       }
;;;362    // AD Opt end	  
;;;363    }
00001e  bd70              POP      {r4-r6,pc}
                  |L7.32|
000020  2001              MOVS     r0,#1                 ;350
000022  f7fffffe          BL       getOctet
000026  89e1              LDRH     r1,[r4,#0xe]          ;350  ; gBitBuf
000028  4308              ORRS     r0,r0,r1              ;350
00002a  7961              LDRB     r1,[r4,#5]            ;352  ; gBitsLeft
00002c  1dc9              ADDS     r1,r1,#7              ;352
00002e  7161              STRB     r1,[r4,#5]            ;354
000030  0040              LSLS     r0,r0,#1              ;355
000032  e7f2              B        |L7.26|
;;;364    //------------------------------------------------------------------------------
                          ENDP

                  |L7.52|
                          DCD      ||.data||

                          AREA ||i.getBits||, CODE, READONLY, ALIGN=2

                  getBits PROC
                  |symbol_number.388|
;;;288    #endif
;;;289    static uint16 getBits(uint8 numBits, uint8 FFCheck)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;290    {
;;;291       uint8 origBits = numBits;
;;;292       uint16 ret = gBitBuf;
000002  4c1d              LDR      r4,|L8.120|
000004  b081              SUB      sp,sp,#4              ;290
000006  89e6              LDRH     r6,[r4,#0xe]  ; gBitBuf
000008  4605              MOV      r5,r0                 ;290
00000a  4607              MOV      r7,r0                 ;291
;;;293       
;;;294       if (numBits > 8)
00000c  2808              CMP      r0,#8
00000e  d915              BLS      |L8.60|
;;;295       {
;;;296          numBits -= 8;
000010  463d              MOV      r5,r7
000012  3d08              SUBS     r5,r5,#8
;;;297          
;;;298          gBitBuf <<= gBitsLeft;
000014  7961              LDRB     r1,[r4,#5]  ; gBitsLeft
000016  4630              MOV      r0,r6                 ;296
000018  4088              LSLS     r0,r0,r1
00001a  81e0              STRH     r0,[r4,#0xe]
00001c  b2ed              UXTB     r5,r5                 ;296
;;;299          
;;;300          gBitBuf |= getOctet(FFCheck);
00001e  9802              LDR      r0,[sp,#8]
000020  f7fffffe          BL       getOctet
000024  89e1              LDRH     r1,[r4,#0xe]  ; gBitBuf
;;;301          
;;;302          gBitBuf <<= (8 - gBitsLeft);
000026  7962              LDRB     r2,[r4,#5]  ; gBitsLeft
000028  4308              ORRS     r0,r0,r1              ;300
00002a  2108              MOVS     r1,#8
00002c  1a89              SUBS     r1,r1,r2
00002e  4088              LSLS     r0,r0,r1
000030  b280              UXTH     r0,r0
;;;303          
;;;304          ret = (ret & 0xFF00) | (gBitBuf >> 8);
000032  0a36              LSRS     r6,r6,#8
000034  81e0              STRH     r0,[r4,#0xe]          ;302
000036  0236              LSLS     r6,r6,#8
000038  0a00              LSRS     r0,r0,#8
00003a  4306              ORRS     r6,r6,r0
                  |L8.60|
;;;305       }
;;;306          
;;;307       if (gBitsLeft < numBits)
00003c  7960              LDRB     r0,[r4,#5]  ; gBitsLeft
00003e  42a8              CMP      r0,r5
000040  d20f              BCS      |L8.98|
;;;308       {
;;;309          gBitBuf <<= gBitsLeft;
000042  89e1              LDRH     r1,[r4,#0xe]  ; gBitBuf
000044  4081              LSLS     r1,r1,r0
000046  81e1              STRH     r1,[r4,#0xe]
;;;310          
;;;311          gBitBuf |= getOctet(FFCheck);
000048  9802              LDR      r0,[sp,#8]
00004a  f7fffffe          BL       getOctet
00004e  89e1              LDRH     r1,[r4,#0xe]  ; gBitBuf
000050  4308              ORRS     r0,r0,r1
;;;312          
;;;313          gBitBuf <<= (numBits - gBitsLeft);
000052  7961              LDRB     r1,[r4,#5]  ; gBitsLeft
000054  1a69              SUBS     r1,r5,r1
000056  4088              LSLS     r0,r0,r1
000058  81e0              STRH     r0,[r4,#0xe]
;;;314                            
;;;315          gBitsLeft = 8 - (numBits - gBitsLeft);
00005a  2008              MOVS     r0,#8
00005c  1a40              SUBS     r0,r0,r1
00005e  7160              STRB     r0,[r4,#5]
000060  e004              B        |L8.108|
                  |L8.98|
;;;316       }
;;;317       else
;;;318       {
;;;319          gBitsLeft = (uint8)(gBitsLeft - numBits);
000062  1b40              SUBS     r0,r0,r5
000064  7160              STRB     r0,[r4,#5]
;;;320          gBitBuf <<= numBits;
000066  89e0              LDRH     r0,[r4,#0xe]  ; gBitBuf
000068  40a8              LSLS     r0,r0,r5
00006a  81e0              STRH     r0,[r4,#0xe]
                  |L8.108|
;;;321       }
;;;322       
;;;323       return ret >> (16 - origBits);
00006c  2010              MOVS     r0,#0x10
00006e  1bc1              SUBS     r1,r0,r7
000070  4630              MOV      r0,r6
000072  40c8              LSRS     r0,r0,r1
;;;324    }
000074  bdfe              POP      {r1-r7,pc}
;;;325    //------------------------------------------------------------------------------
                          ENDP

000076  0000              DCW      0x0000
                  |L8.120|
                          DCD      ||.data||

                          AREA ||i.getBits1||, CODE, READONLY, ALIGN=1

                  getBits1 PROC
                  |symbol_number.390|
;;;328    #endif
;;;329    static uint16 getBits1(uint8 numBits)
000000  b510              PUSH     {r4,lr}
;;;330    {
;;;331       return getBits(numBits, 0);
000002  2100              MOVS     r1,#0
000004  f7fffffe          BL       getBits
;;;332    }
000008  bd10              POP      {r4,pc}
;;;333    //------------------------------------------------------------------------------
                          ENDP


                          AREA ||i.getBits2||, CODE, READONLY, ALIGN=1

                  getBits2 PROC
                  |symbol_number.392|
;;;336    #endif
;;;337    static uint16 getBits2(uint8 numBits)
000000  b510              PUSH     {r4,lr}
;;;338    {
;;;339       return getBits(numBits, 1);
000002  2101              MOVS     r1,#1
000004  f7fffffe          BL       getBits
;;;340    }
000008  bd10              POP      {r4,pc}
;;;341    //------------------------------------------------------------------------------
                          ENDP


                          AREA ||i.getChar||, CODE, READONLY, ALIGN=2

                  getChar PROC
;;;244    //------------------------------------------------------------------------------
;;;245    static PJPG_INLINE uint8 getChar(void)
000000  b570              PUSH     {r4-r6,lr}
;;;246    {
;;;247       if (!gInBufLeft)
000002  4c12              LDR      r4,|L11.76|
000004  4d12              LDR      r5,|L11.80|
000006  7920              LDRB     r0,[r4,#4]  ; gInBufLeft
000008  2800              CMP      r0,#0
00000a  d10d              BNE      |L11.40|
00000c  2004              MOVS     r0,#4                 ;246
00000e  70e0              STRB     r0,[r4,#3]            ;246
000010  21fc              MOVS     r1,#0xfc              ;246
000012  1d28              ADDS     r0,r5,#4              ;246
000014  6be6              LDR      r6,[r4,#0x3c]         ;246  ; g_pNeedBytesCallback
000016  1d22              ADDS     r2,r4,#4              ;246
000018  6c23              LDR      r3,[r4,#0x40]         ;246  ; g_pCallback_data
00001a  47b0              BLX      r6                    ;246
00001c  2800              CMP      r0,#0                 ;246
00001e  d000              BEQ      |L11.34|
000020  7320              STRB     r0,[r4,#0xc]          ;246
                  |L11.34|
;;;248       {
;;;249          fillInBuf();
;;;250          if (!gInBufLeft)
000022  7920              LDRB     r0,[r4,#4]  ; gInBufLeft
000024  2800              CMP      r0,#0
000026  d007              BEQ      |L11.56|
                  |L11.40|
;;;251          {
;;;252             gTemFlag = ~gTemFlag;
;;;253             return gTemFlag ? 0xFF : 0xD9;
;;;254          } 
;;;255       }
;;;256       
;;;257       gInBufLeft--;
000028  b2c0              UXTB     r0,r0
00002a  1e40              SUBS     r0,r0,#1
00002c  7120              STRB     r0,[r4,#4]
;;;258       return gInBuf[gInBufOfs++];
00002e  78e1              LDRB     r1,[r4,#3]  ; gInBufOfs
000030  5c68              LDRB     r0,[r5,r1]
000032  1c49              ADDS     r1,r1,#1
000034  70e1              STRB     r1,[r4,#3]
;;;259    }
000036  bd70              POP      {r4-r6,pc}
                  |L11.56|
000038  78a0              LDRB     r0,[r4,#2]            ;252  ; gTemFlag
00003a  43c0              MVNS     r0,r0                 ;252
00003c  0600              LSLS     r0,r0,#24             ;252
00003e  0e00              LSRS     r0,r0,#24             ;252
000040  70a0              STRB     r0,[r4,#2]            ;252
000042  d001              BEQ      |L11.72|
000044  20ff              MOVS     r0,#0xff              ;253
000046  bd70              POP      {r4-r6,pc}
                  |L11.72|
000048  20d9              MOVS     r0,#0xd9              ;253
00004a  bd70              POP      {r4-r6,pc}
;;;260    //------------------------------------------------------------------------------
                          ENDP

                  |L11.76|
                          DCD      ||.data||
                  |L11.80|
                          DCD      ||.bss||+0x7e0

                          AREA ||i.getExtendOffset||, CODE, READONLY, ALIGN=2

                  getExtendOffset PROC
;;;388    //------------------------------------------------------------------------------
;;;389    static int16 getExtendOffset(uint8 i)
000000  b500              PUSH     {lr}
;;;390    { 
;;;391       switch (i)
000002  0003              MOVS     r3,r0
000004  f7fffffe          BL       __ARM_common_switch8
000008  102f090c          DCB      0x10,0x2f,0x09,0x0c
00000c  0f121518          DCB      0x0f,0x12,0x15,0x18
000010  1b1e2123          DCB      0x1b,0x1e,0x21,0x23
000014  2527292b          DCB      0x25,0x27,0x29,0x2b
000018  2d2f              DCB      0x2d,0x2f
;;;392       {
;;;393          case 0: return 0;
;;;394          case 1: return ((-1)<<1) + 1; 
00001a  2000              MOVS     r0,#0
00001c  43c0              MVNS     r0,r0
;;;395          case 2: return ((-1)<<2) + 1; 
;;;396          case 3: return ((-1)<<3) + 1; 
;;;397          case 4: return ((-1)<<4) + 1; 
;;;398          case 5: return ((-1)<<5) + 1; 
;;;399          case 6: return ((-1)<<6) + 1; 
;;;400          case 7: return ((-1)<<7) + 1; 
;;;401          case 8: return ((-1)<<8) + 1; 
;;;402          case 9: return ((-1)<<9) + 1;
;;;403          case 10: return ((-1)<<10) + 1; 
;;;404          case 11: return ((-1)<<11) + 1; 
;;;405          case 12: return ((-1)<<12) + 1; 
;;;406          case 13: return ((-1)<<13) + 1; 
;;;407          case 14: return ((-1)<<14) + 1; 
;;;408          case 15: return ((-1)<<15) + 1;
;;;409          default: return 0;
;;;410       }
;;;411    }
00001e  bd00              POP      {pc}
000020  2002              MOVS     r0,#2                 ;395
000022  43c0              MVNS     r0,r0                 ;395
000024  bd00              POP      {pc}
000026  2006              MOVS     r0,#6                 ;396
000028  43c0              MVNS     r0,r0                 ;396
00002a  bd00              POP      {pc}
00002c  200e              MOVS     r0,#0xe               ;397
00002e  43c0              MVNS     r0,r0                 ;397
000030  bd00              POP      {pc}
000032  201e              MOVS     r0,#0x1e              ;398
000034  43c0              MVNS     r0,r0                 ;398
000036  bd00              POP      {pc}
000038  203e              MOVS     r0,#0x3e              ;399
00003a  43c0              MVNS     r0,r0                 ;399
00003c  bd00              POP      {pc}
00003e  207e              MOVS     r0,#0x7e              ;400
000040  43c0              MVNS     r0,r0                 ;400
000042  bd00              POP      {pc}
000044  20fe              MOVS     r0,#0xfe              ;401
000046  43c0              MVNS     r0,r0                 ;401
000048  bd00              POP      {pc}
00004a  4808              LDR      r0,|L12.108|
00004c  bd00              POP      {pc}
00004e  4808              LDR      r0,|L12.112|
000050  bd00              POP      {pc}
000052  4808              LDR      r0,|L12.116|
000054  bd00              POP      {pc}
000056  4808              LDR      r0,|L12.120|
000058  bd00              POP      {pc}
00005a  4808              LDR      r0,|L12.124|
00005c  bd00              POP      {pc}
00005e  4808              LDR      r0,|L12.128|
000060  bd00              POP      {pc}
000062  4808              LDR      r0,|L12.132|
000064  bd00              POP      {pc}
000066  2000              MOVS     r0,#0                 ;409
000068  bd00              POP      {pc}
;;;412    //------------------------------------------------------------------------------
                          ENDP

00006a  0000              DCW      0x0000
                  |L12.108|
                          DCD      0xfffffe01
                  |L12.112|
                          DCD      0xfffffc01
                  |L12.116|
                          DCD      0xfffff801
                  |L12.120|
                          DCD      0xfffff001
                  |L12.124|
                          DCD      0xffffe001
                  |L12.128|
                          DCD      0xffffc001
                  |L12.132|
                          DCD      0xffff8001

                          AREA ||i.getExtendTest||, CODE, READONLY, ALIGN=1

                  getExtendTest PROC
;;;364    //------------------------------------------------------------------------------
;;;365    static uint16 getExtendTest(uint8 i)
000000  b500              PUSH     {lr}
;;;366    {
;;;367       switch (i)
000002  0003              MOVS     r3,r0
000004  f7fffffe          BL       __ARM_common_switch8
000008  102e090b          DCB      0x10,0x2e,0x09,0x0b
00000c  0d0f1113          DCB      0x0d,0x0f,0x11,0x13
000010  1517191c          DCB      0x15,0x17,0x19,0x1c
000014  1f222528          DCB      0x1f,0x22,0x25,0x28
000018  2b2e              DCB      0x2b,0x2e
;;;368       {
;;;369          case 0: return 0;
;;;370          case 1: return 0x0001;
00001a  2001              MOVS     r0,#1
;;;371          case 2: return 0x0002;
;;;372          case 3: return 0x0004;
;;;373          case 4: return 0x0008;
;;;374          case 5: return 0x0010; 
;;;375          case 6: return 0x0020;
;;;376          case 7: return 0x0040;
;;;377          case 8:  return 0x0080;
;;;378          case 9:  return 0x0100;
;;;379          case 10: return 0x0200;
;;;380          case 11: return 0x0400;
;;;381          case 12: return 0x0800;
;;;382          case 13: return 0x1000;
;;;383          case 14: return 0x2000; 
;;;384          case 15: return 0x4000;
;;;385          default: return 0;
;;;386       }      
;;;387    }
00001c  bd00              POP      {pc}
00001e  2002              MOVS     r0,#2                 ;371
000020  bd00              POP      {pc}
000022  2004              MOVS     r0,#4                 ;372
000024  bd00              POP      {pc}
000026  2008              MOVS     r0,#8                 ;373
000028  bd00              POP      {pc}
00002a  2010              MOVS     r0,#0x10              ;374
00002c  bd00              POP      {pc}
00002e  2020              MOVS     r0,#0x20              ;375
000030  bd00              POP      {pc}
000032  2040              MOVS     r0,#0x40              ;376
000034  bd00              POP      {pc}
000036  2080              MOVS     r0,#0x80              ;377
000038  bd00              POP      {pc}
00003a  20ff              MOVS     r0,#0xff              ;378
00003c  3001              ADDS     r0,#1                 ;378
00003e  bd00              POP      {pc}
000040  2001              MOVS     r0,#1                 ;379
000042  0240              LSLS     r0,r0,#9              ;379
000044  bd00              POP      {pc}
000046  2001              MOVS     r0,#1                 ;380
000048  0280              LSLS     r0,r0,#10             ;380
00004a  bd00              POP      {pc}
00004c  2001              MOVS     r0,#1                 ;381
00004e  02c0              LSLS     r0,r0,#11             ;381
000050  bd00              POP      {pc}
000052  2001              MOVS     r0,#1                 ;382
000054  0300              LSLS     r0,r0,#12             ;382
000056  bd00              POP      {pc}
000058  2001              MOVS     r0,#1                 ;383
00005a  0340              LSLS     r0,r0,#13             ;383
00005c  bd00              POP      {pc}
00005e  2001              MOVS     r0,#1                 ;384
000060  0380              LSLS     r0,r0,#14             ;384
000062  bd00              POP      {pc}
000064  2000              MOVS     r0,#0                 ;385
000066  bd00              POP      {pc}
;;;388    //------------------------------------------------------------------------------
                          ENDP


                          AREA ||i.getOctet||, CODE, READONLY, ALIGN=1

                  getOctet PROC
;;;267    //------------------------------------------------------------------------------
;;;268    static PJPG_INLINE uint8 getOctet(uint8 FFCheck)
000000  b570              PUSH     {r4-r6,lr}
;;;269    {
000002  4605              MOV      r5,r0
;;;270       uint8 c = getChar();
000004  f7fffffe          BL       getChar
000008  4604              MOV      r4,r0
;;;271          
;;;272       if ((FFCheck) && (c == 0xFF))
00000a  2d00              CMP      r5,#0
00000c  d00a              BEQ      |L14.36|
00000e  2cff              CMP      r4,#0xff
000010  d108              BNE      |L14.36|
;;;273       {
;;;274          uint8 n = getChar();
000012  f7fffffe          BL       getChar
;;;275    
;;;276          if (n)
000016  2800              CMP      r0,#0
000018  d004              BEQ      |L14.36|
;;;277          {
;;;278             stuffChar(n);
00001a  f7fffffe          BL       stuffChar
;;;279             stuffChar(0xFF);
00001e  20ff              MOVS     r0,#0xff
000020  f7fffffe          BL       stuffChar
                  |L14.36|
;;;280          }
;;;281       }
;;;282    
;;;283       return c;
000024  4620              MOV      r0,r4
;;;284    }
000026  bd70              POP      {r4-r6,pc}
;;;285    //------------------------------------------------------------------------------
                          ENDP


                          AREA ||i.huffDecode||, CODE, READONLY, ALIGN=2

                  huffDecode PROC
                  |symbol_number.398|
;;;423    #endif
;;;424    static uint8 huffDecode(const HuffTable* pHuffTable, const uint8* pHuffVal)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;425    {
000002  b081              SUB      sp,sp,#4
000004  4605              MOV      r5,r0
;;;426       uint8 i = 0;
000006  2400              MOVS     r4,#0
;;;427       uint8 j;
;;;428    	
;;;429       uint16 code = getBit();
000008  f7fffffe          BL       getBit
;;;430    
;;;431       // This func only reads a bit at a time, which on modern CPU's is not terribly efficient.
;;;432       // But on microcontrollers without strong integer shifting support this seems like a 
;;;433       // more reasonable approach.
;;;434       for ( ; ; )
;;;435       {
;;;436          uint16 maxCode;
;;;437    
;;;438    		 	// AD Opt
;;;439    			huffDecode_ctr++;
00000c  4e11              LDR      r6,|L15.84|
                  |L15.14|
00000e  6bb1              LDR      r1,[r6,#0x38]  ; huffDecode_ctr
000010  1c49              ADDS     r1,r1,#1
000012  63b1              STR      r1,[r6,#0x38]  ; huffDecode_ctr
;;;440    
;;;441    		 
;;;442          if (i == 16)
000014  2c10              CMP      r4,#0x10
000016  d012              BEQ      |L15.62|
;;;443             return 0;
;;;444    
;;;445          maxCode = pHuffTable->mMaxCode[i];
000018  0061              LSLS     r1,r4,#1
00001a  1949              ADDS     r1,r1,r5
00001c  8c09              LDRH     r1,[r1,#0x20]
;;;446          if ((code <= maxCode) && (maxCode != 0xFFFF))
00001e  4288              CMP      r0,r1
000020  d80f              BHI      |L15.66|
000022  4a0d              LDR      r2,|L15.88|
000024  4291              CMP      r1,r2
000026  d00c              BEQ      |L15.66|
;;;447             break;
;;;448    
;;;449          i++;
;;;450          code <<= 1;
;;;451          code |= getBit();
;;;452       }
;;;453    
;;;454       j = pHuffTable->mValPtr[i];
000028  1929              ADDS     r1,r5,r4
;;;455       j = (uint8)(j + (code - pHuffTable->mMinCode[i]));
00002a  0062              LSLS     r2,r4,#1
00002c  3140              ADDS     r1,r1,#0x40           ;454
00002e  5caa              LDRB     r2,[r5,r2]
000030  7809              LDRB     r1,[r1,#0]            ;454
000032  1a80              SUBS     r0,r0,r2
000034  1840              ADDS     r0,r0,r1
;;;456    
;;;457       return pHuffVal[j];
000036  9902              LDR      r1,[sp,#8]
000038  b2c0              UXTB     r0,r0                 ;455
00003a  5c08              LDRB     r0,[r1,r0]
;;;458    }
00003c  bdfe              POP      {r1-r7,pc}
                  |L15.62|
00003e  2000              MOVS     r0,#0                 ;443
000040  bdfe              POP      {r1-r7,pc}
                  |L15.66|
000042  1c64              ADDS     r4,r4,#1
000044  0440              LSLS     r0,r0,#17             ;450
000046  b2e4              UXTB     r4,r4                 ;449
000048  0c07              LSRS     r7,r0,#16             ;450
00004a  f7fffffe          BL       getBit
00004e  4338              ORRS     r0,r0,r7              ;451
000050  e7dd              B        |L15.14|
;;;459    //------------------------------------------------------------------------------
                          ENDP

000052  0000              DCW      0x0000
                  |L15.84|
                          DCD      ||.data||
                  |L15.88|
                          DCD      0x0000ffff

                          AREA ||i.huffExtend||, CODE, READONLY, ALIGN=1

                  huffExtend PROC
                  |symbol_number.400|
;;;415    #endif
;;;416    static int16 huffExtend(uint16 x, uint8 s)
000000  b570              PUSH     {r4-r6,lr}
;;;417    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;418       return ((x < getExtendTest(s)) ? ((int16)x + getExtendOffset(s)) : (int16)x);
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       getExtendTest
00000c  b22c              SXTH     r4,r5
00000e  42a8              CMP      r0,r5
000010  d903              BLS      |L16.26|
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       getExtendOffset
000018  1904              ADDS     r4,r0,r4
                  |L16.26|
00001a  b220              SXTH     r0,r4
;;;419    }
00001c  bd70              POP      {r4-r6,pc}
;;;420    //------------------------------------------------------------------------------
                          ENDP


                          AREA ||i.idctCols||, CODE, READONLY, ALIGN=2

                  idctCols PROC
                  |symbol_number.402|
;;;1410   #endif
;;;1411   static void idctCols(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1412   {
000002  b08d              SUB      sp,sp,#0x34
;;;1413      uint8 i;
;;;1414         
;;;1415      int16* pSrc = gCoeffBuf;
000004  4c67              LDR      r4,|L17.420|
;;;1416      
;;;1417      for (i = 0; i < 8; i++)
000006  2000              MOVS     r0,#0
000008  900a              STR      r0,[sp,#0x28]
                  |L17.10|
;;;1418      {
;;;1419   //		 if ((pSrc[1*8] | pSrc[2*8] | pSrc[3*8] | pSrc[4*8] | pSrc[5*8] | pSrc[6*8] | pSrc[7*8]) == 0) // AD: suspicious
;;;1420   // AD Opt
;;;1421   		 if ((pSrc[1*8] == 0) && (pSrc[2*8] == 0) && (pSrc[3*8] == 0) && (pSrc[4*8] == 0) && 
00000a  2110              MOVS     r1,#0x10
00000c  5e61              LDRSH    r1,[r4,r1]
00000e  2900              CMP      r1,#0
000010  d113              BNE      |L17.58|
000012  8c20              LDRH     r0,[r4,#0x20]
000014  2800              CMP      r0,#0
000016  d110              BNE      |L17.58|
000018  8e20              LDRH     r0,[r4,#0x30]
00001a  2800              CMP      r0,#0
00001c  d10d              BNE      |L17.58|
00001e  4625              MOV      r5,r4
000020  3540              ADDS     r5,r5,#0x40
000022  8828              LDRH     r0,[r5,#0]
000024  2800              CMP      r0,#0
000026  d108              BNE      |L17.58|
;;;1422   			 (pSrc[5*8] == 0) && (pSrc[6*8] == 0) && (pSrc[7*8] == 0) ) // AD Opt
000028  8a28              LDRH     r0,[r5,#0x10]
00002a  2800              CMP      r0,#0
00002c  d105              BNE      |L17.58|
00002e  8c28              LDRH     r0,[r5,#0x20]
000030  2800              CMP      r0,#0
000032  d102              BNE      |L17.58|
000034  8e28              LDRH     r0,[r5,#0x30]
000036  2800              CMP      r0,#0
000038  d07e              BEQ      |L17.312|
                  |L17.58|
;;;1423   // End AD Opt
;;;1424   		 {
;;;1425            // Short circuit the 1D IDCT if only the DC component is non-zero
;;;1426            uint8 c = clamp(PJPG_DESCALE(*pSrc) + 128);
;;;1427            *(pSrc+0*8) = c;
;;;1428            *(pSrc+1*8) = c;
;;;1429            *(pSrc+2*8) = c;
;;;1430            *(pSrc+3*8) = c;
;;;1431            *(pSrc+4*8) = c;
;;;1432            *(pSrc+5*8) = c;
;;;1433            *(pSrc+6*8) = c;
;;;1434            *(pSrc+7*8) = c;
;;;1435         }
;;;1436         else
;;;1437         {
;;;1438            int16 src4 = *(pSrc+5*8);
00003a  4625              MOV      r5,r4
00003c  3540              ADDS     r5,r5,#0x40
00003e  8a28              LDRH     r0,[r5,#0x10]
;;;1439            int16 src7 = *(pSrc+3*8);
000040  8e22              LDRH     r2,[r4,#0x30]
;;;1440            int16 x4  = src4 - src7;
000042  1a83              SUBS     r3,r0,r2
000044  b21b              SXTH     r3,r3
;;;1441            int16 x7  = src4 + src7;
000046  1887              ADDS     r7,r0,r2
;;;1442   
;;;1443            int16 src5 = *(pSrc+1*8);
;;;1444            int16 src6 = *(pSrc+7*8);
000048  9300              STR      r3,[sp,#0]
00004a  8e28              LDRH     r0,[r5,#0x30]
;;;1445            int16 x5  = src5 + src6;
00004c  180e              ADDS     r6,r1,r0
;;;1446            int16 x6  = src5 - src6;
00004e  1a08              SUBS     r0,r1,r0
000050  b200              SXTH     r0,r0
;;;1447   
;;;1448            int16 tmp1 = imul_b5(x4 - x6);
000052  9004              STR      r0,[sp,#0x10]
000054  1a18              SUBS     r0,r3,r0
000056  b200              SXTH     r0,r0
000058  f7fffffe          BL       imul_b5
;;;1449            int16 stg26 = imul_b4(x6) - tmp1;
00005c  9006              STR      r0,[sp,#0x18]
00005e  9804              LDR      r0,[sp,#0x10]
000060  f7fffffe          BL       imul_b4
000064  9906              LDR      r1,[sp,#0x18]
000066  1a42              SUBS     r2,r0,r1
;;;1450   
;;;1451            int16 x24 = tmp1 - imul_b2(x4);
000068  9205              STR      r2,[sp,#0x14]
00006a  9800              LDR      r0,[sp,#0]
00006c  f7fffffe          BL       imul_b2
000070  9906              LDR      r1,[sp,#0x18]
000072  1a08              SUBS     r0,r1,r0
;;;1452   
;;;1453            int16 x15 = x5 - x7;
;;;1454            int16 x17 = x5 + x7;
000074  19f1              ADDS     r1,r6,r7
000076  b209              SXTH     r1,r1
;;;1455   
;;;1456            int16 tmp2 = stg26 - x17;
000078  9100              STR      r1,[sp,#0]
00007a  9a05              LDR      r2,[sp,#0x14]
00007c  9004              STR      r0,[sp,#0x10]         ;1453
00007e  1a51              SUBS     r1,r2,r1
000080  1bf0              SUBS     r0,r6,r7              ;1453
000082  b209              SXTH     r1,r1
000084  b200              SXTH     r0,r0                 ;1453
;;;1457            int16 tmp3 = imul_b1_b3(x15) - tmp2;
000086  9103              STR      r1,[sp,#0xc]
000088  f7fffffe          BL       imul_b1_b3
00008c  9903              LDR      r1,[sp,#0xc]
00008e  1a40              SUBS     r0,r0,r1
000090  b207              SXTH     r7,r0
;;;1458            int16 x44 = tmp3 + x24;
000092  9804              LDR      r0,[sp,#0x10]
000094  1838              ADDS     r0,r7,r0
000096  b200              SXTH     r0,r0
;;;1459   
;;;1460            int16 src0 = *(pSrc+0*8);
000098  9007              STR      r0,[sp,#0x1c]
00009a  8820              LDRH     r0,[r4,#0]
;;;1461            int16 src1 = *(pSrc+4*8);
00009c  882a              LDRH     r2,[r5,#0]
;;;1462            int16 x30 = src0 + src1;
00009e  1881              ADDS     r1,r0,r2
;;;1463            int16 x31 = src0 - src1;
0000a0  9108              STR      r1,[sp,#0x20]
0000a2  1a81              SUBS     r1,r0,r2
;;;1464   
;;;1465            int16 src2 = *(pSrc+2*8);
0000a4  9106              STR      r1,[sp,#0x18]
0000a6  8c21              LDRH     r1,[r4,#0x20]
;;;1466            int16 src3 = *(pSrc+6*8);
0000a8  8c2a              LDRH     r2,[r5,#0x20]
;;;1467            int16 x12 = src2 - src3;
0000aa  1a88              SUBS     r0,r1,r2
0000ac  b200              SXTH     r0,r0
;;;1468            int16 x13 = src2 + src3;
0000ae  188e              ADDS     r6,r1,r2
;;;1469   
;;;1470            int16 x32 = imul_b1_b3(x12) - x13;
0000b0  f7fffffe          BL       imul_b1_b3
;;;1471   
;;;1472            int16 x40 = x30 + x13;
0000b4  9908              LDR      r1,[sp,#0x20]
0000b6  1b80              SUBS     r0,r0,r6              ;1470
0000b8  1989              ADDS     r1,r1,r6
0000ba  b20a              SXTH     r2,r1
;;;1473            int16 x43 = x30 - x13;
0000bc  9908              LDR      r1,[sp,#0x20]
0000be  9204              STR      r2,[sp,#0x10]
0000c0  1b89              SUBS     r1,r1,r6
0000c2  b20e              SXTH     r6,r1
;;;1474            int16 x41 = x31 + x32;
0000c4  9906              LDR      r1,[sp,#0x18]
0000c6  1809              ADDS     r1,r1,r0
0000c8  b20a              SXTH     r2,r1
;;;1475            int16 x42 = x31 - x32;
0000ca  9906              LDR      r1,[sp,#0x18]
0000cc  9208              STR      r2,[sp,#0x20]
0000ce  1a08              SUBS     r0,r1,r0
0000d0  b200              SXTH     r0,r0
;;;1476   
;;;1477            // descale, convert to unsigned and clamp to 8-bit
;;;1478            *(pSrc+0*8) = clamp(PJPG_DESCALE(x40 + x17)  + 128);
0000d2  9005              STR      r0,[sp,#0x14]
0000d4  9a04              LDR      r2,[sp,#0x10]
0000d6  9900              LDR      r1,[sp,#0]
0000d8  1850              ADDS     r0,r2,r1
0000da  3040              ADDS     r0,r0,#0x40
0000dc  09c0              LSRS     r0,r0,#7
0000de  3080              ADDS     r0,r0,#0x80
0000e0  b200              SXTH     r0,r0
0000e2  f7fffffe          BL       clamp
0000e6  8020              STRH     r0,[r4,#0]
;;;1479            *(pSrc+1*8) = clamp(PJPG_DESCALE(x41 + tmp2) + 128);
0000e8  9a08              LDR      r2,[sp,#0x20]
0000ea  9903              LDR      r1,[sp,#0xc]
0000ec  1850              ADDS     r0,r2,r1
0000ee  3040              ADDS     r0,r0,#0x40
0000f0  09c0              LSRS     r0,r0,#7
0000f2  3080              ADDS     r0,r0,#0x80
0000f4  b200              SXTH     r0,r0
0000f6  f7fffffe          BL       clamp
0000fa  8220              STRH     r0,[r4,#0x10]
;;;1480            *(pSrc+2*8) = clamp(PJPG_DESCALE(x42 + tmp3) + 128);
0000fc  9805              LDR      r0,[sp,#0x14]
0000fe  19c0              ADDS     r0,r0,r7
000100  3040              ADDS     r0,r0,#0x40
000102  09c0              LSRS     r0,r0,#7
000104  3080              ADDS     r0,r0,#0x80
000106  b200              SXTH     r0,r0
000108  f7fffffe          BL       clamp
00010c  8420              STRH     r0,[r4,#0x20]
;;;1481            *(pSrc+3*8) = clamp(PJPG_DESCALE(x43 - x44)  + 128);
00010e  9807              LDR      r0,[sp,#0x1c]
000110  1a30              SUBS     r0,r6,r0
000112  3040              ADDS     r0,r0,#0x40
000114  09c0              LSRS     r0,r0,#7
000116  3080              ADDS     r0,r0,#0x80
000118  b200              SXTH     r0,r0
00011a  f7fffffe          BL       clamp
00011e  8620              STRH     r0,[r4,#0x30]
;;;1482            *(pSrc+4*8) = clamp(PJPG_DESCALE(x43 + x44)  + 128);
000120  9807              LDR      r0,[sp,#0x1c]
000122  1830              ADDS     r0,r6,r0
000124  3040              ADDS     r0,r0,#0x40
000126  09c0              LSRS     r0,r0,#7
000128  3080              ADDS     r0,r0,#0x80
00012a  b200              SXTH     r0,r0
00012c  f7fffffe          BL       clamp
000130  8028              STRH     r0,[r5,#0]
;;;1483            *(pSrc+5*8) = clamp(PJPG_DESCALE(x42 - tmp3) + 128);
000132  9805              LDR      r0,[sp,#0x14]
000134  1bc0              SUBS     r0,r0,r7
000136  e000              B        |L17.314|
                  |L17.312|
000138  e024              B        |L17.388|
                  |L17.314|
00013a  3040              ADDS     r0,r0,#0x40
00013c  09c0              LSRS     r0,r0,#7
00013e  3080              ADDS     r0,r0,#0x80
000140  b200              SXTH     r0,r0
000142  f7fffffe          BL       clamp
000146  8228              STRH     r0,[r5,#0x10]
;;;1484            *(pSrc+6*8) = clamp(PJPG_DESCALE(x41 - tmp2) + 128);
000148  9a08              LDR      r2,[sp,#0x20]
00014a  9903              LDR      r1,[sp,#0xc]
00014c  1a50              SUBS     r0,r2,r1
00014e  3040              ADDS     r0,r0,#0x40
000150  09c0              LSRS     r0,r0,#7
000152  3080              ADDS     r0,r0,#0x80
000154  b200              SXTH     r0,r0
000156  f7fffffe          BL       clamp
00015a  8428              STRH     r0,[r5,#0x20]
;;;1485            *(pSrc+7*8) = clamp(PJPG_DESCALE(x40 - x17)  + 128);
00015c  9a04              LDR      r2,[sp,#0x10]
00015e  9900              LDR      r1,[sp,#0]
000160  1a50              SUBS     r0,r2,r1
000162  3040              ADDS     r0,r0,#0x40
000164  09c0              LSRS     r0,r0,#7
000166  3080              ADDS     r0,r0,#0x80
000168  b200              SXTH     r0,r0
00016a  f7fffffe          BL       clamp
                  |L17.366|
00016e  8628              STRH     r0,[r5,#0x30]
000170  980a              LDR      r0,[sp,#0x28]         ;1417
000172  1ca4              ADDS     r4,r4,#2              ;1417
000174  1c40              ADDS     r0,r0,#1              ;1417
000176  b2c0              UXTB     r0,r0                 ;1417
000178  900a              STR      r0,[sp,#0x28]         ;1417
00017a  2808              CMP      r0,#8                 ;1417
00017c  d200              BCS      |L17.384|
00017e  e744              B        |L17.10|
                  |L17.384|
;;;1486         }
;;;1487   
;;;1488         pSrc++;      
;;;1489      }      
;;;1490   }
000180  b00d              ADD      sp,sp,#0x34
000182  bdf0              POP      {r4-r7,pc}
                  |L17.388|
000184  2000              MOVS     r0,#0                 ;1426
000186  5e20              LDRSH    r0,[r4,r0]            ;1426
000188  3040              ADDS     r0,r0,#0x40           ;1426
00018a  09c0              LSRS     r0,r0,#7              ;1426
00018c  3080              ADDS     r0,r0,#0x80           ;1426
00018e  b200              SXTH     r0,r0                 ;1426
000190  f7fffffe          BL       clamp
000194  8020              STRH     r0,[r4,#0]            ;1427
000196  8220              STRH     r0,[r4,#0x10]         ;1428
000198  8420              STRH     r0,[r4,#0x20]         ;1429
00019a  8620              STRH     r0,[r4,#0x30]         ;1430
00019c  8028              STRH     r0,[r5,#0]            ;1431
00019e  8228              STRH     r0,[r5,#0x10]         ;1432
0001a0  8428              STRH     r0,[r5,#0x20]         ;1433
0001a2  e7e4              B        |L17.366|
;;;1491   
                          ENDP

                  |L17.420|
                          DCD      ||.bss||

                          AREA ||i.idctRows||, CODE, READONLY, ALIGN=2

                  idctRows PROC
                  |symbol_number.404|
;;;1333   #endif
;;;1334   static void idctRows(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1335   {
;;;1336      uint8 i;
;;;1337      int16* pSrc = gCoeffBuf;
000002  4c3c              LDR      r4,|L18.244|
000004  b085              SUB      sp,sp,#0x14           ;1335
;;;1338               
;;;1339      for (i = 0; i < 8; i++)
000006  2500              MOVS     r5,#0
                  |L18.8|
;;;1340      {
;;;1341   		 if ((pSrc[1] | pSrc[2] | pSrc[3] | pSrc[4] | pSrc[5] | pSrc[6] | pSrc[7]) == 0) // AD: suspicious
000008  2002              MOVS     r0,#2
00000a  2104              MOVS     r1,#4
00000c  2206              MOVS     r2,#6
00000e  2308              MOVS     r3,#8
000010  5e20              LDRSH    r0,[r4,r0]
000012  5e61              LDRSH    r1,[r4,r1]
000014  5ea2              LDRSH    r2,[r4,r2]
000016  5ee3              LDRSH    r3,[r4,r3]
000018  4301              ORRS     r1,r1,r0
00001a  4313              ORRS     r3,r3,r2
00001c  4319              ORRS     r1,r1,r3
00001e  260a              MOVS     r6,#0xa
000020  5fa6              LDRSH    r6,[r4,r6]
000022  230c              MOVS     r3,#0xc
000024  5ee3              LDRSH    r3,[r4,r3]
000026  4331              ORRS     r1,r1,r6
000028  430b              ORRS     r3,r3,r1
00002a  210e              MOVS     r1,#0xe
00002c  5e61              LDRSH    r1,[r4,r1]
00002e  430b              ORRS     r3,r3,r1
000030  d057              BEQ      |L18.226|
;;;1342         {
;;;1343            // Short circuit the 1D IDCT if only the DC component is non-zero
;;;1344            int16 src0 = *pSrc;
;;;1345   
;;;1346            *(pSrc+1) = src0;
;;;1347            *(pSrc+2) = src0;
;;;1348            *(pSrc+3) = src0;
;;;1349            *(pSrc+4) = src0;
;;;1350            *(pSrc+5) = src0;
;;;1351            *(pSrc+6) = src0;
;;;1352            *(pSrc+7) = src0;
;;;1353         }
;;;1354         else
;;;1355         {
;;;1356            int16 src4 = *(pSrc+5);
;;;1357            int16 src7 = *(pSrc+3);
;;;1358            int16 x4  = src4 - src7;
000032  1ab3              SUBS     r3,r6,r2
;;;1359            int16 x7  = src4 + src7;
000034  18b7              ADDS     r7,r6,r2
;;;1360   
;;;1361            int16 src5 = *(pSrc+1);
;;;1362            int16 src6 = *(pSrc+7);
;;;1363            int16 x5  = src5 + src6;
000036  1846              ADDS     r6,r0,r1
;;;1364            int16 x6  = src5 - src6;
000038  1a40              SUBS     r0,r0,r1
00003a  b21b              SXTH     r3,r3                 ;1358
00003c  b200              SXTH     r0,r0
;;;1365   
;;;1366            int16 tmp1 = imul_b5(x4 - x6);
00003e  9000              STR      r0,[sp,#0]
000040  1a18              SUBS     r0,r3,r0
000042  9301              STR      r3,[sp,#4]
000044  b200              SXTH     r0,r0
000046  f7fffffe          BL       imul_b5
;;;1367            int16 stg26 = imul_b4(x6) - tmp1;
00004a  9002              STR      r0,[sp,#8]
00004c  9800              LDR      r0,[sp,#0]
00004e  f7fffffe          BL       imul_b4
000052  9902              LDR      r1,[sp,#8]
000054  1a42              SUBS     r2,r0,r1
;;;1368   
;;;1369            int16 x24 = tmp1 - imul_b2(x4);
000056  9200              STR      r2,[sp,#0]
000058  9801              LDR      r0,[sp,#4]
00005a  f7fffffe          BL       imul_b2
00005e  9902              LDR      r1,[sp,#8]
;;;1370   
;;;1371            int16 x15 = x5 - x7;
;;;1372            int16 x17 = x5 + x7;
;;;1373   
;;;1374            int16 tmp2 = stg26 - x17;
000060  9a00              LDR      r2,[sp,#0]
000062  1a08              SUBS     r0,r1,r0              ;1369
000064  19f1              ADDS     r1,r6,r7              ;1372
000066  9002              STR      r0,[sp,#8]            ;1371
000068  9101              STR      r1,[sp,#4]
00006a  1bf0              SUBS     r0,r6,r7              ;1371
00006c  1a51              SUBS     r1,r2,r1
00006e  b200              SXTH     r0,r0                 ;1371
;;;1375            int16 tmp3 = imul_b1_b3(x15) - tmp2;
000070  9100              STR      r1,[sp,#0]
000072  f7fffffe          BL       imul_b1_b3
000076  9900              LDR      r1,[sp,#0]
000078  1a47              SUBS     r7,r0,r1
;;;1376            int16 x44 = tmp3 + x24;
00007a  9802              LDR      r0,[sp,#8]
00007c  1839              ADDS     r1,r7,r0
;;;1377   
;;;1378            int16 src0 = *(pSrc+0);
00007e  9104              STR      r1,[sp,#0x10]
000080  8820              LDRH     r0,[r4,#0]
;;;1379            int16 src1 = *(pSrc+4);
000082  8921              LDRH     r1,[r4,#8]
;;;1380            int16 x30 = src0 + src1;
000084  1842              ADDS     r2,r0,r1
;;;1381            int16 x31 = src0 - src1;
000086  9203              STR      r2,[sp,#0xc]
000088  1a42              SUBS     r2,r0,r1
;;;1382   
;;;1383            int16 src2 = *(pSrc+2);
00008a  9202              STR      r2,[sp,#8]
00008c  88a2              LDRH     r2,[r4,#4]
;;;1384            int16 src3 = *(pSrc+6);
00008e  89a1              LDRH     r1,[r4,#0xc]
;;;1385            int16 x12 = src2 - src3;
000090  1a50              SUBS     r0,r2,r1
000092  b200              SXTH     r0,r0
;;;1386            int16 x13 = src2 + src3;
000094  1856              ADDS     r6,r2,r1
;;;1387   
;;;1388            int16 x32 = imul_b1_b3(x12) - x13;
000096  f7fffffe          BL       imul_b1_b3
;;;1389   
;;;1390            int16 x40 = x30 + x13;
00009a  9a03              LDR      r2,[sp,#0xc]
00009c  1b81              SUBS     r1,r0,r6              ;1388
00009e  1990              ADDS     r0,r2,r6
;;;1391            int16 x43 = x30 - x13;
0000a0  1b96              SUBS     r6,r2,r6
;;;1392            int16 x41 = x31 + x32;
0000a2  9a02              LDR      r2,[sp,#8]
0000a4  1853              ADDS     r3,r2,r1
;;;1393            int16 x42 = x31 - x32;
0000a6  1a52              SUBS     r2,r2,r1
;;;1394   
;;;1395            *(pSrc+0) = x40 + x17;
0000a8  9901              LDR      r1,[sp,#4]
0000aa  1841              ADDS     r1,r0,r1
0000ac  8021              STRH     r1,[r4,#0]
;;;1396            *(pSrc+1) = x41 + tmp2;
0000ae  9900              LDR      r1,[sp,#0]
0000b0  1859              ADDS     r1,r3,r1
0000b2  8061              STRH     r1,[r4,#2]
;;;1397            *(pSrc+2) = x42 + tmp3;
0000b4  19d1              ADDS     r1,r2,r7
0000b6  80a1              STRH     r1,[r4,#4]
;;;1398            *(pSrc+3) = x43 - x44;
0000b8  9904              LDR      r1,[sp,#0x10]
0000ba  1a71              SUBS     r1,r6,r1
0000bc  80e1              STRH     r1,[r4,#6]
;;;1399            *(pSrc+4) = x43 + x44;
0000be  9904              LDR      r1,[sp,#0x10]
0000c0  1871              ADDS     r1,r6,r1
0000c2  8121              STRH     r1,[r4,#8]
;;;1400            *(pSrc+5) = x42 - tmp3;
0000c4  1bd1              SUBS     r1,r2,r7
0000c6  8161              STRH     r1,[r4,#0xa]
;;;1401            *(pSrc+6) = x41 - tmp2;
0000c8  9900              LDR      r1,[sp,#0]
0000ca  1a59              SUBS     r1,r3,r1
0000cc  81a1              STRH     r1,[r4,#0xc]
;;;1402            *(pSrc+7) = x40 - x17;
0000ce  9901              LDR      r1,[sp,#4]
0000d0  1a40              SUBS     r0,r0,r1
                  |L18.210|
0000d2  81e0              STRH     r0,[r4,#0xe]
0000d4  1c6d              ADDS     r5,r5,#1
0000d6  b2ed              UXTB     r5,r5                 ;1339
0000d8  3410              ADDS     r4,r4,#0x10           ;1339
0000da  2d08              CMP      r5,#8                 ;1339
0000dc  d394              BCC      |L18.8|
;;;1403         }
;;;1404                     
;;;1405         pSrc += 8;
;;;1406      }      
;;;1407   }
0000de  b005              ADD      sp,sp,#0x14
0000e0  bdf0              POP      {r4-r7,pc}
                  |L18.226|
0000e2  8820              LDRH     r0,[r4,#0]            ;1344
0000e4  8060              STRH     r0,[r4,#2]            ;1346
0000e6  80a0              STRH     r0,[r4,#4]            ;1347
0000e8  80e0              STRH     r0,[r4,#6]            ;1348
0000ea  8120              STRH     r0,[r4,#8]            ;1349
0000ec  8160              STRH     r0,[r4,#0xa]          ;1350
0000ee  81a0              STRH     r0,[r4,#0xc]          ;1351
0000f0  e7ef              B        |L18.210|
;;;1408   #if LESS_INLINING
                          ENDP

0000f2  0000              DCW      0x0000
                  |L18.244|
                          DCD      ||.bss||

                          AREA ||i.imul_b1_b3||, CODE, READONLY, ALIGN=1

                  imul_b1_b3 PROC
;;;1283   // 362, 256+106
;;;1284   static PJPG_INLINE int16 imul_b1_b3(int16 w)
000000  21ff              MOVS     r1,#0xff
;;;1285   {
;;;1286      long x = (w * 362L);
000002  316b              ADDS     r1,r1,#0x6b
000004  4348              MULS     r0,r1,r0
000006  3080              ADDS     r0,r0,#0x80
;;;1287      x += 128L;
;;;1288      return (int16)(PJPG_ARITH_SHIFT_RIGHT_8_L(x));
000008  1200              ASRS     r0,r0,#8
00000a  b200              SXTH     r0,r0
;;;1289   }
00000c  4770              BX       lr
;;;1290   
                          ENDP


                          AREA ||i.imul_b2||, CODE, READONLY, ALIGN=2

                  imul_b2 PROC
;;;1292   // 669, 256+256+157
;;;1293   static PJPG_INLINE int16 imul_b2(int16 w)
000000  4902              LDR      r1,|L20.12|
;;;1294   {
;;;1295      long x = (w * 669L);
000002  4348              MULS     r0,r1,r0
000004  3080              ADDS     r0,r0,#0x80
;;;1296      x += 128L;
;;;1297      return (int16)(PJPG_ARITH_SHIFT_RIGHT_8_L(x));
000006  1200              ASRS     r0,r0,#8
000008  b200              SXTH     r0,r0
;;;1298   }
00000a  4770              BX       lr
;;;1299   
                          ENDP

                  |L20.12|
                          DCD      0x0000029d

                          AREA ||i.imul_b4||, CODE, READONLY, ALIGN=1

                  imul_b4 PROC
;;;1301   // 277, 256+21
;;;1302   static PJPG_INLINE int16 imul_b4(int16 w)
000000  21ff              MOVS     r1,#0xff
;;;1303   {
;;;1304      long x = (w * 277L);
000002  3116              ADDS     r1,r1,#0x16
000004  4348              MULS     r0,r1,r0
000006  3080              ADDS     r0,r0,#0x80
;;;1305      x += 128L;
;;;1306      return (int16)(PJPG_ARITH_SHIFT_RIGHT_8_L(x));
000008  1200              ASRS     r0,r0,#8
00000a  b200              SXTH     r0,r0
;;;1307   }
00000c  4770              BX       lr
;;;1308   
                          ENDP


                          AREA ||i.imul_b5||, CODE, READONLY, ALIGN=1

                  imul_b5 PROC
;;;1310   // 196, 196
;;;1311   static PJPG_INLINE int16 imul_b5(int16 w)
000000  21c4              MOVS     r1,#0xc4
;;;1312   {
;;;1313      long x = (w * 196L);
000002  4348              MULS     r0,r1,r0
000004  3080              ADDS     r0,r0,#0x80
;;;1314      x += 128L;
;;;1315      return (int16)(PJPG_ARITH_SHIFT_RIGHT_8_L(x));
000006  1200              ASRS     r0,r0,#8
000008  b200              SXTH     r0,r0
;;;1316   }
00000a  4770              BX       lr
;;;1317   
                          ENDP


                          AREA ||i.init||, CODE, READONLY, ALIGN=2

                  init PROC
;;;980    //------------------------------------------------------------------------------
;;;981    static uint8 init(void)
000000  b510              PUSH     {r4,lr}
;;;982    {
;;;983       gImageXSize = 0;
000002  480b              LDR      r0,|L23.48|
000004  2100              MOVS     r1,#0
000006  8201              STRH     r1,[r0,#0x10]
;;;984       gImageYSize = 0;
000008  8241              STRH     r1,[r0,#0x12]
;;;985       gCompsInFrame = 0;
00000a  7181              STRB     r1,[r0,#6]
;;;986       gRestartInterval = 0;
00000c  8281              STRH     r1,[r0,#0x14]
;;;987       gCompsInScan = 0;
00000e  71c1              STRB     r1,[r0,#7]
;;;988       gValidHuffTables = 0;
000010  7001              STRB     r1,[r0,#0]
;;;989       gValidQuantTables = 0;
000012  7041              STRB     r1,[r0,#1]
;;;990       gTemFlag = 0;
000014  7081              STRB     r1,[r0,#2]
;;;991       gInBufOfs = 0;
000016  70c1              STRB     r1,[r0,#3]
;;;992       gInBufLeft = 0;
000018  7101              STRB     r1,[r0,#4]
;;;993       gBitBuf = 0;
00001a  81c1              STRH     r1,[r0,#0xe]
;;;994       gBitsLeft = 8;
00001c  2108              MOVS     r1,#8
00001e  7141              STRB     r1,[r0,#5]
;;;995    
;;;996       getBits1(8);
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       getBits1
;;;997       getBits1(8);
000026  2008              MOVS     r0,#8
000028  f7fffffe          BL       getBits1
;;;998    
;;;999       return 0;
00002c  2000              MOVS     r0,#0
;;;1000   }
00002e  bd10              POP      {r4,pc}
;;;1001   //------------------------------------------------------------------------------
                          ENDP

                  |L23.48|
                          DCD      ||.data||

                          AREA ||i.initFrame||, CODE, READONLY, ALIGN=2

                  initFrame PROC
;;;1151   //------------------------------------------------------------------------------
;;;1152   static uint8 initFrame(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1153   {
;;;1154      if (gCompsInFrame == 1)
000002  493f              LDR      r1,|L24.256|
000004  2200              MOVS     r2,#0
;;;1155      {
;;;1156         if ((gCompHSamp[0] != 1) || (gCompVSamp[0] != 1))
;;;1157            return PJPG_UNSUPPORTED_SAMP_FACTORS;
;;;1158   
;;;1159         gScanType = PJPG_GRAYSCALE;
;;;1160   
;;;1161         gMaxBlocksPerMCU = 1;
;;;1162         gMCUOrg[0] = 0;
000006  4608              MOV      r0,r1
000008  304a              ADDS     r0,r0,#0x4a
00000a  4605              MOV      r5,r0
00000c  3d27              SUBS     r5,r5,#0x27
00000e  798c              LDRB     r4,[r1,#6]            ;1154  ; gCompsInFrame
000010  782e              LDRB     r6,[r5,#0]            ;1156
000012  1cef              ADDS     r7,r5,#3              ;1156
000014  2301              MOVS     r3,#1                 ;1154
000016  783d              LDRB     r5,[r7,#0]            ;1156
000018  2c01              CMP      r4,#1                 ;1154
00001a  d003              BEQ      |L24.36|
;;;1163   
;;;1164         gMaxMCUXSize     = 8;
;;;1165         gMaxMCUYSize     = 8;
;;;1166      }
;;;1167      else if (gCompsInFrame == 3)
00001c  2c03              CMP      r4,#3
00001e  d009              BEQ      |L24.52|
;;;1168      {
;;;1169         if ( ((gCompHSamp[1] != 1) || (gCompVSamp[1] != 1)) ||
;;;1170            ((gCompHSamp[2] != 1) || (gCompVSamp[2] != 1)) )
;;;1171            return PJPG_UNSUPPORTED_SAMP_FACTORS;
;;;1172   
;;;1173         if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 1))
;;;1174         {
;;;1175            gScanType = PJPG_YH1V1;
;;;1176   
;;;1177            gMaxBlocksPerMCU = 3;
;;;1178            gMCUOrg[0] = 0;
;;;1179            gMCUOrg[1] = 1;
;;;1180            gMCUOrg[2] = 2;
;;;1181                     
;;;1182            gMaxMCUXSize = 8;
;;;1183            gMaxMCUYSize = 8;
;;;1184         }
;;;1185         else if ((gCompHSamp[0] == 1) && (gCompVSamp[0] == 2))
;;;1186         {
;;;1187            gScanType = PJPG_YH1V2;
;;;1188   
;;;1189            gMaxBlocksPerMCU = 4;
;;;1190            gMCUOrg[0] = 0;
;;;1191            gMCUOrg[1] = 0;
;;;1192            gMCUOrg[2] = 1;
;;;1193            gMCUOrg[3] = 2;
;;;1194   
;;;1195            gMaxMCUXSize = 8;
;;;1196            gMaxMCUYSize = 16;
;;;1197         }
;;;1198         else if ((gCompHSamp[0] == 2) && (gCompVSamp[0] == 1))
;;;1199         {
;;;1200            gScanType = PJPG_YH2V1;
;;;1201   
;;;1202            gMaxBlocksPerMCU = 4;
;;;1203            gMCUOrg[0] = 0;
;;;1204            gMCUOrg[1] = 0;
;;;1205            gMCUOrg[2] = 1;
;;;1206            gMCUOrg[3] = 2;
;;;1207   
;;;1208            gMaxMCUXSize = 16;
;;;1209            gMaxMCUYSize = 8;
;;;1210         }
;;;1211         else if ((gCompHSamp[0] == 2) && (gCompVSamp[0] == 2))
;;;1212         {
;;;1213            gScanType = PJPG_YH2V2;
;;;1214   
;;;1215            gMaxBlocksPerMCU = 6;
;;;1216            gMCUOrg[0] = 0;
;;;1217            gMCUOrg[1] = 0;
;;;1218            gMCUOrg[2] = 0;
;;;1219            gMCUOrg[3] = 0;
;;;1220            gMCUOrg[4] = 1;
;;;1221            gMCUOrg[5] = 2;
;;;1222   
;;;1223            gMaxMCUXSize = 16;
;;;1224            gMaxMCUYSize = 16;
;;;1225         }
;;;1226         else
;;;1227            return PJPG_UNSUPPORTED_SAMP_FACTORS;
;;;1228      }
;;;1229      else
;;;1230         return PJPG_UNSUPPORTED_COLORSPACE;
000020  201a              MOVS     r0,#0x1a
;;;1231   
;;;1232      gMaxMCUSPerRow = (gImageXSize + (gMaxMCUXSize - 1)) >> ((gMaxMCUXSize == 8) ? 3 : 4);
;;;1233      gMaxMCUSPerCol = (gImageYSize + (gMaxMCUYSize - 1)) >> ((gMaxMCUYSize == 8) ? 3 : 4);
;;;1234      
;;;1235      gNumMCUSRemaining = gMaxMCUSPerRow * gMaxMCUSPerCol;
;;;1236      
;;;1237      return 0;
;;;1238   }
000022  bdf0              POP      {r4-r7,pc}
                  |L24.36|
000024  2e01              CMP      r6,#1                 ;1156
000026  d14e              BNE      |L24.198|
000028  2d01              CMP      r5,#1                 ;1156
00002a  d14c              BNE      |L24.198|
00002c  720a              STRB     r2,[r1,#8]            ;1159
00002e  724b              STRB     r3,[r1,#9]            ;1161
000030  7002              STRB     r2,[r0,#0]            ;1162
000032  e021              B        |L24.120|
                  |L24.52|
000034  4c32              LDR      r4,|L24.256|
000036  3423              ADDS     r4,r4,#0x23           ;1169
000038  7864              LDRB     r4,[r4,#1]            ;1169  ; gCompHSamp
00003a  2c01              CMP      r4,#1                 ;1169
00003c  d143              BNE      |L24.198|
00003e  787c              LDRB     r4,[r7,#1]            ;1169  ; gCompVSamp
000040  2c01              CMP      r4,#1                 ;1169
000042  d140              BNE      |L24.198|
000044  4c2e              LDR      r4,|L24.256|
000046  3423              ADDS     r4,r4,#0x23           ;1170
000048  78a4              LDRB     r4,[r4,#2]            ;1170  ; gCompHSamp
00004a  2c01              CMP      r4,#1                 ;1170
00004c  d13b              BNE      |L24.198|
00004e  78bc              LDRB     r4,[r7,#2]            ;1170  ; gCompVSamp
000050  2c01              CMP      r4,#1                 ;1170
000052  d138              BNE      |L24.198|
000054  2402              MOVS     r4,#2                 ;1180
000056  2704              MOVS     r7,#4                 ;1189
000058  2e01              CMP      r6,#1                 ;1173
00005a  d002              BEQ      |L24.98|
00005c  2e02              CMP      r6,#2                 ;1198
00005e  d02e              BEQ      |L24.190|
000060  e031              B        |L24.198|
                  |L24.98|
000062  2603              MOVS     r6,#3                 ;1154
000064  2d01              CMP      r5,#1                 ;1173
000066  d002              BEQ      |L24.110|
000068  2d02              CMP      r5,#2                 ;1185
00006a  d007              BEQ      |L24.124|
00006c  e02b              B        |L24.198|
                  |L24.110|
00006e  720b              STRB     r3,[r1,#8]            ;1175
000070  724e              STRB     r6,[r1,#9]            ;1177
000072  7002              STRB     r2,[r0,#0]            ;1178
000074  7043              STRB     r3,[r0,#1]            ;1179
000076  7084              STRB     r4,[r0,#2]            ;1180
                  |L24.120|
000078  2008              MOVS     r0,#8                 ;1182
00007a  e03a              B        |L24.242|
                  |L24.124|
00007c  720e              STRB     r6,[r1,#8]            ;1187
00007e  724f              STRB     r7,[r1,#9]            ;1189
000080  7002              STRB     r2,[r0,#0]            ;1190
000082  7042              STRB     r2,[r0,#1]            ;1191
000084  7083              STRB     r3,[r0,#2]            ;1192
000086  70c4              STRB     r4,[r0,#3]            ;1193
000088  2008              MOVS     r0,#8                 ;1195
00008a  7288              STRB     r0,[r1,#0xa]          ;1195
00008c  2010              MOVS     r0,#0x10              ;1196
                  |L24.142|
00008e  72c8              STRB     r0,[r1,#0xb]          ;1183
000090  8a08              LDRH     r0,[r1,#0x10]         ;1232  ; gImageXSize
000092  7a8a              LDRB     r2,[r1,#0xa]          ;1232  ; gMaxMCUXSize
000094  1880              ADDS     r0,r0,r2              ;1232
000096  1e40              SUBS     r0,r0,#1              ;1232
000098  2a08              CMP      r2,#8                 ;1232
00009a  d02c              BEQ      |L24.246|
00009c  2204              MOVS     r2,#4                 ;1232
                  |L24.158|
00009e  4110              ASRS     r0,r0,r2              ;1232
0000a0  b282              UXTH     r2,r0                 ;1232
0000a2  834a              STRH     r2,[r1,#0x1a]         ;1232
0000a4  8a48              LDRH     r0,[r1,#0x12]         ;1233  ; gImageYSize
0000a6  7acb              LDRB     r3,[r1,#0xb]          ;1233  ; gMaxMCUYSize
0000a8  18c0              ADDS     r0,r0,r3              ;1233
0000aa  1e40              SUBS     r0,r0,#1              ;1233
0000ac  2b08              CMP      r3,#8                 ;1233
0000ae  d024              BEQ      |L24.250|
0000b0  2304              MOVS     r3,#4                 ;1233
                  |L24.178|
0000b2  4118              ASRS     r0,r0,r3              ;1233
0000b4  8388              STRH     r0,[r1,#0x1c]         ;1233
0000b6  4342              MULS     r2,r0,r2              ;1235
0000b8  83ca              STRH     r2,[r1,#0x1e]         ;1235
0000ba  2000              MOVS     r0,#0                 ;1237
0000bc  bdf0              POP      {r4-r7,pc}
                  |L24.190|
0000be  2d01              CMP      r5,#1                 ;1198
0000c0  d003              BEQ      |L24.202|
0000c2  2d02              CMP      r5,#2                 ;1211
0000c4  d00b              BEQ      |L24.222|
                  |L24.198|
0000c6  201b              MOVS     r0,#0x1b              ;1227
0000c8  bdf0              POP      {r4-r7,pc}
                  |L24.202|
0000ca  720c              STRB     r4,[r1,#8]            ;1200
0000cc  724f              STRB     r7,[r1,#9]            ;1202
0000ce  7002              STRB     r2,[r0,#0]            ;1203
0000d0  7042              STRB     r2,[r0,#1]            ;1204
0000d2  7083              STRB     r3,[r0,#2]            ;1205
0000d4  70c4              STRB     r4,[r0,#3]            ;1206
0000d6  2010              MOVS     r0,#0x10              ;1208
0000d8  7288              STRB     r0,[r1,#0xa]          ;1208
0000da  2008              MOVS     r0,#8                 ;1209
0000dc  e7d7              B        |L24.142|
                  |L24.222|
0000de  720f              STRB     r7,[r1,#8]            ;1213
0000e0  2506              MOVS     r5,#6                 ;1215
0000e2  724d              STRB     r5,[r1,#9]            ;1215
0000e4  7002              STRB     r2,[r0,#0]            ;1216
0000e6  7042              STRB     r2,[r0,#1]            ;1217
0000e8  7082              STRB     r2,[r0,#2]            ;1218
0000ea  70c2              STRB     r2,[r0,#3]            ;1219
0000ec  7103              STRB     r3,[r0,#4]            ;1220
0000ee  7144              STRB     r4,[r0,#5]            ;1221
0000f0  2010              MOVS     r0,#0x10              ;1223
                  |L24.242|
0000f2  7288              STRB     r0,[r1,#0xa]          ;1164
0000f4  e7cb              B        |L24.142|
                  |L24.246|
0000f6  2203              MOVS     r2,#3                 ;1232
0000f8  e7d1              B        |L24.158|
                  |L24.250|
0000fa  2303              MOVS     r3,#3                 ;1233
0000fc  e7d9              B        |L24.178|
;;;1239   //----------------------------------------------------------------------------
                          ENDP

0000fe  0000              DCW      0x0000
                  |L24.256|
                          DCD      ||.data||

                          AREA ||i.initScan||, CODE, READONLY, ALIGN=2

                  initScan PROC
;;;1119   //------------------------------------------------------------------------------
;;;1120   static uint8 initScan(void)
000000  b5fe              PUSH     {r1-r7,lr}
000002  2500              MOVS     r5,#0
000004  4668              MOV      r0,sp
000006  7105              STRB     r5,[r0,#4]
000008  f7fffffe          BL       processMarkers
00000c  2800              CMP      r0,#0
00000e  d109              BNE      |L25.36|
000010  4668              MOV      r0,sp
000012  7800              LDRB     r0,[r0,#0]
000014  28d9              CMP      r0,#0xd9
000016  d001              BEQ      |L25.28|
000018  28da              CMP      r0,#0xda
00001a  d001              BEQ      |L25.32|
                  |L25.28|
00001c  2012              MOVS     r0,#0x12
                  |L25.30|
;;;1121   {
;;;1122      uint8 foundEOI;
;;;1123      uint8 status = locateSOSMarker(&foundEOI);
;;;1124      if (status)
;;;1125         return status;
;;;1126      if (foundEOI)
;;;1127         return PJPG_UNEXPECTED_MARKER;
;;;1128      
;;;1129      status = checkHuffTables();
;;;1130      if (status)
;;;1131         return status;
;;;1132   
;;;1133      status = checkQuantTables();
;;;1134      if (status)
;;;1135         return status;
;;;1136   
;;;1137      gLastDC[0] = 0;
;;;1138      gLastDC[1] = 0;
;;;1139      gLastDC[2] = 0;
;;;1140   
;;;1141      if (gRestartInterval)
;;;1142      {
;;;1143         gRestartsLeft = gRestartInterval;
;;;1144         gNextRestartNum = 0;
;;;1145      }
;;;1146   
;;;1147      fixInBuffer();
;;;1148   
;;;1149      return 0;
;;;1150   }
00001e  bdfe              POP      {r1-r7,pc}
                  |L25.32|
000020  f7fffffe          BL       readSOSMarker
                  |L25.36|
000024  2800              CMP      r0,#0                 ;1124
000026  d1fa              BNE      |L25.30|
000028  4c28              LDR      r4,|L25.204|
00002a  2100              MOVS     r1,#0                 ;1124
00002c  7826              LDRB     r6,[r4,#0]            ;1124
00002e  79e3              LDRB     r3,[r4,#7]            ;1124
000030  e017              B        |L25.98|
                  |L25.50|
000032  4826              LDR      r0,|L25.204|
000034  4a25              LDR      r2,|L25.204|
000036  302c              ADDS     r0,r0,#0x2c           ;1124
000038  5c40              LDRB     r0,[r0,r1]            ;1124
00003a  322f              ADDS     r2,r2,#0x2f           ;1124
00003c  5c17              LDRB     r7,[r2,r0]            ;1124
00003e  1cd2              ADDS     r2,r2,#3              ;1124
000040  5c10              LDRB     r0,[r2,r0]            ;1124
000042  1c80              ADDS     r0,r0,#2              ;1124
000044  b2c0              UXTB     r0,r0                 ;1124
000046  4684              MOV      r12,r0                ;1124
000048  2001              MOVS     r0,#1                 ;1124
00004a  4602              MOV      r2,r0                 ;1124
00004c  40ba              LSLS     r2,r2,r7              ;1124
00004e  4232              TST      r2,r6                 ;1124
000050  d003              BEQ      |L25.90|
000052  4662              MOV      r2,r12                ;1124
000054  4090              LSLS     r0,r0,r2              ;1124
000056  4230              TST      r0,r6                 ;1124
000058  d101              BNE      |L25.94|
                  |L25.90|
00005a  2018              MOVS     r0,#0x18              ;1124
00005c  bdfe              POP      {r1-r7,pc}
                  |L25.94|
00005e  1c49              ADDS     r1,r1,#1
000060  b2c9              UXTB     r1,r1
                  |L25.98|
000062  4299              CMP      r1,r3
000064  d3e5              BCC      |L25.50|
000066  4a19              LDR      r2,|L25.204|
000068  2000              MOVS     r0,#0
00006a  322c              ADDS     r2,r2,#0x2c
00006c  1ed7              SUBS     r7,r2,#3
00006e  7861              LDRB     r1,[r4,#1]
000070  e00c              B        |L25.140|
                  |L25.114|
000072  5c16              LDRB     r6,[r2,r0]
000074  5dbe              LDRB     r6,[r7,r6]
000076  2e00              CMP      r6,#0
000078  d001              BEQ      |L25.126|
00007a  2602              MOVS     r6,#2
00007c  e000              B        |L25.128|
                  |L25.126|
00007e  2601              MOVS     r6,#1
                  |L25.128|
000080  4231              TST      r1,r6
000082  d101              BNE      |L25.136|
000084  2017              MOVS     r0,#0x17
000086  bdfe              POP      {r1-r7,pc}
                  |L25.136|
000088  1c40              ADDS     r0,r0,#1
00008a  b2c0              UXTB     r0,r0
                  |L25.140|
00008c  4298              CMP      r0,r3
00008e  d3f0              BCC      |L25.114|
000090  480e              LDR      r0,|L25.204|
000092  3044              ADDS     r0,r0,#0x44           ;1137
000094  8005              STRH     r5,[r0,#0]            ;1137
000096  8045              STRH     r5,[r0,#2]            ;1138
000098  8085              STRH     r5,[r0,#4]            ;1139
00009a  8aa0              LDRH     r0,[r4,#0x14]         ;1141  ; gRestartInterval
00009c  2800              CMP      r0,#0                 ;1141
00009e  d001              BEQ      |L25.164|
0000a0  8320              STRH     r0,[r4,#0x18]         ;1143
0000a2  82e5              STRH     r5,[r4,#0x16]         ;1144
                  |L25.164|
0000a4  7960              LDRB     r0,[r4,#5]            ;1144  ; gBitsLeft
0000a6  2800              CMP      r0,#0                 ;1144
0000a8  d002              BEQ      |L25.176|
0000aa  7ba0              LDRB     r0,[r4,#0xe]          ;1144  ; gBitBuf
0000ac  f7fffffe          BL       stuffChar
                  |L25.176|
0000b0  89e0              LDRH     r0,[r4,#0xe]          ;1144  ; gBitBuf
0000b2  0a00              LSRS     r0,r0,#8              ;1144
0000b4  f7fffffe          BL       stuffChar
0000b8  2008              MOVS     r0,#8                 ;1144
0000ba  7160              STRB     r0,[r4,#5]            ;1144
0000bc  f7fffffe          BL       getBits2
0000c0  2008              MOVS     r0,#8                 ;1144
0000c2  f7fffffe          BL       getBits2
0000c6  2000              MOVS     r0,#0                 ;1149
0000c8  bdfe              POP      {r1-r7,pc}
;;;1151   //------------------------------------------------------------------------------
                          ENDP

0000ca  0000              DCW      0x0000
                  |L25.204|
                          DCD      ||.data||

                          AREA ||i.locateSOFMarker||, CODE, READONLY, ALIGN=2

                  locateSOFMarker PROC
;;;915    // Find a start of frame (SOF) marker.
;;;916    static uint8 locateSOFMarker(void)
000000  b5f8              PUSH     {r3-r7,lr}
000002  2008              MOVS     r0,#8
000004  f7fffffe          BL       getBits1
000008  b2c4              UXTB     r4,r0
00000a  2008              MOVS     r0,#8
00000c  f7fffffe          BL       getBits1
000010  b2c0              UXTB     r0,r0
000012  2cff              CMP      r4,#0xff
000014  d101              BNE      |L26.26|
000016  28d8              CMP      r0,#0xd8
000018  d018              BEQ      |L26.76|
                  |L26.26|
00001a  2401              MOVS     r4,#1
00001c  0324              LSLS     r4,r4,#12
00001e  2513              MOVS     r5,#0x13
                  |L26.32|
000020  1e64              SUBS     r4,r4,#1
000022  0424              LSLS     r4,r4,#16
000024  0c24              LSRS     r4,r4,#16
000026  d00a              BEQ      |L26.62|
000028  4606              MOV      r6,r0
00002a  2008              MOVS     r0,#8
00002c  f7fffffe          BL       getBits1
000030  b2c0              UXTB     r0,r0
000032  2eff              CMP      r6,#0xff
000034  d1f4              BNE      |L26.32|
000036  28d8              CMP      r0,#0xd8
000038  d003              BEQ      |L26.66|
00003a  28d9              CMP      r0,#0xd9
00003c  d1f0              BNE      |L26.32|
                  |L26.62|
00003e  4628              MOV      r0,r5
                  |L26.64|
;;;917    {
;;;918       uint8 c;
;;;919    
;;;920       uint8 status = locateSOIMarker();
;;;921       if (status)
;;;922          return status;
;;;923       
;;;924       status = processMarkers(&c);
;;;925       if (status)
;;;926          return status;
;;;927    
;;;928       switch (c)
;;;929       {
;;;930          case M_SOF2:
;;;931          {
;;;932             // Progressive JPEG - not supported by picojpeg (would require too
;;;933             // much memory, or too many IDCT's for embedded systems).
;;;934             return PJPG_UNSUPPORTED_MODE;
;;;935          }
;;;936          case M_SOF0:  /* baseline DCT */
;;;937          {
;;;938             status = readSOFMarker();
;;;939             if (status)
;;;940                return status;
;;;941                
;;;942             break;
;;;943          }
;;;944          case M_SOF9:  
;;;945          {
;;;946             return PJPG_NO_ARITHMITIC_SUPPORT;
;;;947          }
;;;948          case M_SOF1:  /* extended sequential DCT */
;;;949          default:
;;;950          {
;;;951             return PJPG_UNSUPPORTED_MARKER;
;;;952          }
;;;953       }
;;;954       
;;;955       return 0;
;;;956    }
000040  bdf8              POP      {r3-r7,pc}
                  |L26.66|
000042  480d              LDR      r0,|L26.120|
000044  89c0              LDRH     r0,[r0,#0xe]  ; gBitBuf
000046  0a00              LSRS     r0,r0,#8
000048  28ff              CMP      r0,#0xff
00004a  d1f8              BNE      |L26.62|
                  |L26.76|
00004c  4668              MOV      r0,sp                 ;924
00004e  f7fffffe          BL       processMarkers
000052  2800              CMP      r0,#0                 ;925
000054  d1f4              BNE      |L26.64|
000056  4668              MOV      r0,sp                 ;928
000058  7800              LDRB     r0,[r0,#0]            ;928
00005a  28c0              CMP      r0,#0xc0              ;928
00005c  d007              BEQ      |L26.110|
00005e  28c2              CMP      r0,#0xc2              ;928
000060  d003              BEQ      |L26.106|
000062  28c9              CMP      r0,#0xc9              ;928
000064  d006              BEQ      |L26.116|
000066  2014              MOVS     r0,#0x14              ;951
000068  bdf8              POP      {r3-r7,pc}
                  |L26.106|
00006a  2025              MOVS     r0,#0x25              ;934
00006c  bdf8              POP      {r3-r7,pc}
                  |L26.110|
00006e  f7fffffe          BL       readSOFMarker
000072  bdf8              POP      {r3-r7,pc}
                  |L26.116|
000074  2011              MOVS     r0,#0x11              ;946
000076  bdf8              POP      {r3-r7,pc}
;;;957    //------------------------------------------------------------------------------
                          ENDP

                  |L26.120|
                          DCD      ||.data||

                          AREA ||i.pjpeg_decode_init||, CODE, READONLY, ALIGN=2

                  pjpeg_decode_init PROC
;;;2301   //------------------------------------------------------------------------------
;;;2302   unsigned char pjpeg_decode_init(pjpeg_image_info_t *pInfo, pjpeg_need_bytes_callback_t pNeed_bytes_callback, void *pCallback_data, unsigned char reduce)
000000  b570              PUSH     {r4-r6,lr}
;;;2303   {
000002  4604              MOV      r4,r0
;;;2304      uint8 status;
;;;2305      
;;;2306      pInfo->m_width = 0; pInfo->m_height = 0; pInfo->m_comps = 0;
000004  2000              MOVS     r0,#0
000006  6020              STR      r0,[r4,#0]
000008  6060              STR      r0,[r4,#4]
;;;2307      pInfo->m_MCUSPerRow = 0; pInfo->m_MCUSPerCol = 0;
00000a  60a0              STR      r0,[r4,#8]
00000c  60e0              STR      r0,[r4,#0xc]
;;;2308      pInfo->m_scanType = PJPG_GRAYSCALE;
00000e  6120              STR      r0,[r4,#0x10]
000010  7520              STRB     r0,[r4,#0x14]
;;;2309      pInfo->m_MCUWidth = 0; pInfo->m_MCUHeight = 0;
000012  61a0              STR      r0,[r4,#0x18]
;;;2310      pInfo->m_pMCUBufR = (unsigned char*)0; pInfo->m_pMCUBufG = (unsigned char*)0; pInfo->m_pMCUBufB = (unsigned char*)0;
000014  61e0              STR      r0,[r4,#0x1c]
000016  6220              STR      r0,[r4,#0x20]
000018  6260              STR      r0,[r4,#0x24]
;;;2311   
;;;2312      g_pNeedBytesCallback = pNeed_bytes_callback;
00001a  4d20              LDR      r5,|L27.156|
00001c  62a0              STR      r0,[r4,#0x28]
;;;2313      g_pCallback_data = pCallback_data;
;;;2314      gCallbackStatus = 0;
00001e  642a              STR      r2,[r5,#0x40]  ; g_pCallback_data
000020  63e9              STR      r1,[r5,#0x3c]  ; g_pNeedBytesCallback
000022  7328              STRB     r0,[r5,#0xc]
;;;2315      gReduce = reduce;
000024  736b              STRB     r3,[r5,#0xd]
;;;2316       
;;;2317      status = init();
000026  f7fffffe          BL       init
;;;2318      if ((status) || (gCallbackStatus))
00002a  7b29              LDRB     r1,[r5,#0xc]  ; gCallbackStatus
00002c  4602              MOV      r2,r0
00002e  430a              ORRS     r2,r2,r1
000030  d115              BNE      |L27.94|
;;;2319         return gCallbackStatus ? gCallbackStatus : status;
;;;2320      
;;;2321      status = locateSOFMarker();
000032  f7fffffe          BL       locateSOFMarker
000036  4601              MOV      r1,r0
;;;2322      if ((status) || (gCallbackStatus))
000038  7b28              LDRB     r0,[r5,#0xc]  ; gCallbackStatus
00003a  460a              MOV      r2,r1
00003c  4302              ORRS     r2,r2,r0
00003e  d002              BEQ      |L27.70|
;;;2323         return gCallbackStatus ? gCallbackStatus : status;
000040  2800              CMP      r0,#0
000042  d10f              BNE      |L27.100|
000044  e00d              B        |L27.98|
                  |L27.70|
;;;2324   
;;;2325      status = initFrame();
000046  f7fffffe          BL       initFrame
;;;2326      if ((status) || (gCallbackStatus))
00004a  7b29              LDRB     r1,[r5,#0xc]  ; gCallbackStatus
00004c  4602              MOV      r2,r0
00004e  430a              ORRS     r2,r2,r1
000050  d105              BNE      |L27.94|
;;;2327         return gCallbackStatus ? gCallbackStatus : status;
;;;2328   
;;;2329      status = initScan();
000052  f7fffffe          BL       initScan
;;;2330      if ((status) || (gCallbackStatus))
000056  7b29              LDRB     r1,[r5,#0xc]  ; gCallbackStatus
000058  4602              MOV      r2,r0
00005a  430a              ORRS     r2,r2,r1
00005c  d003              BEQ      |L27.102|
                  |L27.94|
;;;2331         return gCallbackStatus ? gCallbackStatus : status;
00005e  2900              CMP      r1,#0
000060  d000              BEQ      |L27.100|
                  |L27.98|
000062  4608              MOV      r0,r1
                  |L27.100|
;;;2332   
;;;2333      pInfo->m_width = gImageXSize; pInfo->m_height = gImageYSize; pInfo->m_comps = gCompsInFrame;
;;;2334      pInfo->m_scanType = gScanType;
;;;2335      pInfo->m_MCUSPerRow = gMaxMCUSPerRow; pInfo->m_MCUSPerCol = gMaxMCUSPerCol;
;;;2336      pInfo->m_MCUWidth = gMaxMCUXSize; pInfo->m_MCUHeight = gMaxMCUYSize;
;;;2337      pInfo->m_pMCUBufR = gMCUBufR; pInfo->m_pMCUBufG = gMCUBufG; pInfo->m_pMCUBufB = gMCUBufB;
;;;2338         
;;;2339      return 0;
;;;2340   }
000064  bd70              POP      {r4-r6,pc}
                  |L27.102|
000066  8a28              LDRH     r0,[r5,#0x10]         ;2333  ; gImageXSize
000068  6020              STR      r0,[r4,#0]            ;2333
00006a  8a68              LDRH     r0,[r5,#0x12]         ;2333  ; gImageYSize
00006c  6060              STR      r0,[r4,#4]            ;2333
00006e  79a8              LDRB     r0,[r5,#6]            ;2333  ; gCompsInFrame
000070  60a0              STR      r0,[r4,#8]            ;2334
000072  7a28              LDRB     r0,[r5,#8]            ;2334  ; gScanType
000074  7520              STRB     r0,[r4,#0x14]         ;2334
000076  8b68              LDRH     r0,[r5,#0x1a]         ;2335  ; gMaxMCUSPerRow
000078  60e0              STR      r0,[r4,#0xc]          ;2335
00007a  8ba8              LDRH     r0,[r5,#0x1c]         ;2335  ; gMaxMCUSPerCol
00007c  6120              STR      r0,[r4,#0x10]         ;2336
00007e  7aa8              LDRB     r0,[r5,#0xa]          ;2336  ; gMaxMCUXSize
000080  61a0              STR      r0,[r4,#0x18]         ;2336
000082  7ae8              LDRB     r0,[r5,#0xb]          ;2336  ; gMaxMCUYSize
000084  61e0              STR      r0,[r4,#0x1c]         ;2337
000086  4806              LDR      r0,|L27.160|
000088  6220              STR      r0,[r4,#0x20]         ;2337
00008a  30ff              ADDS     r0,r0,#0xff           ;2337
00008c  3001              ADDS     r0,#1                 ;2337
00008e  6260              STR      r0,[r4,#0x24]         ;2337
000090  30ff              ADDS     r0,r0,#0xff           ;2337
000092  3001              ADDS     r0,#1                 ;2337
000094  62a0              STR      r0,[r4,#0x28]         ;2339
000096  2000              MOVS     r0,#0                 ;2339
000098  bd70              POP      {r4-r6,pc}
                          ENDP

00009a  0000              DCW      0x0000
                  |L27.156|
                          DCD      ||.data||
                  |L27.160|
                          DCD      ||.bss||+0x80

                          AREA ||i.pjpeg_decode_mcu||, CODE, READONLY, ALIGN=2

                  pjpeg_decode_mcu PROC
;;;2282   //------------------------------------------------------------------------------
;;;2283   unsigned char pjpeg_decode_mcu(void)
000000  b510              PUSH     {r4,lr}
;;;2284   {
;;;2285      uint8 status;
;;;2286      
;;;2287      if (gCallbackStatus)
000002  4c0c              LDR      r4,|L28.52|
000004  7b20              LDRB     r0,[r4,#0xc]  ; gCallbackStatus
000006  2800              CMP      r0,#0
000008  d10c              BNE      |L28.36|
;;;2288         return gCallbackStatus;
;;;2289      
;;;2290      if (!gNumMCUSRemaining)
00000a  8be0              LDRH     r0,[r4,#0x1e]  ; gNumMCUSRemaining
00000c  2800              CMP      r0,#0
00000e  d00a              BEQ      |L28.38|
;;;2291         return PJPG_NO_MORE_BLOCKS;
;;;2292         
;;;2293      status = decodeNextMCU();
000010  f7fffffe          BL       decodeNextMCU
000014  4601              MOV      r1,r0
;;;2294      if ((status) || (gCallbackStatus))
000016  7b20              LDRB     r0,[r4,#0xc]  ; gCallbackStatus
000018  460a              MOV      r2,r1
00001a  4302              ORRS     r2,r2,r0
00001c  d005              BEQ      |L28.42|
;;;2295         return gCallbackStatus ? gCallbackStatus : status;
00001e  2800              CMP      r0,#0
000020  d100              BNE      |L28.36|
000022  4608              MOV      r0,r1
                  |L28.36|
;;;2296         
;;;2297      gNumMCUSRemaining--;
;;;2298      
;;;2299      return 0;
;;;2300   }
000024  bd10              POP      {r4,pc}
                  |L28.38|
000026  2001              MOVS     r0,#1                 ;2291
000028  bd10              POP      {r4,pc}
                  |L28.42|
00002a  8be0              LDRH     r0,[r4,#0x1e]         ;2297  ; gNumMCUSRemaining
00002c  1e40              SUBS     r0,r0,#1              ;2297
00002e  83e0              STRH     r0,[r4,#0x1e]         ;2297
000030  2000              MOVS     r0,#0                 ;2299
000032  bd10              POP      {r4,pc}
;;;2301   //------------------------------------------------------------------------------
                          ENDP

                  |L28.52|
                          DCD      ||.data||

                          AREA ||i.processMarkers||, CODE, READONLY, ALIGN=2

                  processMarkers PROC
;;;795    // encountered.
;;;796    static uint8 processMarkers(uint8* pMarker)
000000  b570              PUSH     {r4-r6,lr}
;;;797    {
000002  4604              MOV      r4,r0
                  |L29.4|
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       getBits1
00000a  b2c0              UXTB     r0,r0
00000c  28ff              CMP      r0,#0xff
00000e  d1f9              BNE      |L29.4|
                  |L29.16|
000010  2008              MOVS     r0,#8
000012  f7fffffe          BL       getBits1
000016  b2c1              UXTB     r1,r0
000018  29ff              CMP      r1,#0xff
00001a  d0f9              BEQ      |L29.16|
00001c  2900              CMP      r1,#0
00001e  d0f1              BEQ      |L29.4|
;;;798       for ( ; ; )
;;;799       {
;;;800          uint8 c = nextMarker();
;;;801    
;;;802          switch (c)
000020  29ce              CMP      r1,#0xce
000022  d02c              BEQ      |L29.126|
000024  dc1d              BGT      |L29.98|
000026  29c6              CMP      r1,#0xc6
000028  d029              BEQ      |L29.126|
00002a  dc10              BGT      |L29.78|
00002c  29c2              CMP      r1,#0xc2
00002e  d026              BEQ      |L29.126|
000030  dc06              BGT      |L29.64|
000032  2901              CMP      r1,#1
000034  d039              BEQ      |L29.170|
000036  29c0              CMP      r1,#0xc0
000038  d021              BEQ      |L29.126|
00003a  29c1              CMP      r1,#0xc1
00003c  d137              BNE      |L29.174|
00003e  e01e              B        |L29.126|
                  |L29.64|
000040  29c3              CMP      r1,#0xc3
000042  d01c              BEQ      |L29.126|
000044  29c4              CMP      r1,#0xc4
000046  d01d              BEQ      |L29.132|
000048  29c5              CMP      r1,#0xc5
00004a  d130              BNE      |L29.174|
00004c  e017              B        |L29.126|
                  |L29.78|
00004e  4608              MOV      r0,r1
000050  38c7              SUBS     r0,r0,#0xc7
000052  0003              MOVS     r3,r0
000054  f7fffffe          BL       __ARM_common_switch8
000058  07132913          DCB      0x07,0x13,0x29,0x13
00005c  13131913          DCB      0x13,0x13,0x19,0x13
000060  2b00              DCB      0x2b,0x00
                  |L29.98|
000062  4608              MOV      r0,r1
000064  38cf              SUBS     r0,r0,#0xcf
000066  0003              MOVS     r3,r0
000068  f7fffffe          BL       __ARM_common_switch8
00006c  0f091f1f          DCB      0x0f,0x09,0x1f,0x1f
000070  1f1f1f1f          DCB      0x1f,0x1f,0x1f,0x1f
000074  1f1f0909          DCB      0x1f,0x1f,0x09,0x09
000078  09112114          DCB      0x09,0x11,0x21,0x14
00007c  2100              DCB      0x21,0x00
                  |L29.126|
;;;803          {
;;;804             case M_SOF0:
;;;805             case M_SOF1:
;;;806             case M_SOF2:
;;;807             case M_SOF3:
;;;808             case M_SOF5:
;;;809             case M_SOF6:
;;;810             case M_SOF7:
;;;811             //      case M_JPG:
;;;812             case M_SOF9:
;;;813             case M_SOF10:
;;;814             case M_SOF11:
;;;815             case M_SOF13:
;;;816             case M_SOF14:
;;;817             case M_SOF15:
;;;818             case M_SOI:
;;;819             case M_EOI:
;;;820             case M_SOS:
;;;821             {
;;;822                *pMarker = c;
00007e  7021              STRB     r1,[r4,#0]
;;;823                return 0;
000080  2000              MOVS     r0,#0
;;;824             }
;;;825             case M_DHT:
;;;826             {
;;;827                readDHTMarker();
;;;828                break;
;;;829             }
;;;830             // Sorry, no arithmetic support at this time. Dumb patents!
;;;831             case M_DAC:
;;;832             {
;;;833                return PJPG_NO_ARITHMITIC_SUPPORT;
;;;834             }
;;;835             case M_DQT:
;;;836             {
;;;837                readDQTMarker();
;;;838                break;
;;;839             }
;;;840             case M_DRI:
;;;841             {
;;;842                readDRIMarker();
;;;843                break;
;;;844             }
;;;845             //case M_APP0:  /* no need to read the JFIF marker */
;;;846    
;;;847             case M_JPG:
;;;848             case M_RST0:    /* no parameters */
;;;849             case M_RST1:
;;;850             case M_RST2:
;;;851             case M_RST3:
;;;852             case M_RST4:
;;;853             case M_RST5:
;;;854             case M_RST6:
;;;855             case M_RST7:
;;;856             case M_TEM:
;;;857             {
;;;858                return PJPG_UNEXPECTED_MARKER;
;;;859             }
;;;860             default:    /* must be DNL, DHP, EXP, APPn, JPGn, COM, or RESn or APP0 */
;;;861             {
;;;862                skipVariableMarker();
;;;863                break;
;;;864             }
;;;865          }
;;;866       }
;;;867    //   return 0;
;;;868    }
000082  bd70              POP      {r4-r6,pc}
                  |L29.132|
000084  f7fffffe          BL       readDHTMarker
000088  e7bc              B        |L29.4|
00008a  2011              MOVS     r0,#0x11              ;833
00008c  bd70              POP      {r4-r6,pc}
00008e  f7fffffe          BL       readDQTMarker
000092  e7b7              B        |L29.4|
000094  2010              MOVS     r0,#0x10              ;838
000096  f7fffffe          BL       getBits1
00009a  2804              CMP      r0,#4                 ;838
00009c  d1b2              BNE      |L29.4|
00009e  2010              MOVS     r0,#0x10              ;838
0000a0  f7fffffe          BL       getBits1
0000a4  490a              LDR      r1,|L29.208|
0000a6  8288              STRH     r0,[r1,#0x14]         ;838
0000a8  e7ac              B        |L29.4|
                  |L29.170|
0000aa  2012              MOVS     r0,#0x12              ;858
0000ac  bd70              POP      {r4-r6,pc}
                  |L29.174|
0000ae  2010              MOVS     r0,#0x10
0000b0  f7fffffe          BL       getBits1
0000b4  2802              CMP      r0,#2
0000b6  d3a5              BCC      |L29.4|
0000b8  1e80              SUBS     r0,r0,#2
0000ba  b285              UXTH     r5,r0
0000bc  e004              B        |L29.200|
                  |L29.190|
0000be  2008              MOVS     r0,#8
0000c0  f7fffffe          BL       getBits1
0000c4  1e6d              SUBS     r5,r5,#1
0000c6  b2ad              UXTH     r5,r5
                  |L29.200|
0000c8  2d00              CMP      r5,#0
0000ca  d09b              BEQ      |L29.4|
0000cc  e7f7              B        |L29.190|
;;;869    //------------------------------------------------------------------------------
                          ENDP

0000ce  0000              DCW      0x0000
                  |L29.208|
                          DCD      ||.data||

                          AREA ||i.processRestart||, CODE, READONLY, ALIGN=2

                  processRestart PROC
;;;1018   // Restart interval processing.
;;;1019   static uint8 processRestart(void)
000000  b510              PUSH     {r4,lr}
;;;1020   {
;;;1021      // Let's scan a little bit to find the marker, but not _too_ far.
;;;1022      // 1536 is a "fudge factor" that determines how much to scan.
;;;1023      uint16 i;
;;;1024      uint8 c = 0;
;;;1025   
;;;1026      for (i = 1536; i > 0; i--)
000002  2403              MOVS     r4,#3
000004  0264              LSLS     r4,r4,#9
                  |L30.6|
;;;1027         if (getChar() == 0xFF)
000006  f7fffffe          BL       getChar
00000a  28ff              CMP      r0,#0xff
00000c  d004              BEQ      |L30.24|
00000e  1e64              SUBS     r4,r4,#1
000010  0424              LSLS     r4,r4,#16             ;1026
000012  0c24              LSRS     r4,r4,#16             ;1026
000014  d1f7              BNE      |L30.6|
000016  e00d              B        |L30.52|
                  |L30.24|
;;;1028            break;
;;;1029   
;;;1030      if (i == 0)
000018  2c00              CMP      r4,#0
00001a  d00b              BEQ      |L30.52|
                  |L30.28|
;;;1031         return PJPG_BAD_RESTART_MARKER;
;;;1032      
;;;1033      for ( ; i > 0; i--)
;;;1034         if ((c = getChar()) != 0xFF)
00001c  f7fffffe          BL       getChar
000020  28ff              CMP      r0,#0xff
000022  d009              BEQ      |L30.56|
;;;1035            break;
;;;1036   
;;;1037      if (i == 0)
000024  2c00              CMP      r4,#0
000026  d005              BEQ      |L30.52|
;;;1038         return PJPG_BAD_RESTART_MARKER;
;;;1039   
;;;1040      // Is it the expected marker? If not, something bad happened.
;;;1041      if (c != (gNextRestartNum + M_RST0))
000028  4910              LDR      r1,|L30.108|
00002a  8aca              LDRH     r2,[r1,#0x16]  ; gNextRestartNum
00002c  4613              MOV      r3,r2
00002e  33d0              ADDS     r3,r3,#0xd0
000030  4298              CMP      r0,r3
000032  d006              BEQ      |L30.66|
                  |L30.52|
;;;1042         return PJPG_BAD_RESTART_MARKER;
000034  201d              MOVS     r0,#0x1d
;;;1043   
;;;1044      // Reset each component's DC prediction values.
;;;1045      gLastDC[0] = 0;
;;;1046      gLastDC[1] = 0;
;;;1047      gLastDC[2] = 0;
;;;1048   
;;;1049      gRestartsLeft = gRestartInterval;
;;;1050   
;;;1051      gNextRestartNum = (gNextRestartNum + 1) & 7;
;;;1052   
;;;1053      // Get the bit buffer going again
;;;1054   
;;;1055      gBitsLeft = 8;
;;;1056      getBits2(8);
;;;1057      getBits2(8);
;;;1058      
;;;1059      return 0;
;;;1060   }
000036  bd10              POP      {r4,pc}
                  |L30.56|
000038  1e64              SUBS     r4,r4,#1
00003a  0424              LSLS     r4,r4,#16             ;1033
00003c  0c24              LSRS     r4,r4,#16             ;1033
00003e  d1ed              BNE      |L30.28|
000040  e7f8              B        |L30.52|
                  |L30.66|
000042  480a              LDR      r0,|L30.108|
000044  2300              MOVS     r3,#0                 ;1045
000046  3044              ADDS     r0,r0,#0x44           ;1045
000048  8003              STRH     r3,[r0,#0]            ;1045
00004a  8043              STRH     r3,[r0,#2]            ;1046
00004c  8083              STRH     r3,[r0,#4]            ;1047
00004e  8a88              LDRH     r0,[r1,#0x14]         ;1049  ; gRestartInterval
000050  8308              STRH     r0,[r1,#0x18]         ;1049
000052  1c52              ADDS     r2,r2,#1              ;1049
000054  0750              LSLS     r0,r2,#29             ;1051
000056  0f40              LSRS     r0,r0,#29             ;1051
000058  82c8              STRH     r0,[r1,#0x16]         ;1051
00005a  2008              MOVS     r0,#8                 ;1055
00005c  7148              STRB     r0,[r1,#5]            ;1055
00005e  f7fffffe          BL       getBits2
000062  2008              MOVS     r0,#8                 ;1057
000064  f7fffffe          BL       getBits2
000068  2000              MOVS     r0,#0                 ;1059
00006a  bd10              POP      {r4,pc}
;;;1061   //------------------------------------------------------------------------------
                          ENDP

                  |L30.108|
                          DCD      ||.data||

                          AREA ||i.readDHTMarker||, CODE, READONLY, ALIGN=2

                  readDHTMarker PROC
;;;528    //------------------------------------------------------------------------------
;;;529    static uint8 readDHTMarker(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;530    {
000002  b08d              SUB      sp,sp,#0x34
;;;531       uint8 bits[16];
;;;532       uint16 left = getBits1(16);
000004  2010              MOVS     r0,#0x10
000006  f7fffffe          BL       getBits1
;;;533    
;;;534       if (left < 2)
00000a  2802              CMP      r0,#2
00000c  d36b              BCC      |L31.230|
00000e  1e80              SUBS     r0,r0,#2
;;;535          return PJPG_BAD_DHT_MARKER;
;;;536    
;;;537       left -= 2;
000010  b284              UXTH     r4,r0
;;;538    
;;;539       while (left)
000012  e088              B        |L31.294|
                  |L31.20|
;;;540       {
;;;541          uint8 i, tableIndex, index;
;;;542          uint8* pHuffVal;
;;;543          HuffTable* pHuffTable;
;;;544          uint16 count, totalRead;
;;;545                
;;;546          index = (uint8)getBits1(8);
000014  2008              MOVS     r0,#8
000016  f7fffffe          BL       getBits1
00001a  b2c0              UXTB     r0,r0
;;;547          
;;;548          if ( ((index & 0xF) > 1) || ((index & 0xF0) > 0x10) )
00001c  0701              LSLS     r1,r0,#28
00001e  0f09              LSRS     r1,r1,#28
000020  2901              CMP      r1,#1
000022  d803              BHI      |L31.44|
000024  0901              LSRS     r1,r0,#4
000026  0109              LSLS     r1,r1,#4
000028  2910              CMP      r1,#0x10
00002a  d902              BLS      |L31.50|
                  |L31.44|
;;;549             return PJPG_BAD_DHT_INDEX;
00002c  2003              MOVS     r0,#3
                  |L31.46|
;;;550          
;;;551          tableIndex = ((index >> 3) & 2) + (index & 1);
;;;552          
;;;553          pHuffTable = getHuffTable(tableIndex);
;;;554          pHuffVal = getHuffVal(tableIndex);
;;;555          
;;;556          gValidHuffTables |= (1 << tableIndex);
;;;557                
;;;558          count = 0;
;;;559          for (i = 0; i <= 15; i++)
;;;560          {
;;;561             uint8 n = (uint8)getBits1(8);
;;;562             bits[i] = n;
;;;563             count = (uint16)(count + n);
;;;564          }
;;;565          
;;;566          if (count > getMaxHuffCodes(tableIndex))
;;;567             return PJPG_BAD_DHT_COUNTS;
;;;568    
;;;569          for (i = 0; i < count; i++)
;;;570             pHuffVal[i] = (uint8)getBits1(8);
;;;571    
;;;572          totalRead = 1 + 16 + count;
;;;573    
;;;574          if (left < totalRead)
;;;575             return PJPG_BAD_DHT_MARKER;
;;;576    
;;;577          left = (uint16)(left - totalRead);
;;;578    
;;;579          huffCreate(bits, pHuffTable);
;;;580       }
;;;581          
;;;582       return 0;
;;;583    }
00002e  b00d              ADD      sp,sp,#0x34
000030  bdf0              POP      {r4-r7,pc}
                  |L31.50|
000032  08c1              LSRS     r1,r0,#3              ;551
000034  2202              MOVS     r2,#2                 ;551
000036  07c0              LSLS     r0,r0,#31             ;551
000038  4011              ANDS     r1,r1,r2              ;551
00003a  0fc0              LSRS     r0,r0,#31             ;551
00003c  1808              ADDS     r0,r1,r0              ;551
00003e  9006              STR      r0,[sp,#0x18]         ;551
000040  d029              BEQ      |L31.150|
000042  2801              CMP      r0,#1                 ;551
000044  d02c              BEQ      |L31.160|
000046  2802              CMP      r0,#2                 ;551
000048  d02d              BEQ      |L31.166|
00004a  2803              CMP      r0,#3                 ;551
00004c  d02e              BEQ      |L31.172|
00004e  2000              MOVS     r0,#0                 ;551
                  |L31.80|
000050  9004              STR      r0,[sp,#0x10]         ;554
000052  9806              LDR      r0,[sp,#0x18]         ;554
000054  2801              CMP      r0,#1                 ;554
000056  d02b              BEQ      |L31.176|
000058  2802              CMP      r0,#2                 ;554
00005a  d02c              BEQ      |L31.182|
00005c  2803              CMP      r0,#3                 ;554
00005e  d02c              BEQ      |L31.186|
000060  2700              MOVS     r7,#0                 ;554
                  |L31.98|
000062  9906              LDR      r1,[sp,#0x18]         ;556
000064  2001              MOVS     r0,#1                 ;556
000066  4088              LSLS     r0,r0,r1              ;556
000068  4936              LDR      r1,|L31.324|
00006a  780a              LDRB     r2,[r1,#0]            ;556  ; gValidHuffTables
00006c  4310              ORRS     r0,r0,r2              ;556
00006e  2500              MOVS     r5,#0                 ;558
000070  7008              STRB     r0,[r1,#0]            ;556
000072  462e              MOV      r6,r5                 ;559
                  |L31.116|
000074  2008              MOVS     r0,#8                 ;561
000076  f7fffffe          BL       getBits1
00007a  b2c0              UXTB     r0,r0                 ;561
00007c  a908              ADD      r1,sp,#0x20           ;562
00007e  5588              STRB     r0,[r1,r6]            ;562
000080  1828              ADDS     r0,r5,r0              ;563
000082  1c76              ADDS     r6,r6,#1              ;563
000084  b2f6              UXTB     r6,r6                 ;559
000086  b285              UXTH     r5,r0                 ;563
000088  2e0f              CMP      r6,#0xf               ;559
00008a  d9f3              BLS      |L31.116|
00008c  9806              LDR      r0,[sp,#0x18]         ;566
00008e  2802              CMP      r0,#2                 ;566
000090  d216              BCS      |L31.192|
000092  200c              MOVS     r0,#0xc               ;566
000094  e015              B        |L31.194|
                  |L31.150|
000096  482c              LDR      r0,|L31.328|
000098  9004              STR      r0,[sp,#0x10]         ;566
00009a  4607              MOV      r7,r0                 ;566
00009c  3750              ADDS     r7,r7,#0x50           ;566
00009e  e7e0              B        |L31.98|
                  |L31.160|
0000a0  4829              LDR      r0,|L31.328|
0000a2  3060              ADDS     r0,r0,#0x60           ;566
0000a4  e7d4              B        |L31.80|
                  |L31.166|
0000a6  4828              LDR      r0,|L31.328|
0000a8  30c0              ADDS     r0,r0,#0xc0           ;566
0000aa  e7d1              B        |L31.80|
                  |L31.172|
0000ac  4827              LDR      r0,|L31.332|
0000ae  e7cf              B        |L31.80|
                  |L31.176|
0000b0  4f25              LDR      r7,|L31.328|
0000b2  37b0              ADDS     r7,r7,#0xb0           ;566
0000b4  e7d5              B        |L31.98|
                  |L31.182|
0000b6  4f26              LDR      r7,|L31.336|
0000b8  e7d3              B        |L31.98|
                  |L31.186|
0000ba  4f24              LDR      r7,|L31.332|
0000bc  3750              ADDS     r7,r7,#0x50           ;566
0000be  e7d0              B        |L31.98|
                  |L31.192|
0000c0  20ff              MOVS     r0,#0xff              ;566
                  |L31.194|
0000c2  42a8              CMP      r0,r5                 ;566
0000c4  d201              BCS      |L31.202|
0000c6  2002              MOVS     r0,#2                 ;567
0000c8  e7b1              B        |L31.46|
                  |L31.202|
0000ca  2600              MOVS     r6,#0                 ;569
0000cc  e005              B        |L31.218|
                  |L31.206|
0000ce  2008              MOVS     r0,#8                 ;570
0000d0  f7fffffe          BL       getBits1
0000d4  55b8              STRB     r0,[r7,r6]            ;570
0000d6  1c76              ADDS     r6,r6,#1              ;570
0000d8  b2f6              UXTB     r6,r6                 ;569
                  |L31.218|
0000da  42ae              CMP      r6,r5                 ;569
0000dc  d3f7              BCC      |L31.206|
0000de  3511              ADDS     r5,r5,#0x11           ;569
0000e0  b2a8              UXTH     r0,r5                 ;572
0000e2  4284              CMP      r4,r0                 ;574
0000e4  d201              BCS      |L31.234|
                  |L31.230|
0000e6  2004              MOVS     r0,#4                 ;575
0000e8  e7a1              B        |L31.46|
                  |L31.234|
0000ea  1a20              SUBS     r0,r4,r0              ;577
0000ec  b284              UXTH     r4,r0                 ;577
0000ee  a808              ADD      r0,sp,#0x20           ;579
0000f0  4684              MOV      r12,r0                ;579
0000f2  2000              MOVS     r0,#0                 ;579
0000f4  9904              LDR      r1,[sp,#0x10]         ;579
0000f6  4605              MOV      r5,r0                 ;579
0000f8  4602              MOV      r2,r0                 ;579
                  |L31.250|
0000fa  4663              MOV      r3,r12                ;579
0000fc  5c1b              LDRB     r3,[r3,r0]            ;579
0000fe  2b00              CMP      r3,#0                 ;579
000100  d016              BEQ      |L31.304|
000102  0046              LSLS     r6,r0,#1              ;579
000104  538a              STRH     r2,[r1,r6]            ;579
000106  18d7              ADDS     r7,r2,r3              ;579
000108  1e7a              SUBS     r2,r7,#1              ;579
00010a  1876              ADDS     r6,r6,r1              ;579
00010c  8432              STRH     r2,[r6,#0x20]         ;579
00010e  180a              ADDS     r2,r1,r0              ;579
000110  3240              ADDS     r2,r2,#0x40           ;579
000112  7015              STRB     r5,[r2,#0]            ;579
000114  18ea              ADDS     r2,r5,r3              ;579
000116  b2d5              UXTB     r5,r2                 ;579
000118  b2ba              UXTH     r2,r7                 ;579
                  |L31.282|
00011a  0452              LSLS     r2,r2,#17             ;579
00011c  1c40              ADDS     r0,r0,#1              ;579
00011e  0c12              LSRS     r2,r2,#16             ;579
000120  b2c0              UXTB     r0,r0                 ;579
000122  280f              CMP      r0,#0xf               ;579
000124  d9e9              BLS      |L31.250|
                  |L31.294|
000126  2c00              CMP      r4,#0                 ;539
000128  d000              BEQ      |L31.300|
00012a  e773              B        |L31.20|
                  |L31.300|
00012c  2000              MOVS     r0,#0                 ;582
00012e  e77e              B        |L31.46|
                  |L31.304|
000130  2300              MOVS     r3,#0
000132  0046              LSLS     r6,r0,#1
000134  538b              STRH     r3,[r1,r6]
000136  1e5f              SUBS     r7,r3,#1
000138  1876              ADDS     r6,r6,r1
00013a  8437              STRH     r7,[r6,#0x20]
00013c  180e              ADDS     r6,r1,r0
00013e  3640              ADDS     r6,r6,#0x40
000140  7033              STRB     r3,[r6,#0]
000142  e7ea              B        |L31.282|
;;;584    //------------------------------------------------------------------------------
                          ENDP

                  |L31.324|
                          DCD      ||.data||
                  |L31.328|
                          DCD      ||.bss||+0x480
                  |L31.332|
                          DCD      ||.bss||+0x690
                  |L31.336|
                          DCD      ||.bss||+0x590

                          AREA ||i.readDQTMarker||, CODE, READONLY, ALIGN=2

                  readDQTMarker PROC
;;;586    
;;;587    static uint8 readDQTMarker(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;588    {
;;;589       uint16 left = getBits1(16);
000002  2010              MOVS     r0,#0x10
000004  f7fffffe          BL       getBits1
;;;590    
;;;591       if (left < 2)
000008  2802              CMP      r0,#2
00000a  d201              BCS      |L32.16|
;;;592          return PJPG_BAD_DQT_MARKER;
00000c  2005              MOVS     r0,#5
;;;593    
;;;594       left -= 2;
;;;595    
;;;596       while (left)
;;;597       {
;;;598          uint8 i;
;;;599          uint8 n = (uint8)getBits1(8);
;;;600          uint8 prec = n >> 4;
;;;601          uint16 totalRead;
;;;602    
;;;603          n &= 0x0F;
;;;604    
;;;605          if (n > 1)
;;;606             return PJPG_BAD_DQT_TABLE;
;;;607    
;;;608          gValidQuantTables |= (n ? 2 : 1);         
;;;609    
;;;610          // read quantization entries, in zag order
;;;611          for (i = 0; i < 64; i++)
;;;612          {
;;;613             uint16 temp = getBits1(8);
;;;614    
;;;615             if (prec)
;;;616                temp = (temp << 8) + getBits1(8);
;;;617    
;;;618             if (n)
;;;619                gQuant1[i] = (int16)temp;            
;;;620             else
;;;621                gQuant0[i] = (int16)temp;            
;;;622          }
;;;623          
;;;624          createWinogradQuant(n ? gQuant1 : gQuant0);
;;;625    
;;;626          totalRead = 64 + 1;
;;;627    
;;;628          if (prec)
;;;629             totalRead += 64;
;;;630    
;;;631          if (left < totalRead)
;;;632             return PJPG_BAD_DQT_LENGTH;
;;;633    
;;;634          left = (uint16)(left - totalRead);
;;;635       }
;;;636       
;;;637       return 0;
;;;638    }
00000e  bdf8              POP      {r3-r7,pc}
                  |L32.16|
000010  1e80              SUBS     r0,r0,#2
000012  e04d              B        |L32.176|
                  |L32.20|
000014  2008              MOVS     r0,#8                 ;599
000016  f7fffffe          BL       getBits1
00001a  b2c0              UXTB     r0,r0                 ;599
00001c  0707              LSLS     r7,r0,#28             ;603
00001e  0906              LSRS     r6,r0,#4              ;600
000020  0f3f              LSRS     r7,r7,#28             ;603
000022  2f01              CMP      r7,#1                 ;605
000024  d901              BLS      |L32.42|
000026  2006              MOVS     r0,#6                 ;606
000028  bdf8              POP      {r3-r7,pc}
                  |L32.42|
00002a  2f00              CMP      r7,#0                 ;608
00002c  d001              BEQ      |L32.50|
00002e  2002              MOVS     r0,#2                 ;608
000030  e000              B        |L32.52|
                  |L32.50|
000032  2001              MOVS     r0,#1                 ;608
                  |L32.52|
000034  4921              LDR      r1,|L32.188|
000036  784a              LDRB     r2,[r1,#1]            ;608  ; gValidQuantTables
000038  4310              ORRS     r0,r0,r2              ;608
00003a  7048              STRB     r0,[r1,#1]            ;608
00003c  2500              MOVS     r5,#0                 ;611
                  |L32.62|
00003e  2008              MOVS     r0,#8                 ;613
000040  f7fffffe          BL       getBits1
000044  4604              MOV      r4,r0                 ;613
000046  2e00              CMP      r6,#0                 ;615
000048  d005              BEQ      |L32.86|
00004a  2008              MOVS     r0,#8                 ;616
00004c  f7fffffe          BL       getBits1
000050  0221              LSLS     r1,r4,#8              ;616
000052  1840              ADDS     r0,r0,r1              ;616
000054  b284              UXTH     r4,r0                 ;616
                  |L32.86|
000056  2f00              CMP      r7,#0                 ;618
000058  d002              BEQ      |L32.96|
00005a  0069              LSLS     r1,r5,#1              ;619
00005c  4818              LDR      r0,|L32.192|
00005e  e002              B        |L32.102|
                  |L32.96|
000060  4817              LDR      r0,|L32.192|
000062  0069              LSLS     r1,r5,#1              ;621
000064  3880              SUBS     r0,r0,#0x80           ;621
                  |L32.102|
000066  1c6d              ADDS     r5,r5,#1              ;621
000068  b2ed              UXTB     r5,r5                 ;611
00006a  5244              STRH     r4,[r0,r1]            ;621
00006c  2d40              CMP      r5,#0x40              ;611
00006e  d3e6              BCC      |L32.62|
000070  2f00              CMP      r7,#0                 ;624
000072  d001              BEQ      |L32.120|
000074  4a12              LDR      r2,|L32.192|
000076  e001              B        |L32.124|
                  |L32.120|
000078  4a11              LDR      r2,|L32.192|
00007a  3a80              SUBS     r2,r2,#0x80           ;624
                  |L32.124|
00007c  2000              MOVS     r0,#0                 ;624
00007e  4d11              LDR      r5,|L32.196|
000080  2701              MOVS     r7,#1                 ;624
000082  03ff              LSLS     r7,r7,#15             ;624
                  |L32.132|
000084  0043              LSLS     r3,r0,#1              ;624
000086  5c29              LDRB     r1,[r5,r0]            ;624
000088  5ed4              LDRSH    r4,[r2,r3]            ;624
00008a  1c40              ADDS     r0,r0,#1              ;624
00008c  4361              MULS     r1,r4,r1              ;624
00008e  0349              LSLS     r1,r1,#13             ;624
000090  19c9              ADDS     r1,r1,r7              ;624
000092  1409              ASRS     r1,r1,#16             ;624
000094  b2c0              UXTB     r0,r0                 ;624
000096  52d1              STRH     r1,[r2,r3]            ;624
000098  2840              CMP      r0,#0x40              ;624
00009a  d3f3              BCC      |L32.132|
00009c  2041              MOVS     r0,#0x41              ;626
00009e  2e00              CMP      r6,#0                 ;628
0000a0  d000              BEQ      |L32.164|
0000a2  2081              MOVS     r0,#0x81              ;629
                  |L32.164|
0000a4  9900              LDR      r1,[sp,#0]            ;631
0000a6  4281              CMP      r1,r0                 ;631
0000a8  d201              BCS      |L32.174|
0000aa  2015              MOVS     r0,#0x15              ;632
0000ac  bdf8              POP      {r3-r7,pc}
                  |L32.174|
0000ae  1a08              SUBS     r0,r1,r0              ;634
                  |L32.176|
0000b0  0400              LSLS     r0,r0,#16             ;594
0000b2  0c00              LSRS     r0,r0,#16             ;594
0000b4  9000              STR      r0,[sp,#0]            ;594
0000b6  d1ad              BNE      |L32.20|
0000b8  bdf8              POP      {r3-r7,pc}
;;;639    //------------------------------------------------------------------------------
                          ENDP

0000ba  0000              DCW      0x0000
                  |L32.188|
                          DCD      ||.data||
                  |L32.192|
                          DCD      ||.bss||+0x400
                  |L32.196|
                          DCD      ||.constdata||+0x40

                          AREA ||i.readSOFMarker||, CODE, READONLY, ALIGN=2

                  readSOFMarker PROC
;;;639    //------------------------------------------------------------------------------
;;;640    static uint8 readSOFMarker(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;641    {
;;;642       uint8 i;
;;;643       uint16 left = getBits1(16);
000002  2010              MOVS     r0,#0x10
000004  f7fffffe          BL       getBits1
000008  4604              MOV      r4,r0
;;;644    
;;;645       if (getBits1(8) != 8)   
00000a  2008              MOVS     r0,#8
00000c  f7fffffe          BL       getBits1
000010  2808              CMP      r0,#8
000012  d001              BEQ      |L33.24|
;;;646          return PJPG_BAD_PRECISION;
000014  2007              MOVS     r0,#7
;;;647    
;;;648       gImageYSize = getBits1(16);
;;;649    
;;;650       if ((!gImageYSize) || (gImageYSize > PJPG_MAX_HEIGHT))
;;;651          return PJPG_BAD_HEIGHT;
;;;652    
;;;653       gImageXSize = getBits1(16);
;;;654    
;;;655       if ((!gImageXSize) || (gImageXSize > PJPG_MAX_WIDTH))
;;;656          return PJPG_BAD_WIDTH;
;;;657    
;;;658       gCompsInFrame = (uint8)getBits1(8);
;;;659    
;;;660       if (gCompsInFrame > 3)
;;;661          return PJPG_TOO_MANY_COMPONENTS;
;;;662    
;;;663       if (left != (gCompsInFrame + gCompsInFrame + gCompsInFrame + 8))
;;;664          return PJPG_BAD_SOF_LENGTH;
;;;665       
;;;666       for (i = 0; i < gCompsInFrame; i++)
;;;667       {
;;;668          gCompIdent[i] = (uint8)getBits1(8);
;;;669          gCompHSamp[i] = (uint8)getBits1(4);
;;;670          gCompVSamp[i] = (uint8)getBits1(4);
;;;671          gCompQuant[i] = (uint8)getBits1(8);
;;;672          
;;;673          if (gCompQuant[i] > 1)
;;;674             return PJPG_UNSUPPORTED_QUANT_TABLE;
;;;675       }
;;;676       
;;;677       return 0;
;;;678    }
000016  bdf8              POP      {r3-r7,pc}
                  |L33.24|
000018  2010              MOVS     r0,#0x10              ;648
00001a  f7fffffe          BL       getBits1
00001e  4d25              LDR      r5,|L33.180|
000020  2800              CMP      r0,#0                 ;650
000022  8268              STRH     r0,[r5,#0x12]         ;648
000024  d003              BEQ      |L33.46|
000026  2601              MOVS     r6,#1                 ;650
000028  03b6              LSLS     r6,r6,#14             ;650
00002a  42b0              CMP      r0,r6                 ;650
00002c  d901              BLS      |L33.50|
                  |L33.46|
00002e  2008              MOVS     r0,#8                 ;651
000030  bdf8              POP      {r3-r7,pc}
                  |L33.50|
000032  2010              MOVS     r0,#0x10              ;653
000034  f7fffffe          BL       getBits1
000038  8228              STRH     r0,[r5,#0x10]         ;653
00003a  2800              CMP      r0,#0                 ;655
00003c  d001              BEQ      |L33.66|
00003e  42b0              CMP      r0,r6                 ;655
000040  d901              BLS      |L33.70|
                  |L33.66|
000042  2009              MOVS     r0,#9                 ;656
000044  bdf8              POP      {r3-r7,pc}
                  |L33.70|
000046  2008              MOVS     r0,#8                 ;658
000048  f7fffffe          BL       getBits1
00004c  b2c0              UXTB     r0,r0                 ;658
00004e  71a8              STRB     r0,[r5,#6]            ;658
000050  2803              CMP      r0,#3                 ;660
000052  d901              BLS      |L33.88|
000054  200a              MOVS     r0,#0xa               ;661
000056  bdf8              POP      {r3-r7,pc}
                  |L33.88|
000058  0041              LSLS     r1,r0,#1              ;663
00005a  1808              ADDS     r0,r1,r0              ;663
00005c  3008              ADDS     r0,r0,#8              ;663
00005e  42a0              CMP      r0,r4                 ;663
000060  d001              BEQ      |L33.102|
000062  200b              MOVS     r0,#0xb               ;664
000064  bdf8              POP      {r3-r7,pc}
                  |L33.102|
000066  4f13              LDR      r7,|L33.180|
000068  2400              MOVS     r4,#0                 ;666
00006a  3720              ADDS     r7,r7,#0x20           ;668
00006c  463e              MOV      r6,r7                 ;671
00006e  3609              ADDS     r6,r6,#9              ;671
000070  e01a              B        |L33.168|
                  |L33.114|
000072  2008              MOVS     r0,#8                 ;668
000074  f7fffffe          BL       getBits1
000078  5538              STRB     r0,[r7,r4]            ;668
00007a  2004              MOVS     r0,#4                 ;669
00007c  f7fffffe          BL       getBits1
000080  490c              LDR      r1,|L33.180|
000082  3123              ADDS     r1,r1,#0x23           ;669
000084  5508              STRB     r0,[r1,r4]            ;669
000086  2004              MOVS     r0,#4                 ;670
000088  f7fffffe          BL       getBits1
00008c  4909              LDR      r1,|L33.180|
00008e  3126              ADDS     r1,r1,#0x26           ;670
000090  5508              STRB     r0,[r1,r4]            ;670
000092  2008              MOVS     r0,#8                 ;671
000094  f7fffffe          BL       getBits1
000098  b2c0              UXTB     r0,r0                 ;671
00009a  5530              STRB     r0,[r6,r4]            ;671
00009c  2801              CMP      r0,#1                 ;673
00009e  d901              BLS      |L33.164|
0000a0  2024              MOVS     r0,#0x24              ;674
0000a2  bdf8              POP      {r3-r7,pc}
                  |L33.164|
0000a4  1c64              ADDS     r4,r4,#1
0000a6  b2e4              UXTB     r4,r4                 ;666
                  |L33.168|
0000a8  79a8              LDRB     r0,[r5,#6]            ;666  ; gCompsInFrame
0000aa  4284              CMP      r4,r0                 ;666
0000ac  d3e1              BCC      |L33.114|
0000ae  2000              MOVS     r0,#0                 ;677
0000b0  bdf8              POP      {r3-r7,pc}
;;;679    //------------------------------------------------------------------------------
                          ENDP

0000b2  0000              DCW      0x0000
                  |L33.180|
                          DCD      ||.data||

                          AREA ||i.readSOSMarker||, CODE, READONLY, ALIGN=2

                  readSOSMarker PROC
;;;714    // Read a start of scan (SOS) marker.
;;;715    static uint8 readSOSMarker(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;716    {
;;;717       uint8 i;
;;;718       uint16 left = getBits1(16);
000002  2010              MOVS     r0,#0x10
000004  f7fffffe          BL       getBits1
000008  4605              MOV      r5,r0
;;;719       uint8 spectral_start, spectral_end, successive_high, successive_low;
;;;720    
;;;721       gCompsInScan = (uint8)getBits1(8);
00000a  2008              MOVS     r0,#8
00000c  f7fffffe          BL       getBits1
000010  b2c1              UXTB     r1,r0
;;;722    
;;;723       left -= 3;
000012  1ee8              SUBS     r0,r5,#3
000014  b285              UXTH     r5,r0
000016  4c28              LDR      r4,|L34.184|
;;;724    
;;;725       if ( (left != (gCompsInScan + gCompsInScan + 3)) || (gCompsInScan < 1) || (gCompsInScan > PJPG_MAXCOMPSINSCAN) )
000018  0048              LSLS     r0,r1,#1
00001a  1cc0              ADDS     r0,r0,#3
00001c  71e1              STRB     r1,[r4,#7]            ;721
00001e  42a8              CMP      r0,r5
000020  d103              BNE      |L34.42|
000022  2900              CMP      r1,#0
000024  d001              BEQ      |L34.42|
000026  2903              CMP      r1,#3
000028  d901              BLS      |L34.46|
                  |L34.42|
;;;726          return PJPG_BAD_SOS_LENGTH;
00002a  200e              MOVS     r0,#0xe
;;;727       
;;;728       for (i = 0; i < gCompsInScan; i++)
;;;729       {
;;;730          uint8 cc = (uint8)getBits1(8);
;;;731          uint8 c = (uint8)getBits1(8);
;;;732          uint8 ci;
;;;733          
;;;734          left -= 2;
;;;735         
;;;736          for (ci = 0; ci < gCompsInFrame; ci++)
;;;737             if (cc == gCompIdent[ci])
;;;738                break;
;;;739    
;;;740          if (ci >= gCompsInFrame)
;;;741             return PJPG_BAD_SOS_COMP_ID;
;;;742    
;;;743          gCompList[i]    = ci;
;;;744          gCompDCTab[ci] = (c >> 4) & 15;
;;;745          gCompACTab[ci] = (c & 15);
;;;746       }
;;;747    
;;;748       spectral_start  = (uint8)getBits1(8);
;;;749       spectral_end    = (uint8)getBits1(8);
;;;750       successive_high = (uint8)getBits1(4);
;;;751       successive_low  = (uint8)getBits1(4);
;;;752    
;;;753       left -= 3;
;;;754    
;;;755       while (left)                  
;;;756       {
;;;757          getBits1(8);
;;;758          left--;
;;;759       }
;;;760       
;;;761       return 0;
;;;762    }
00002c  bdf8              POP      {r3-r7,pc}
                  |L34.46|
00002e  2600              MOVS     r6,#0                 ;728
000030  e026              B        |L34.128|
                  |L34.50|
000032  2008              MOVS     r0,#8                 ;730
000034  f7fffffe          BL       getBits1
000038  b2c7              UXTB     r7,r0                 ;730
00003a  2008              MOVS     r0,#8                 ;731
00003c  f7fffffe          BL       getBits1
000040  1ead              SUBS     r5,r5,#2              ;731
000042  b2c3              UXTB     r3,r0                 ;731
000044  b2ad              UXTH     r5,r5                 ;734
000046  2000              MOVS     r0,#0                 ;736
000048  79a1              LDRB     r1,[r4,#6]            ;736  ; gCompsInFrame
00004a  e006              B        |L34.90|
                  |L34.76|
00004c  4a1a              LDR      r2,|L34.184|
00004e  3220              ADDS     r2,r2,#0x20           ;737
000050  5c12              LDRB     r2,[r2,r0]            ;737
000052  42ba              CMP      r2,r7                 ;737
000054  d003              BEQ      |L34.94|
000056  1c40              ADDS     r0,r0,#1              ;737
000058  b2c0              UXTB     r0,r0                 ;736
                  |L34.90|
00005a  4288              CMP      r0,r1                 ;736
00005c  d3f6              BCC      |L34.76|
                  |L34.94|
00005e  4288              CMP      r0,r1                 ;740
000060  d301              BCC      |L34.102|
000062  200f              MOVS     r0,#0xf               ;741
000064  bdf8              POP      {r3-r7,pc}
                  |L34.102|
000066  4914              LDR      r1,|L34.184|
000068  4a13              LDR      r2,|L34.184|
00006a  312c              ADDS     r1,r1,#0x2c           ;743
00006c  5588              STRB     r0,[r1,r6]            ;743
00006e  0919              LSRS     r1,r3,#4              ;744
000070  322f              ADDS     r2,r2,#0x2f           ;744
000072  5411              STRB     r1,[r2,r0]            ;744
000074  0719              LSLS     r1,r3,#28             ;745
000076  0f09              LSRS     r1,r1,#28             ;745
000078  1cd2              ADDS     r2,r2,#3              ;745
00007a  1c76              ADDS     r6,r6,#1              ;745
00007c  5411              STRB     r1,[r2,r0]            ;745
00007e  b2f6              UXTB     r6,r6                 ;728
                  |L34.128|
000080  79e0              LDRB     r0,[r4,#7]            ;728  ; gCompsInScan
000082  4286              CMP      r6,r0                 ;728
000084  d3d5              BCC      |L34.50|
000086  2008              MOVS     r0,#8                 ;748
000088  f7fffffe          BL       getBits1
00008c  2008              MOVS     r0,#8                 ;749
00008e  f7fffffe          BL       getBits1
000092  2004              MOVS     r0,#4                 ;750
000094  f7fffffe          BL       getBits1
000098  2004              MOVS     r0,#4                 ;751
00009a  f7fffffe          BL       getBits1
00009e  1eed              SUBS     r5,r5,#3              ;751
0000a0  b2ac              UXTH     r4,r5                 ;753
0000a2  e004              B        |L34.174|
                  |L34.164|
0000a4  2008              MOVS     r0,#8                 ;757
0000a6  f7fffffe          BL       getBits1
0000aa  1e64              SUBS     r4,r4,#1              ;757
0000ac  b2a4              UXTH     r4,r4                 ;758
                  |L34.174|
0000ae  2c00              CMP      r4,#0                 ;755
0000b0  d1f8              BNE      |L34.164|
0000b2  2000              MOVS     r0,#0                 ;761
0000b4  bdf8              POP      {r3-r7,pc}
;;;763    #pragma pop
                          ENDP

0000b6  0000              DCW      0x0000
                  |L34.184|
                          DCD      ||.data||

                          AREA ||i.stuffChar||, CODE, READONLY, ALIGN=2

                  stuffChar PROC
;;;260    //------------------------------------------------------------------------------
;;;261    static PJPG_INLINE void stuffChar(uint8 i)
000000  4905              LDR      r1,|L35.24|
;;;262    {
;;;263       gInBufOfs--;
;;;264       gInBuf[gInBufOfs] = i;
000002  4b06              LDR      r3,|L35.28|
000004  78ca              LDRB     r2,[r1,#3]            ;263  ; gInBufOfs
000006  1e52              SUBS     r2,r2,#1              ;263
000008  b2d2              UXTB     r2,r2                 ;263
00000a  70ca              STRB     r2,[r1,#3]            ;263
00000c  5498              STRB     r0,[r3,r2]
;;;265       gInBufLeft++;
00000e  7908              LDRB     r0,[r1,#4]  ; gInBufLeft
000010  1c40              ADDS     r0,r0,#1
000012  7108              STRB     r0,[r1,#4]
;;;266    }
000014  4770              BX       lr
;;;267    //------------------------------------------------------------------------------
                          ENDP

000016  0000              DCW      0x0000
                  |L35.24|
                          DCD      ||.data||
                  |L35.28|
                          DCD      ||.bss||+0x7e0

                          AREA ||i.subAndClamp||, CODE, READONLY, ALIGN=1

                  subAndClamp PROC
;;;1507   /*----------------------------------------------------------------------------*/
;;;1508   static PJPG_INLINE uint8 subAndClamp(uint8 a, int16 b)
000000  1a40              SUBS     r0,r0,r1
;;;1509   {
;;;1510      b = a - b;
000002  b200              SXTH     r0,r0
;;;1511   
;;;1512      if ((uint16)b > 255U)
000004  b281              UXTH     r1,r0
000006  29ff              CMP      r1,#0xff
000008  d907              BLS      |L36.26|
;;;1513      {
;;;1514         if (b < 0)
00000a  2800              CMP      r0,#0
00000c  da01              BGE      |L36.18|
;;;1515            return 0;
00000e  2000              MOVS     r0,#0
;;;1516         else if (b > 255)
;;;1517            return 255;
;;;1518      }
;;;1519   
;;;1520      return (uint8)b;
;;;1521   }
000010  4770              BX       lr
                  |L36.18|
000012  28ff              CMP      r0,#0xff              ;1516
000014  dd01              BLE      |L36.26|
000016  20ff              MOVS     r0,#0xff              ;1517
000018  4770              BX       lr
                  |L36.26|
00001a  b2c0              UXTB     r0,r0                 ;1520
00001c  4770              BX       lr
;;;1522   /*----------------------------------------------------------------------------*/
                          ENDP


                          AREA ||i.transformBlock||, CODE, READONLY, ALIGN=2

                  transformBlock PROC
                  |symbol_number.422|
;;;1816   #endif
;;;1817   static void transformBlock(uint8 mcuBlock)
000000  b510              PUSH     {r4,lr}
;;;1818   {
000002  4604              MOV      r4,r0
;;;1819      idctRows();
000004  f7fffffe          BL       idctRows
;;;1820      idctCols();
000008  f7fffffe          BL       idctCols
;;;1821      
;;;1822      switch (gScanType)
00000c  483f              LDR      r0,|L37.268|
00000e  7a00              LDRB     r0,[r0,#8]  ; gScanType
000010  0003              MOVS     r3,r0
000012  f7fffffe          BL       __ARM_common_switch8
000016  0551              DCB      0x05,0x51
000018  042f1249          DCB      0x04,0x2f,0x12,0x49
00001c  0d00              DCB      0x0d,0x00
;;;1823      {
;;;1824         case PJPG_GRAYSCALE:
;;;1825         {
;;;1826            // MCU size: 1, 1 block per MCU
;;;1827            copyY(0);
;;;1828            break;
;;;1829         }
;;;1830         case PJPG_YH1V1:
;;;1831         {
;;;1832            // MCU size: 8x8, 3 blocks per MCU
;;;1833            switch (mcuBlock)
00001e  2c00              CMP      r4,#0
000020  d04a              BEQ      |L37.184|
000022  2c01              CMP      r4,#1
000024  d005              BEQ      |L37.50|
000026  2c02              CMP      r4,#2
000028  d102              BNE      |L37.48|
;;;1834            {
;;;1835               case 0:
;;;1836               {
;;;1837                  copyY(0);
;;;1838                  break;
;;;1839               }
;;;1840               case 1:
;;;1841               {
;;;1842                  convertCb(0);
;;;1843                  break;
;;;1844               }
;;;1845               case 2:
;;;1846               {
;;;1847                  convertCr(0);
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       convertCr
                  |L37.48|
;;;1848                  break;
;;;1849               }
;;;1850            }
;;;1851   
;;;1852            break;
;;;1853         }
;;;1854         case PJPG_YH1V2:
;;;1855         {
;;;1856            // MCU size: 8x16, 4 blocks per MCU
;;;1857            switch (mcuBlock)
;;;1858            {
;;;1859               case 0:
;;;1860               {
;;;1861                  copyY(0);
;;;1862                  break;
;;;1863               }
;;;1864               case 1:
;;;1865               {
;;;1866                  copyY(128);
;;;1867                  break;
;;;1868               }
;;;1869               case 2:
;;;1870               {
;;;1871                  upsampleCbV(0, 0);
;;;1872                  upsampleCbV(4*8, 128);
;;;1873                  break;
;;;1874               }
;;;1875               case 3:
;;;1876               {
;;;1877                  upsampleCrV(0, 0);
;;;1878                  upsampleCrV(4*8, 128);
;;;1879                  break;
;;;1880               }
;;;1881            }
;;;1882   
;;;1883            break;
;;;1884         }        
;;;1885         case PJPG_YH2V1:
;;;1886         {
;;;1887            // MCU size: 16x8, 4 blocks per MCU
;;;1888            switch (mcuBlock)
;;;1889            {
;;;1890               case 0:
;;;1891               {
;;;1892                  copyY(0);
;;;1893                  break;
;;;1894               }
;;;1895               case 1:
;;;1896               {
;;;1897                  copyY(64);
;;;1898                  break;
;;;1899               }
;;;1900               case 2:
;;;1901               {
;;;1902                  upsampleCbH(0, 0);
;;;1903                  upsampleCbH(4, 64);
;;;1904                  break;
;;;1905               }
;;;1906               case 3:
;;;1907               {
;;;1908                  upsampleCrH(0, 0);
;;;1909                  upsampleCrH(4, 64);
;;;1910                  break;
;;;1911               }
;;;1912            }
;;;1913            
;;;1914            break;
;;;1915         }        
;;;1916         case PJPG_YH2V2:
;;;1917         {
;;;1918            // MCU size: 16x16, 6 blocks per MCU
;;;1919            switch (mcuBlock)
;;;1920            {
;;;1921               case 0:
;;;1922               {
;;;1923                  copyY(0);
;;;1924                  break;
;;;1925               }
;;;1926               case 1:
;;;1927               {
;;;1928                  copyY(64);
;;;1929                  break;
;;;1930               }
;;;1931               case 2:
;;;1932               {
;;;1933                  copyY(128);
;;;1934                  break;
;;;1935               }
;;;1936               case 3:
;;;1937               {
;;;1938                  copyY(192);
;;;1939                  break;
;;;1940               }
;;;1941               case 4:
;;;1942               {
;;;1943                  upsampleCb(0, 0);
;;;1944                  upsampleCb(4, 64);
;;;1945                  upsampleCb(4*8, 128);
;;;1946                  upsampleCb(4+4*8, 192);
;;;1947                  break;
;;;1948               }
;;;1949               case 5:
;;;1950               {
;;;1951                  upsampleCr(0, 0);
;;;1952                  upsampleCr(4, 64);
;;;1953                  upsampleCr(4*8, 128);
;;;1954                  upsampleCr(4+4*8, 192);
;;;1955                  break;
;;;1956               }
;;;1957            }
;;;1958   
;;;1959            break;
;;;1960         }         
;;;1961      }      
;;;1962   }
000030  bd10              POP      {r4,pc}
                  |L37.50|
000032  2000              MOVS     r0,#0                 ;1842
000034  f7fffffe          BL       convertCb
                  |L37.56|
000038  bd10              POP      {r4,pc}
00003a  2c00              CMP      r4,#0                 ;1857
00003c  d03c              BEQ      |L37.184|
00003e  2c01              CMP      r4,#1                 ;1857
000040  d03e              BEQ      |L37.192|
000042  2c02              CMP      r4,#2                 ;1857
000044  d00d              BEQ      |L37.98|
000046  2c03              CMP      r4,#3                 ;1857
000048  d1f6              BNE      |L37.56|
00004a  2100              MOVS     r1,#0                 ;1877
00004c  4608              MOV      r0,r1                 ;1877
00004e  f7fffffe          BL       upsampleCrV
000052  2180              MOVS     r1,#0x80              ;1878
000054  2020              MOVS     r0,#0x20              ;1878
000056  f7fffffe          BL       upsampleCrV
00005a  bd10              POP      {r4,pc}
                  |L37.92|
00005c  f7fffffe          BL       copyY
000060  bd10              POP      {r4,pc}
                  |L37.98|
000062  2100              MOVS     r1,#0                 ;1871
000064  4608              MOV      r0,r1                 ;1871
000066  f7fffffe          BL       upsampleCbV
00006a  2180              MOVS     r1,#0x80              ;1872
00006c  2020              MOVS     r0,#0x20              ;1872
00006e  f7fffffe          BL       upsampleCbV
                  |L37.114|
000072  bd10              POP      {r4,pc}
000074  2c00              CMP      r4,#0                 ;1888
000076  d01f              BEQ      |L37.184|
000078  2c01              CMP      r4,#1                 ;1888
00007a  d01f              BEQ      |L37.188|
00007c  2c02              CMP      r4,#2                 ;1888
00007e  d00a              BEQ      |L37.150|
000080  2c03              CMP      r4,#3                 ;1888
000082  d1f6              BNE      |L37.114|
000084  2100              MOVS     r1,#0                 ;1908
000086  4608              MOV      r0,r1                 ;1908
000088  f7fffffe          BL       upsampleCrH
00008c  2140              MOVS     r1,#0x40              ;1909
00008e  2004              MOVS     r0,#4                 ;1909
000090  f7fffffe          BL       upsampleCrH
000094  bd10              POP      {r4,pc}
                  |L37.150|
000096  2100              MOVS     r1,#0                 ;1902
000098  4608              MOV      r0,r1                 ;1902
00009a  f7fffffe          BL       upsampleCbH
00009e  2140              MOVS     r1,#0x40              ;1903
0000a0  2004              MOVS     r0,#4                 ;1903
0000a2  f7fffffe          BL       upsampleCbH
                  |L37.166|
0000a6  bd10              POP      {r4,pc}
0000a8  0023              MOVS     r3,r4                 ;1919
0000aa  f7fffffe          BL       __ARM_common_switch8
0000ae  0605              DCB      0x06,0x05
0000b0  07090b0d          DCB      0x07,0x09,0x0b,0x0d
0000b4  1e04              DCB      0x1e,0x04
0000b6  e7f6              B        |L37.166|
                  |L37.184|
0000b8  2000              MOVS     r0,#0                 ;1923
0000ba  e7cf              B        |L37.92|
                  |L37.188|
0000bc  2040              MOVS     r0,#0x40              ;1928
0000be  e7cd              B        |L37.92|
                  |L37.192|
0000c0  2080              MOVS     r0,#0x80              ;1933
0000c2  e7cb              B        |L37.92|
0000c4  20c0              MOVS     r0,#0xc0              ;1938
0000c6  e7c9              B        |L37.92|
0000c8  2100              MOVS     r1,#0                 ;1943
0000ca  4608              MOV      r0,r1                 ;1943
0000cc  f7fffffe          BL       upsampleCb
0000d0  2140              MOVS     r1,#0x40              ;1944
0000d2  2004              MOVS     r0,#4                 ;1944
0000d4  f7fffffe          BL       upsampleCb
0000d8  2180              MOVS     r1,#0x80              ;1945
0000da  2020              MOVS     r0,#0x20              ;1945
0000dc  f7fffffe          BL       upsampleCb
0000e0  21c0              MOVS     r1,#0xc0              ;1946
0000e2  2024              MOVS     r0,#0x24              ;1946
0000e4  f7fffffe          BL       upsampleCb
0000e8  bd10              POP      {r4,pc}
0000ea  2100              MOVS     r1,#0                 ;1951
0000ec  4608              MOV      r0,r1                 ;1951
0000ee  f7fffffe          BL       upsampleCr
0000f2  2140              MOVS     r1,#0x40              ;1952
0000f4  2004              MOVS     r0,#4                 ;1952
0000f6  f7fffffe          BL       upsampleCr
0000fa  2180              MOVS     r1,#0x80              ;1953
0000fc  2020              MOVS     r0,#0x20              ;1953
0000fe  f7fffffe          BL       upsampleCr
000102  21c0              MOVS     r1,#0xc0              ;1954
000104  2024              MOVS     r0,#0x24              ;1954
000106  f7fffffe          BL       upsampleCr
00010a  bd10              POP      {r4,pc}
;;;1963   //------------------------------------------------------------------------------
                          ENDP

                  |L37.268|
                          DCD      ||.data||

                          AREA ||i.transformBlockReduce||, CODE, READONLY, ALIGN=2

                  transformBlockReduce PROC
                  |symbol_number.424|
;;;1966   #endif
;;;1967   static void transformBlockReduce(uint8 mcuBlock)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;1968   {
;;;1969      uint8 c = clamp(PJPG_DESCALE(gCoeffBuf[0]) + 128);
000002  49cc              LDR      r1,|L38.820|
000004  2000              MOVS     r0,#0
000006  5e08              LDRSH    r0,[r1,r0]  ; gCoeffBuf
000008  b088              SUB      sp,sp,#0x20           ;1968
00000a  3040              ADDS     r0,r0,#0x40
00000c  09c0              LSRS     r0,r0,#7
00000e  3080              ADDS     r0,r0,#0x80
000010  b200              SXTH     r0,r0
000012  f7fffffe          BL       clamp
;;;1970      int16 cbG, cbB, crR, crG;
;;;1971   
;;;1972      switch (gScanType)
;;;1973      {
;;;1974         case PJPG_GRAYSCALE:
;;;1975         {
;;;1976            // MCU size: 1, 1 block per MCU
;;;1977            gMCUBufR[0] = c;
000016  4ac7              LDR      r2,|L38.820|
000018  4604              MOV      r4,r0                 ;1969
00001a  3280              ADDS     r2,r2,#0x80
00001c  48c6              LDR      r0,|L38.824|
;;;1978            break;
;;;1979         }
;;;1980         case PJPG_YH1V1:
;;;1981         {
;;;1982            // MCU size: 8x8, 3 blocks per MCU
;;;1983            switch (mcuBlock)
;;;1984            {
;;;1985               case 0:
;;;1986               {
;;;1987                  gMCUBufR[0] = c;
;;;1988                  gMCUBufG[0] = c;
00001e  1dd7              ADDS     r7,r2,#7
000020  7a01              LDRB     r1,[r0,#8]            ;1972  ; gScanType
;;;1989                  gMCUBufB[0] = c;
;;;1990                  break;
;;;1991               }
;;;1992               case 1:
;;;1993               {
;;;1994                  cbG = ((c * 88U) >> 8U) - 44U;
;;;1995                  gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
;;;1996   
;;;1997                  cbB = (c + ((c * 198U) >> 8U)) - 227U;
;;;1998                  gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
;;;1999                  break;
;;;2000               }
;;;2001               case 2:
;;;2002               {
;;;2003                  crR = (c + ((c * 103U) >> 8U)) - 179;
;;;2004                  gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
;;;2005   
;;;2006                  crG = ((c * 183U) >> 8U) - 91;
;;;2007                  gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
;;;2008                  break;
;;;2009               }
;;;2010            }
;;;2011   
;;;2012            break;
;;;2013         }
;;;2014         case PJPG_YH1V2:
;;;2015         {
;;;2016            // MCU size: 8x16, 4 blocks per MCU
;;;2017            switch (mcuBlock)
;;;2018            {
;;;2019               case 0:
;;;2020               {
;;;2021                  gMCUBufR[0] = c;
;;;2022                  gMCUBufG[0] = c;
;;;2023                  gMCUBufB[0] = c;
;;;2024                  break;
;;;2025               }
;;;2026               case 1:
;;;2027               {
;;;2028                  gMCUBufR[128] = c;
;;;2029                  gMCUBufG[128] = c;
;;;2030                  gMCUBufB[128] = c;
;;;2031                  break;
;;;2032               }
;;;2033               case 2:
;;;2034               {
;;;2035                  cbG = ((c * 88U) >> 8U) - 44U;
;;;2036                  gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
;;;2037                  gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
;;;2038   
;;;2039                  cbB = (c + ((c * 198U) >> 8U)) - 227U;
;;;2040                  gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
;;;2041                  gMCUBufB[128] = addAndClamp(gMCUBufB[128], cbB);
;;;2042   
;;;2043                  break;
;;;2044               }
;;;2045               case 3:
;;;2046               {
;;;2047                  crR = (c + ((c * 103U) >> 8U)) - 179;
;;;2048                  gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
;;;2049                  gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
;;;2050   
;;;2051                  crG = ((c * 183U) >> 8U) - 91;
;;;2052                  gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
;;;2053                  gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
;;;2054   
;;;2055                  break;
;;;2056               }
;;;2057            }
;;;2058            break;
;;;2059         }
;;;2060         case PJPG_YH2V1:
;;;2061         {
;;;2062            // MCU size: 16x8, 4 blocks per MCU
;;;2063            switch (mcuBlock)
;;;2064            {
;;;2065               case 0:
;;;2066               {
;;;2067                  gMCUBufR[0] = c;
;;;2068                  gMCUBufG[0] = c;
;;;2069                  gMCUBufB[0] = c;
;;;2070                  break;
;;;2071               }
;;;2072               case 1:
;;;2073               {
;;;2074                  gMCUBufR[64] = c;
000022  4610              MOV      r0,r2
000024  3040              ADDS     r0,r0,#0x40
000026  9004              STR      r0,[sp,#0x10]
000028  48c4              LDR      r0,|L38.828|
00002a  9003              STR      r0,[sp,#0xc]          ;2028
00002c  4610              MOV      r0,r2                 ;2028
00002e  3080              ADDS     r0,r0,#0x80           ;2028
000030  37f9              ADDS     r7,r7,#0xf9           ;1988
000032  9001              STR      r0,[sp,#4]            ;2028
000034  48c1              LDR      r0,|L38.828|
;;;2075                  gMCUBufG[64] = c;
000036  463e              MOV      r6,r7
000038  3040              ADDS     r0,r0,#0x40           ;2028
00003a  463d              MOV      r5,r7                 ;2029
00003c  3640              ADDS     r6,r6,#0x40
00003e  3580              ADDS     r5,r5,#0x80           ;2029
000040  9000              STR      r0,[sp,#0]            ;1972
000042  000b              MOVS     r3,r1                 ;1972
000044  f7fffffe          BL       __ARM_common_switch8
000048  05040786          DCB      0x05,0x04,0x07,0x86
00004c  35d60500          DCB      0x35,0xd6,0x05,0x00
000050  7014              STRB     r4,[r2,#0]            ;1977
                  |L38.82|
;;;2076                  gMCUBufB[64] = c;
;;;2077                  break;
;;;2078               }
;;;2079               case 2:
;;;2080               {
;;;2081                  cbG = ((c * 88U) >> 8U) - 44U;
;;;2082                  gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
;;;2083                  gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
;;;2084   
;;;2085                  cbB = (c + ((c * 198U) >> 8U)) - 227U;
;;;2086                  gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
;;;2087                  gMCUBufB[64] = addAndClamp(gMCUBufB[64], cbB);
;;;2088   
;;;2089                  break;
;;;2090               }
;;;2091               case 3:
;;;2092               {
;;;2093                  crR = (c + ((c * 103U) >> 8U)) - 179;
;;;2094                  gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
;;;2095                  gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
;;;2096   
;;;2097                  crG = ((c * 183U) >> 8U) - 91;
;;;2098                  gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
;;;2099                  gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
;;;2100   
;;;2101                  break;
;;;2102               }
;;;2103            }
;;;2104            break;
;;;2105         }
;;;2106         case PJPG_YH2V2:
;;;2107         {
;;;2108            // MCU size: 16x16, 6 blocks per MCU
;;;2109            switch (mcuBlock)
;;;2110            {
;;;2111               case 0:
;;;2112               {
;;;2113                  gMCUBufR[0] = c;
;;;2114                  gMCUBufG[0] = c;
;;;2115                  gMCUBufB[0] = c;
;;;2116                  break;
;;;2117               }
;;;2118               case 1:
;;;2119               {
;;;2120                  gMCUBufR[64] = c;
;;;2121                  gMCUBufG[64] = c;
;;;2122                  gMCUBufB[64] = c;
;;;2123                  break;
;;;2124               }
;;;2125               case 2:
;;;2126               {
;;;2127                  gMCUBufR[128] = c;
;;;2128                  gMCUBufG[128] = c;
;;;2129                  gMCUBufB[128] = c;
;;;2130                  break;
;;;2131               }
;;;2132               case 3:
;;;2133               {
;;;2134                  gMCUBufR[192] = c;
;;;2135                  gMCUBufG[192] = c;
;;;2136                  gMCUBufB[192] = c;
;;;2137                  break;
;;;2138               }
;;;2139               case 4:
;;;2140               {
;;;2141                  cbG = ((c * 88U) >> 8U) - 44U;
;;;2142                  gMCUBufG[0] = subAndClamp(gMCUBufG[0], cbG);
;;;2143                  gMCUBufG[64] = subAndClamp(gMCUBufG[64], cbG);
;;;2144                  gMCUBufG[128] = subAndClamp(gMCUBufG[128], cbG);
;;;2145                  gMCUBufG[192] = subAndClamp(gMCUBufG[192], cbG);
;;;2146   
;;;2147                  cbB = (c + ((c * 198U) >> 8U)) - 227U;
;;;2148                  gMCUBufB[0] = addAndClamp(gMCUBufB[0], cbB);
;;;2149                  gMCUBufB[64] = addAndClamp(gMCUBufB[64], cbB);
;;;2150                  gMCUBufB[128] = addAndClamp(gMCUBufB[128], cbB);
;;;2151                  gMCUBufB[192] = addAndClamp(gMCUBufB[192], cbB);
;;;2152   
;;;2153                  break;
;;;2154               }
;;;2155               case 5:
;;;2156               {
;;;2157                  crR = (c + ((c * 103U) >> 8U)) - 179;
;;;2158                  gMCUBufR[0] = addAndClamp(gMCUBufR[0], crR);
;;;2159                  gMCUBufR[64] = addAndClamp(gMCUBufR[64], crR);
;;;2160                  gMCUBufR[128] = addAndClamp(gMCUBufR[128], crR);
;;;2161                  gMCUBufR[192] = addAndClamp(gMCUBufR[192], crR);
;;;2162   
;;;2163                  crG = ((c * 183U) >> 8U) - 91;
;;;2164                  gMCUBufG[0] = subAndClamp(gMCUBufG[0], crG);
;;;2165                  gMCUBufG[64] = subAndClamp(gMCUBufG[64], crG);
;;;2166                  gMCUBufG[128] = subAndClamp(gMCUBufG[128], crG);
;;;2167                  gMCUBufG[192] = subAndClamp(gMCUBufG[192], crG);
;;;2168   
;;;2169                  break;
;;;2170               }
;;;2171            }
;;;2172            break;
;;;2173         }
;;;2174      }
;;;2175   }
000052  b009              ADD      sp,sp,#0x24
000054  bdf0              POP      {r4-r7,pc}
000056  9808              LDR      r0,[sp,#0x20]         ;1983
000058  2800              CMP      r0,#0                 ;1983
                  |L38.90|
00005a  d07a              BEQ      |L38.338|
00005c  2801              CMP      r0,#1                 ;1983
00005e  d014              BEQ      |L38.138|
000060  2802              CMP      r0,#2                 ;1983
000062  d1f6              BNE      |L38.82|
000064  2067              MOVS     r0,#0x67              ;2003
000066  4360              MULS     r0,r4,r0              ;2003
000068  0a00              LSRS     r0,r0,#8              ;2003
00006a  1901              ADDS     r1,r0,r4              ;2003
00006c  4615              MOV      r5,r2                 ;2004
00006e  7810              LDRB     r0,[r2,#0]            ;2004  ; gMCUBufR
000070  39b3              SUBS     r1,r1,#0xb3           ;2004
000072  f7fffffe          BL       addAndClamp
000076  7028              STRB     r0,[r5,#0]            ;2004
000078  20b7              MOVS     r0,#0xb7              ;2006
00007a  4344              MULS     r4,r0,r4              ;2006
00007c  0a21              LSRS     r1,r4,#8              ;2006
00007e  7838              LDRB     r0,[r7,#0]            ;2007  ; gMCUBufG
000080  395b              SUBS     r1,r1,#0x5b           ;2007
000082  f7fffffe          BL       subAndClamp
000086  7038              STRB     r0,[r7,#0]            ;2007
                  |L38.136|
000088  e7e3              B        |L38.82|
                  |L38.138|
00008a  2058              MOVS     r0,#0x58              ;1994
00008c  4360              MULS     r0,r4,r0              ;1994
00008e  0a01              LSRS     r1,r0,#8              ;1994
000090  7838              LDRB     r0,[r7,#0]            ;1995  ; gMCUBufG
000092  392c              SUBS     r1,r1,#0x2c           ;1995
000094  f7fffffe          BL       subAndClamp
000098  7038              STRB     r0,[r7,#0]            ;1995
00009a  20c6              MOVS     r0,#0xc6              ;1997
00009c  4360              MULS     r0,r4,r0              ;1997
00009e  0a00              LSRS     r0,r0,#8              ;1997
0000a0  1901              ADDS     r1,r0,r4              ;1997
0000a2  4ca6              LDR      r4,|L38.828|
0000a4  39e3              SUBS     r1,r1,#0xe3           ;1998
0000a6  3c40              SUBS     r4,r4,#0x40           ;1998
0000a8  7820              LDRB     r0,[r4,#0]            ;1998  ; gMCUBufB
0000aa  f7fffffe          BL       addAndClamp
0000ae  7020              STRB     r0,[r4,#0]            ;1998
0000b0  e7cf              B        |L38.82|
0000b2  9808              LDR      r0,[sp,#0x20]         ;2017
0000b4  2800              CMP      r0,#0                 ;2017
0000b6  d0d0              BEQ      |L38.90|
0000b8  2801              CMP      r0,#1                 ;2017
0000ba  d078              BEQ      |L38.430|
0000bc  2802              CMP      r0,#2                 ;2017
0000be  d027              BEQ      |L38.272|
0000c0  2803              CMP      r0,#3                 ;2017
0000c2  d1c6              BNE      |L38.82|
0000c4  2067              MOVS     r0,#0x67              ;2047
0000c6  4360              MULS     r0,r4,r0              ;2047
0000c8  0a00              LSRS     r0,r0,#8              ;2047
0000ca  1906              ADDS     r6,r0,r4              ;2047
0000cc  4899              LDR      r0,|L38.820|
0000ce  3eb3              SUBS     r6,r6,#0xb3           ;2048
0000d0  3080              ADDS     r0,r0,#0x80           ;2048
0000d2  7800              LDRB     r0,[r0,#0]            ;2048  ; gMCUBufR
0000d4  4631              MOV      r1,r6                 ;2048
0000d6  f7fffffe          BL       addAndClamp
0000da  4996              LDR      r1,|L38.820|
0000dc  3180              ADDS     r1,r1,#0x80           ;2048
0000de  7008              STRB     r0,[r1,#0]            ;2048
0000e0  9801              LDR      r0,[sp,#4]            ;2049
0000e2  4631              MOV      r1,r6                 ;2049
0000e4  7800              LDRB     r0,[r0,#0]            ;2049  ; gMCUBufR
0000e6  f7fffffe          BL       addAndClamp
0000ea  9901              LDR      r1,[sp,#4]            ;2049
0000ec  7008              STRB     r0,[r1,#0]            ;2049
0000ee  20b7              MOVS     r0,#0xb7              ;2051
0000f0  4344              MULS     r4,r0,r4              ;2051
0000f2  0a24              LSRS     r4,r4,#8              ;2051
0000f4  3c5b              SUBS     r4,r4,#0x5b           ;2052
0000f6  7838              LDRB     r0,[r7,#0]            ;2052  ; gMCUBufG
0000f8  4621              MOV      r1,r4                 ;2052
0000fa  f7fffffe          BL       subAndClamp
0000fe  7038              STRB     r0,[r7,#0]            ;2052
000100  7828              LDRB     r0,[r5,#0]            ;2053  ; gMCUBufG
000102  4621              MOV      r1,r4                 ;2053
000104  f7fffffe          BL       subAndClamp
000108  7028              STRB     r0,[r5,#0]            ;2053
00010a  e7a2              B        |L38.82|
                  |L38.268|
00010c  7004              STRB     r4,[r0,#0]            ;1989
00010e  e7a0              B        |L38.82|
                  |L38.272|
000110  2058              MOVS     r0,#0x58              ;2035
000112  4360              MULS     r0,r4,r0              ;2035
000114  0a06              LSRS     r6,r0,#8              ;2035
000116  3e2c              SUBS     r6,r6,#0x2c           ;2036
000118  7838              LDRB     r0,[r7,#0]            ;2036  ; gMCUBufG
00011a  4631              MOV      r1,r6                 ;2036
00011c  f7fffffe          BL       subAndClamp
000120  7038              STRB     r0,[r7,#0]            ;2036
000122  7828              LDRB     r0,[r5,#0]            ;2037  ; gMCUBufG
000124  4631              MOV      r1,r6                 ;2037
000126  f7fffffe          BL       subAndClamp
00012a  7028              STRB     r0,[r5,#0]            ;2037
00012c  20c6              MOVS     r0,#0xc6              ;2039
00012e  4360              MULS     r0,r4,r0              ;2039
000130  0a00              LSRS     r0,r0,#8              ;2039
000132  1904              ADDS     r4,r0,r4              ;2039
000134  4d81              LDR      r5,|L38.828|
000136  3ce3              SUBS     r4,r4,#0xe3           ;2040
000138  3d40              SUBS     r5,r5,#0x40           ;2040
00013a  7828              LDRB     r0,[r5,#0]            ;2040  ; gMCUBufB
00013c  4621              MOV      r1,r4                 ;2040
00013e  f7fffffe          BL       addAndClamp
000142  7028              STRB     r0,[r5,#0]            ;2040
000144  9800              LDR      r0,[sp,#0]            ;2041
000146  4621              MOV      r1,r4                 ;2041
000148  7800              LDRB     r0,[r0,#0]            ;2041  ; gMCUBufB
00014a  f7fffffe          BL       addAndClamp
00014e  9900              LDR      r1,[sp,#0]            ;2043
000150  e04e              B        |L38.496|
                  |L38.338|
000152  e060              B        |L38.534|
000154  9808              LDR      r0,[sp,#0x20]         ;2063
000156  2800              CMP      r0,#0                 ;2063
000158  d05d              BEQ      |L38.534|
00015a  2801              CMP      r0,#1                 ;2063
00015c  d060              BEQ      |L38.544|
00015e  2802              CMP      r0,#2                 ;2063
000160  d026              BEQ      |L38.432|
000162  2803              CMP      r0,#3                 ;2063
000164  d190              BNE      |L38.136|
000166  2067              MOVS     r0,#0x67              ;2093
000168  4360              MULS     r0,r4,r0              ;2093
00016a  0a00              LSRS     r0,r0,#8              ;2093
00016c  1905              ADDS     r5,r0,r4              ;2093
00016e  4871              LDR      r0,|L38.820|
000170  3db3              SUBS     r5,r5,#0xb3           ;2094
000172  3080              ADDS     r0,r0,#0x80           ;2094
000174  7800              LDRB     r0,[r0,#0]            ;2094  ; gMCUBufR
000176  4629              MOV      r1,r5                 ;2094
000178  f7fffffe          BL       addAndClamp
00017c  496d              LDR      r1,|L38.820|
00017e  3180              ADDS     r1,r1,#0x80           ;2094
000180  7008              STRB     r0,[r1,#0]            ;2094
000182  9804              LDR      r0,[sp,#0x10]         ;2095
000184  4629              MOV      r1,r5                 ;2095
000186  7800              LDRB     r0,[r0,#0]            ;2095  ; gMCUBufR
000188  f7fffffe          BL       addAndClamp
00018c  9904              LDR      r1,[sp,#0x10]         ;2095
00018e  7008              STRB     r0,[r1,#0]            ;2095
000190  20b7              MOVS     r0,#0xb7              ;2097
000192  4344              MULS     r4,r0,r4              ;2097
000194  0a24              LSRS     r4,r4,#8              ;2097
000196  3c5b              SUBS     r4,r4,#0x5b           ;2098
000198  7838              LDRB     r0,[r7,#0]            ;2098  ; gMCUBufG
00019a  4621              MOV      r1,r4                 ;2098
00019c  f7fffffe          BL       subAndClamp
0001a0  7038              STRB     r0,[r7,#0]            ;2098
0001a2  7830              LDRB     r0,[r6,#0]            ;2099  ; gMCUBufG
0001a4  4621              MOV      r1,r4                 ;2099
0001a6  f7fffffe          BL       subAndClamp
0001aa  7030              STRB     r0,[r6,#0]            ;2099
0001ac  e751              B        |L38.82|
                  |L38.430|
0001ae  e03c              B        |L38.554|
                  |L38.432|
0001b0  2058              MOVS     r0,#0x58              ;2081
0001b2  4360              MULS     r0,r4,r0              ;2081
0001b4  0a05              LSRS     r5,r0,#8              ;2081
0001b6  3d2c              SUBS     r5,r5,#0x2c           ;2082
0001b8  7838              LDRB     r0,[r7,#0]            ;2082  ; gMCUBufG
0001ba  4629              MOV      r1,r5                 ;2082
0001bc  f7fffffe          BL       subAndClamp
0001c0  7038              STRB     r0,[r7,#0]            ;2082
0001c2  7830              LDRB     r0,[r6,#0]            ;2083  ; gMCUBufG
0001c4  4629              MOV      r1,r5                 ;2083
0001c6  f7fffffe          BL       subAndClamp
0001ca  7030              STRB     r0,[r6,#0]            ;2083
0001cc  20c6              MOVS     r0,#0xc6              ;2085
0001ce  4360              MULS     r0,r4,r0              ;2085
0001d0  0a00              LSRS     r0,r0,#8              ;2085
0001d2  1904              ADDS     r4,r0,r4              ;2085
0001d4  4d59              LDR      r5,|L38.828|
0001d6  3ce3              SUBS     r4,r4,#0xe3           ;2086
0001d8  3d40              SUBS     r5,r5,#0x40           ;2086
0001da  7828              LDRB     r0,[r5,#0]            ;2086  ; gMCUBufB
0001dc  4621              MOV      r1,r4                 ;2086
0001de  f7fffffe          BL       addAndClamp
0001e2  7028              STRB     r0,[r5,#0]            ;2086
0001e4  9803              LDR      r0,[sp,#0xc]          ;2087
0001e6  4621              MOV      r1,r4                 ;2087
0001e8  7800              LDRB     r0,[r0,#0]            ;2087  ; gMCUBufB
0001ea  f7fffffe          BL       addAndClamp
0001ee  9903              LDR      r1,[sp,#0xc]          ;2087
                  |L38.496|
0001f0  7008              STRB     r0,[r1,#0]            ;2041
0001f2  e72e              B        |L38.82|
0001f4  4952              LDR      r1,|L38.832|
0001f6  9106              STR      r1,[sp,#0x18]         ;1989
0001f8  4950              LDR      r1,|L38.828|
0001fa  9808              LDR      r0,[sp,#0x20]         ;2134
0001fc  3180              ADDS     r1,r1,#0x80           ;1989
0001fe  9105              STR      r1,[sp,#0x14]         ;1988
000200  39ff              SUBS     r1,r1,#0xff           ;1988
000202  3901              SUBS     r1,#1                 ;1988
000204  9102              STR      r1,[sp,#8]            ;2109
000206  0003              MOVS     r3,r0                 ;2109
000208  f7fffffe          BL       __ARM_common_switch8
00020c  06050a0f          DCB      0x06,0x05,0x0a,0x0f
000210  14195504          DCB      0x14,0x19,0x55,0x04
000214  e71d              B        |L38.82|
                  |L38.534|
000216  4849              LDR      r0,|L38.828|
000218  7014              STRB     r4,[r2,#0]            ;2113
00021a  703c              STRB     r4,[r7,#0]            ;2114
00021c  3840              SUBS     r0,r0,#0x40           ;2115
00021e  e775              B        |L38.268|
                  |L38.544|
000220  9804              LDR      r0,[sp,#0x10]         ;2120
000222  7004              STRB     r4,[r0,#0]            ;2120
000224  7034              STRB     r4,[r6,#0]            ;2121
000226  9803              LDR      r0,[sp,#0xc]          ;2123
000228  e770              B        |L38.268|
                  |L38.554|
00022a  9801              LDR      r0,[sp,#4]            ;2127
00022c  7004              STRB     r4,[r0,#0]            ;2127
00022e  702c              STRB     r4,[r5,#0]            ;2128
000230  9800              LDR      r0,[sp,#0]            ;2130
000232  e76b              B        |L38.268|
000234  9806              LDR      r0,[sp,#0x18]         ;2134
000236  7004              STRB     r4,[r0,#0]            ;2134
000238  700c              STRB     r4,[r1,#0]            ;2135
00023a  9805              LDR      r0,[sp,#0x14]         ;2137
00023c  e766              B        |L38.268|
00023e  2058              MOVS     r0,#0x58              ;2141
000240  4360              MULS     r0,r4,r0              ;2141
000242  0a00              LSRS     r0,r0,#8              ;2141
000244  382c              SUBS     r0,r0,#0x2c           ;2141
000246  9001              STR      r0,[sp,#4]            ;2142
000248  7838              LDRB     r0,[r7,#0]            ;2142  ; gMCUBufG
00024a  9901              LDR      r1,[sp,#4]            ;2142
00024c  f7fffffe          BL       subAndClamp
000250  7038              STRB     r0,[r7,#0]            ;2142
000252  7830              LDRB     r0,[r6,#0]            ;2143  ; gMCUBufG
000254  9901              LDR      r1,[sp,#4]            ;2143
000256  f7fffffe          BL       subAndClamp
00025a  7030              STRB     r0,[r6,#0]            ;2143
00025c  7828              LDRB     r0,[r5,#0]            ;2144  ; gMCUBufG
00025e  9901              LDR      r1,[sp,#4]            ;2144
000260  f7fffffe          BL       subAndClamp
000264  7028              STRB     r0,[r5,#0]            ;2144
000266  9802              LDR      r0,[sp,#8]            ;2145
000268  9901              LDR      r1,[sp,#4]            ;2145
00026a  7800              LDRB     r0,[r0,#0]            ;2145  ; gMCUBufG
00026c  f7fffffe          BL       subAndClamp
000270  9902              LDR      r1,[sp,#8]            ;2145
000272  4d32              LDR      r5,|L38.828|
000274  7008              STRB     r0,[r1,#0]            ;2145
000276  20c6              MOVS     r0,#0xc6              ;2147
000278  4360              MULS     r0,r4,r0              ;2147
00027a  0a00              LSRS     r0,r0,#8              ;2147
00027c  1904              ADDS     r4,r0,r4              ;2147
00027e  3d40              SUBS     r5,r5,#0x40           ;2148
000280  3ce3              SUBS     r4,r4,#0xe3           ;2148
000282  7828              LDRB     r0,[r5,#0]            ;2148  ; gMCUBufB
000284  4621              MOV      r1,r4                 ;2148
000286  f7fffffe          BL       addAndClamp
00028a  7028              STRB     r0,[r5,#0]            ;2148
00028c  9803              LDR      r0,[sp,#0xc]          ;2149
00028e  4621              MOV      r1,r4                 ;2149
000290  7800              LDRB     r0,[r0,#0]            ;2149  ; gMCUBufB
000292  f7fffffe          BL       addAndClamp
000296  9903              LDR      r1,[sp,#0xc]          ;2149
000298  7008              STRB     r0,[r1,#0]            ;2149
00029a  9800              LDR      r0,[sp,#0]            ;2150
00029c  4621              MOV      r1,r4                 ;2150
00029e  7800              LDRB     r0,[r0,#0]            ;2150  ; gMCUBufB
0002a0  f7fffffe          BL       addAndClamp
0002a4  9900              LDR      r1,[sp,#0]            ;2150
0002a6  7008              STRB     r0,[r1,#0]            ;2150
0002a8  9805              LDR      r0,[sp,#0x14]         ;2151
0002aa  4621              MOV      r1,r4                 ;2151
0002ac  7800              LDRB     r0,[r0,#0]            ;2151  ; gMCUBufB
0002ae  f7fffffe          BL       addAndClamp
0002b2  9905              LDR      r1,[sp,#0x14]         ;2153
0002b4  e79c              B        |L38.496|
0002b6  2067              MOVS     r0,#0x67              ;2157
0002b8  4360              MULS     r0,r4,r0              ;2157
0002ba  0a00              LSRS     r0,r0,#8              ;2157
0002bc  1900              ADDS     r0,r0,r4              ;2157
0002be  38b3              SUBS     r0,r0,#0xb3           ;2157
0002c0  9000              STR      r0,[sp,#0]            ;2158
0002c2  481c              LDR      r0,|L38.820|
0002c4  9900              LDR      r1,[sp,#0]            ;2158
0002c6  3080              ADDS     r0,r0,#0x80           ;2158
0002c8  7800              LDRB     r0,[r0,#0]            ;2158  ; gMCUBufR
0002ca  f7fffffe          BL       addAndClamp
0002ce  4919              LDR      r1,|L38.820|
0002d0  3180              ADDS     r1,r1,#0x80           ;2158
0002d2  7008              STRB     r0,[r1,#0]            ;2158
0002d4  9804              LDR      r0,[sp,#0x10]         ;2159
0002d6  9900              LDR      r1,[sp,#0]            ;2159
0002d8  7800              LDRB     r0,[r0,#0]            ;2159  ; gMCUBufR
0002da  f7fffffe          BL       addAndClamp
0002de  9904              LDR      r1,[sp,#0x10]         ;2159
0002e0  7008              STRB     r0,[r1,#0]            ;2159
0002e2  9801              LDR      r0,[sp,#4]            ;2160
0002e4  9900              LDR      r1,[sp,#0]            ;2160
0002e6  7800              LDRB     r0,[r0,#0]            ;2160  ; gMCUBufR
0002e8  f7fffffe          BL       addAndClamp
0002ec  9901              LDR      r1,[sp,#4]            ;2160
0002ee  7008              STRB     r0,[r1,#0]            ;2160
0002f0  9806              LDR      r0,[sp,#0x18]         ;2161
0002f2  9900              LDR      r1,[sp,#0]            ;2161
0002f4  7800              LDRB     r0,[r0,#0]            ;2161  ; gMCUBufR
0002f6  f7fffffe          BL       addAndClamp
0002fa  9906              LDR      r1,[sp,#0x18]         ;2161
0002fc  7008              STRB     r0,[r1,#0]            ;2161
0002fe  20b7              MOVS     r0,#0xb7              ;2163
000300  4344              MULS     r4,r0,r4              ;2163
000302  0a24              LSRS     r4,r4,#8              ;2163
000304  3c5b              SUBS     r4,r4,#0x5b           ;2164
000306  7838              LDRB     r0,[r7,#0]            ;2164  ; gMCUBufG
000308  4621              MOV      r1,r4                 ;2164
00030a  f7fffffe          BL       subAndClamp
00030e  7038              STRB     r0,[r7,#0]            ;2164
000310  7830              LDRB     r0,[r6,#0]            ;2165  ; gMCUBufG
000312  4621              MOV      r1,r4                 ;2165
000314  f7fffffe          BL       subAndClamp
000318  7030              STRB     r0,[r6,#0]            ;2165
00031a  7828              LDRB     r0,[r5,#0]            ;2166  ; gMCUBufG
00031c  4621              MOV      r1,r4                 ;2166
00031e  f7fffffe          BL       subAndClamp
000322  7028              STRB     r0,[r5,#0]            ;2166
000324  9802              LDR      r0,[sp,#8]            ;2167
000326  4621              MOV      r1,r4                 ;2167
000328  7800              LDRB     r0,[r0,#0]            ;2167  ; gMCUBufG
00032a  f7fffffe          BL       subAndClamp
00032e  9902              LDR      r1,[sp,#8]            ;2169
000330  e75e              B        |L38.496|
;;;2176   
                          ENDP

000332  0000              DCW      0x0000
                  |L38.820|
                          DCD      ||.bss||
                  |L38.824|
                          DCD      ||.data||
                  |L38.828|
                          DCD      ||.bss||+0x2c0
                  |L38.832|
                          DCD      ||.bss||+0x140

                          AREA ||i.upsampleCb||, CODE, READONLY, ALIGN=2

                  upsampleCb PROC
                  |symbol_number.426|
;;;1535   #endif
;;;1536   static void upsampleCb(uint8 srcOfs, uint8 dstOfs)
000000  b5fe              PUSH     {r1-r7,lr}
;;;1537   {
;;;1538      // Cb - affects G and B
;;;1539      uint8 x, y;
;;;1540      int16* pSrc = gCoeffBuf + srcOfs;
000002  4a29              LDR      r2,|L39.168|
000004  0040              LSLS     r0,r0,#1
000006  1886              ADDS     r6,r0,r2
;;;1541      uint8* pDstG = gMCUBufG + dstOfs;
000008  4828              LDR      r0,|L39.172|
00000a  1845              ADDS     r5,r0,r1
;;;1542      uint8* pDstB = gMCUBufB + dstOfs;
00000c  30ff              ADDS     r0,r0,#0xff
00000e  3001              ADDS     r0,#1
000010  1844              ADDS     r4,r0,r1
;;;1543      for (y = 0; y < 4; y++)
000012  2000              MOVS     r0,#0
000014  9002              STR      r0,[sp,#8]
                  |L39.22|
;;;1544      {
;;;1545         for (x = 0; x < 4; x++)
000016  2000              MOVS     r0,#0
000018  9001              STR      r0,[sp,#4]
                  |L39.26|
;;;1546         {
;;;1547            uint8 cb = (uint8)*pSrc++;
00001a  7837              LDRB     r7,[r6,#0]
;;;1548            int16 cbG, cbB;
;;;1549   
;;;1550            cbG = ((cb * 88U) >> 8U) - 44U;
00001c  2058              MOVS     r0,#0x58
00001e  4378              MULS     r0,r7,r0
000020  0a00              LSRS     r0,r0,#8
000022  382c              SUBS     r0,r0,#0x2c
;;;1551            pDstG[0] = subAndClamp(pDstG[0], cbG);
000024  9000              STR      r0,[sp,#0]
000026  7828              LDRB     r0,[r5,#0]
000028  1cb6              ADDS     r6,r6,#2
00002a  9900              LDR      r1,[sp,#0]
00002c  f7fffffe          BL       subAndClamp
000030  7028              STRB     r0,[r5,#0]
;;;1552            pDstG[1] = subAndClamp(pDstG[1], cbG);
000032  7868              LDRB     r0,[r5,#1]
000034  9900              LDR      r1,[sp,#0]
000036  f7fffffe          BL       subAndClamp
00003a  7068              STRB     r0,[r5,#1]
;;;1553            pDstG[8] = subAndClamp(pDstG[8], cbG);
00003c  7a28              LDRB     r0,[r5,#8]
00003e  9900              LDR      r1,[sp,#0]
000040  f7fffffe          BL       subAndClamp
000044  7228              STRB     r0,[r5,#8]
;;;1554            pDstG[9] = subAndClamp(pDstG[9], cbG);
000046  7a68              LDRB     r0,[r5,#9]
000048  9900              LDR      r1,[sp,#0]
00004a  f7fffffe          BL       subAndClamp
00004e  7268              STRB     r0,[r5,#9]
;;;1555   
;;;1556            cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
000050  20c6              MOVS     r0,#0xc6
000052  4378              MULS     r0,r7,r0
000054  0a00              LSRS     r0,r0,#8
000056  19c7              ADDS     r7,r0,r7
;;;1557            pDstB[0] = addAndClamp(pDstB[0], cbB);
000058  3fe3              SUBS     r7,r7,#0xe3
00005a  7820              LDRB     r0,[r4,#0]
00005c  4639              MOV      r1,r7
00005e  f7fffffe          BL       addAndClamp
000062  7020              STRB     r0,[r4,#0]
;;;1558            pDstB[1] = addAndClamp(pDstB[1], cbB);
000064  7860              LDRB     r0,[r4,#1]
000066  4639              MOV      r1,r7
000068  f7fffffe          BL       addAndClamp
00006c  7060              STRB     r0,[r4,#1]
;;;1559            pDstB[8] = addAndClamp(pDstB[8], cbB);
00006e  7a20              LDRB     r0,[r4,#8]
000070  4639              MOV      r1,r7
000072  f7fffffe          BL       addAndClamp
000076  7220              STRB     r0,[r4,#8]
;;;1560            pDstB[9] = addAndClamp(pDstB[9], cbB);
000078  7a60              LDRB     r0,[r4,#9]
00007a  4639              MOV      r1,r7
00007c  f7fffffe          BL       addAndClamp
000080  7260              STRB     r0,[r4,#9]
000082  9801              LDR      r0,[sp,#4]            ;1545
000084  1ca4              ADDS     r4,r4,#2              ;1545
000086  1c40              ADDS     r0,r0,#1              ;1545
000088  b2c0              UXTB     r0,r0                 ;1545
00008a  1cad              ADDS     r5,r5,#2              ;1545
00008c  9001              STR      r0,[sp,#4]            ;1545
00008e  2804              CMP      r0,#4                 ;1545
000090  d3c3              BCC      |L39.26|
000092  9802              LDR      r0,[sp,#8]            ;1543
000094  3408              ADDS     r4,r4,#8              ;1543
000096  1c40              ADDS     r0,r0,#1              ;1543
000098  b2c0              UXTB     r0,r0                 ;1543
00009a  3508              ADDS     r5,r5,#8              ;1543
00009c  3608              ADDS     r6,r6,#8              ;1543
00009e  9002              STR      r0,[sp,#8]            ;1543
0000a0  2804              CMP      r0,#4                 ;1543
0000a2  d3b8              BCC      |L39.22|
;;;1561   
;;;1562            pDstG += 2;
;;;1563            pDstB += 2;
;;;1564         }
;;;1565   
;;;1566         pSrc = pSrc - 4 + 8;
;;;1567         pDstG = pDstG - 8 + 16;
;;;1568         pDstB = pDstB - 8 + 16;
;;;1569      }
;;;1570   }   
0000a4  bdfe              POP      {r1-r7,pc}
;;;1571   /*----------------------------------------------------------------------------*/
                          ENDP

0000a6  0000              DCW      0x0000
                  |L39.168|
                          DCD      ||.bss||
                  |L39.172|
                          DCD      ||.bss||+0x180

                          AREA ||i.upsampleCbH||, CODE, READONLY, ALIGN=2

                  upsampleCbH PROC
;;;1572   // Cb upsample and accumulate, 4x8 to 8x8
;;;1573   static void upsampleCbH(uint8 srcOfs, uint8 dstOfs)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1574   {
;;;1575      // Cb - affects G and B
;;;1576      uint8 x, y;
;;;1577      int16* pSrc = gCoeffBuf + srcOfs;
000002  4a1f              LDR      r2,|L40.128|
000004  0040              LSLS     r0,r0,#1
000006  1886              ADDS     r6,r0,r2
;;;1578      uint8* pDstG = gMCUBufG + dstOfs;
000008  481e              LDR      r0,|L40.132|
00000a  b089              SUB      sp,sp,#0x24           ;1574
00000c  1845              ADDS     r5,r0,r1
;;;1579      uint8* pDstB = gMCUBufB + dstOfs;
00000e  30ff              ADDS     r0,r0,#0xff
000010  3001              ADDS     r0,#1
000012  1844              ADDS     r4,r0,r1
;;;1580      for (y = 0; y < 8; y++)
000014  2000              MOVS     r0,#0
000016  9006              STR      r0,[sp,#0x18]
                  |L40.24|
;;;1581      {
;;;1582         for (x = 0; x < 4; x++)
000018  2000              MOVS     r0,#0
00001a  9005              STR      r0,[sp,#0x14]
                  |L40.28|
;;;1583         {
;;;1584            uint8 cb = (uint8)*pSrc++;
00001c  7837              LDRB     r7,[r6,#0]
;;;1585            int16 cbG, cbB;
;;;1586   
;;;1587            cbG = ((cb * 88U) >> 8U) - 44U;
00001e  2058              MOVS     r0,#0x58
000020  4378              MULS     r0,r7,r0
000022  0a00              LSRS     r0,r0,#8
000024  382c              SUBS     r0,r0,#0x2c
;;;1588            pDstG[0] = subAndClamp(pDstG[0], cbG);
000026  9000              STR      r0,[sp,#0]
000028  7828              LDRB     r0,[r5,#0]
00002a  1cb6              ADDS     r6,r6,#2
00002c  9900              LDR      r1,[sp,#0]
00002e  f7fffffe          BL       subAndClamp
000032  7028              STRB     r0,[r5,#0]
;;;1589            pDstG[1] = subAndClamp(pDstG[1], cbG);
000034  7868              LDRB     r0,[r5,#1]
000036  9900              LDR      r1,[sp,#0]
000038  f7fffffe          BL       subAndClamp
00003c  7068              STRB     r0,[r5,#1]
;;;1590   
;;;1591            cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
00003e  20c6              MOVS     r0,#0xc6
000040  4378              MULS     r0,r7,r0
000042  0a00              LSRS     r0,r0,#8
000044  19c7              ADDS     r7,r0,r7
;;;1592            pDstB[0] = addAndClamp(pDstB[0], cbB);
000046  3fe3              SUBS     r7,r7,#0xe3
000048  7820              LDRB     r0,[r4,#0]
00004a  4639              MOV      r1,r7
00004c  f7fffffe          BL       addAndClamp
000050  7020              STRB     r0,[r4,#0]
;;;1593            pDstB[1] = addAndClamp(pDstB[1], cbB);
000052  7860              LDRB     r0,[r4,#1]
000054  4639              MOV      r1,r7
000056  f7fffffe          BL       addAndClamp
00005a  7060              STRB     r0,[r4,#1]
00005c  9805              LDR      r0,[sp,#0x14]         ;1582
00005e  1ca4              ADDS     r4,r4,#2              ;1582
000060  1c40              ADDS     r0,r0,#1              ;1582
000062  b2c0              UXTB     r0,r0                 ;1582
000064  1cad              ADDS     r5,r5,#2              ;1582
000066  9005              STR      r0,[sp,#0x14]         ;1582
000068  2804              CMP      r0,#4                 ;1582
00006a  d3d7              BCC      |L40.28|
00006c  9806              LDR      r0,[sp,#0x18]         ;1580
00006e  3608              ADDS     r6,r6,#8              ;1580
000070  1c40              ADDS     r0,r0,#1              ;1580
000072  b2c0              UXTB     r0,r0                 ;1580
000074  9006              STR      r0,[sp,#0x18]         ;1580
000076  2808              CMP      r0,#8                 ;1580
000078  d3ce              BCC      |L40.24|
;;;1594   
;;;1595            pDstG += 2;
;;;1596            pDstB += 2;
;;;1597         }
;;;1598   
;;;1599         pSrc = pSrc - 4 + 8;
;;;1600      }
;;;1601   }   
00007a  b009              ADD      sp,sp,#0x24
00007c  bdf0              POP      {r4-r7,pc}
;;;1602   /*----------------------------------------------------------------------------*/
                          ENDP

00007e  0000              DCW      0x0000
                  |L40.128|
                          DCD      ||.bss||
                  |L40.132|
                          DCD      ||.bss||+0x180

                          AREA ||i.upsampleCbV||, CODE, READONLY, ALIGN=2

                  upsampleCbV PROC
;;;1603   // Cb upsample and accumulate, 8x4 to 8x8
;;;1604   static void upsampleCbV(uint8 srcOfs, uint8 dstOfs)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1605   {
;;;1606      // Cb - affects G and B
;;;1607      uint8 x, y;
;;;1608      int16* pSrc = gCoeffBuf + srcOfs;
000002  4a1f              LDR      r2,|L41.128|
000004  0040              LSLS     r0,r0,#1
000006  b089              SUB      sp,sp,#0x24           ;1605
000008  1880              ADDS     r0,r0,r2
;;;1609      uint8* pDstG = gMCUBufG + dstOfs;
00000a  9006              STR      r0,[sp,#0x18]
00000c  481d              LDR      r0,|L41.132|
00000e  1845              ADDS     r5,r0,r1
;;;1610      uint8* pDstB = gMCUBufB + dstOfs;
000010  30ff              ADDS     r0,r0,#0xff
000012  3001              ADDS     r0,#1
000014  1844              ADDS     r4,r0,r1
;;;1611      for (y = 0; y < 4; y++)
000016  2000              MOVS     r0,#0
000018  9005              STR      r0,[sp,#0x14]
                  |L41.26|
;;;1612      {
;;;1613         for (x = 0; x < 8; x++)
00001a  2700              MOVS     r7,#0
                  |L41.28|
;;;1614         {
;;;1615            uint8 cb = (uint8)*pSrc++;
00001c  9806              LDR      r0,[sp,#0x18]
00001e  7806              LDRB     r6,[r0,#0]
000020  1c80              ADDS     r0,r0,#2
;;;1616            int16 cbG, cbB;
;;;1617   
;;;1618            cbG = ((cb * 88U) >> 8U) - 44U;
000022  9006              STR      r0,[sp,#0x18]
000024  2058              MOVS     r0,#0x58
000026  4370              MULS     r0,r6,r0
000028  0a00              LSRS     r0,r0,#8
00002a  382c              SUBS     r0,r0,#0x2c
;;;1619            pDstG[0] = subAndClamp(pDstG[0], cbG);
00002c  9000              STR      r0,[sp,#0]
00002e  7828              LDRB     r0,[r5,#0]
000030  9900              LDR      r1,[sp,#0]
000032  f7fffffe          BL       subAndClamp
000036  7028              STRB     r0,[r5,#0]
;;;1620            pDstG[8] = subAndClamp(pDstG[8], cbG);
000038  7a28              LDRB     r0,[r5,#8]
00003a  9900              LDR      r1,[sp,#0]
00003c  f7fffffe          BL       subAndClamp
000040  7228              STRB     r0,[r5,#8]
;;;1621   
;;;1622            cbB = (cb + ((cb * 198U) >> 8U)) - 227U;
000042  20c6              MOVS     r0,#0xc6
000044  4370              MULS     r0,r6,r0
000046  0a00              LSRS     r0,r0,#8
000048  1986              ADDS     r6,r0,r6
;;;1623            pDstB[0] = addAndClamp(pDstB[0], cbB);
00004a  3ee3              SUBS     r6,r6,#0xe3
00004c  7820              LDRB     r0,[r4,#0]
00004e  4631              MOV      r1,r6
000050  f7fffffe          BL       addAndClamp
000054  7020              STRB     r0,[r4,#0]
;;;1624            pDstB[8] = addAndClamp(pDstB[8], cbB);
000056  7a20              LDRB     r0,[r4,#8]
000058  4631              MOV      r1,r6
00005a  f7fffffe          BL       addAndClamp
00005e  7220              STRB     r0,[r4,#8]
000060  1c7f              ADDS     r7,r7,#1
000062  b2ff              UXTB     r7,r7                 ;1613
000064  1c64              ADDS     r4,r4,#1              ;1613
000066  1c6d              ADDS     r5,r5,#1              ;1613
000068  2f08              CMP      r7,#8                 ;1613
00006a  d3d7              BCC      |L41.28|
00006c  9805              LDR      r0,[sp,#0x14]         ;1611
00006e  3408              ADDS     r4,r4,#8              ;1611
000070  1c40              ADDS     r0,r0,#1              ;1611
000072  b2c0              UXTB     r0,r0                 ;1611
000074  3508              ADDS     r5,r5,#8              ;1611
000076  9005              STR      r0,[sp,#0x14]         ;1611
000078  2804              CMP      r0,#4                 ;1611
00007a  d3ce              BCC      |L41.26|
;;;1625   
;;;1626            ++pDstG;
;;;1627            ++pDstB;
;;;1628         }
;;;1629   
;;;1630         pDstG = pDstG - 8 + 16;
;;;1631         pDstB = pDstB - 8 + 16;
;;;1632      }
;;;1633   }   
00007c  b009              ADD      sp,sp,#0x24
00007e  bdf0              POP      {r4-r7,pc}
;;;1634   /*----------------------------------------------------------------------------*/
                          ENDP

                  |L41.128|
                          DCD      ||.bss||
                  |L41.132|
                          DCD      ||.bss||+0x180

                          AREA ||i.upsampleCr||, CODE, READONLY, ALIGN=2

                  upsampleCr PROC
                  |symbol_number.430|
;;;1647   #endif
;;;1648   static void upsampleCr(uint8 srcOfs, uint8 dstOfs) 
000000  b5fe              PUSH     {r1-r7,lr}
;;;1649   {
;;;1650      // Cr - affects R and G
;;;1651      uint8 x, y;
;;;1652      int16* pSrc = gCoeffBuf + srcOfs;
000002  4a29              LDR      r2,|L42.168|
000004  0040              LSLS     r0,r0,#1
000006  1886              ADDS     r6,r0,r2
;;;1653      uint8* pDstR = gMCUBufR + dstOfs;
000008  4610              MOV      r0,r2
00000a  3080              ADDS     r0,r0,#0x80
00000c  1845              ADDS     r5,r0,r1
;;;1654      uint8* pDstG = gMCUBufG + dstOfs;
00000e  30ff              ADDS     r0,r0,#0xff
000010  3001              ADDS     r0,#1
000012  1844              ADDS     r4,r0,r1
;;;1655      for (y = 0; y < 4; y++)
000014  2000              MOVS     r0,#0
000016  9002              STR      r0,[sp,#8]
                  |L42.24|
;;;1656      {
;;;1657         for (x = 0; x < 4; x++)
000018  2000              MOVS     r0,#0
00001a  9001              STR      r0,[sp,#4]
                  |L42.28|
;;;1658         {
;;;1659            uint8 cr = (uint8)*pSrc++;
00001c  7837              LDRB     r7,[r6,#0]
;;;1660            int16 crR, crG;
;;;1661   
;;;1662            crR = (cr + ((cr * 103U) >> 8U)) - 179;
00001e  2067              MOVS     r0,#0x67
000020  4378              MULS     r0,r7,r0
000022  0a00              LSRS     r0,r0,#8
000024  19c0              ADDS     r0,r0,r7
000026  38b3              SUBS     r0,r0,#0xb3
;;;1663            pDstR[0] = addAndClamp(pDstR[0], crR);
000028  9000              STR      r0,[sp,#0]
00002a  7828              LDRB     r0,[r5,#0]
00002c  1cb6              ADDS     r6,r6,#2
00002e  9900              LDR      r1,[sp,#0]
000030  f7fffffe          BL       addAndClamp
000034  7028              STRB     r0,[r5,#0]
;;;1664            pDstR[1] = addAndClamp(pDstR[1], crR);
000036  7868              LDRB     r0,[r5,#1]
000038  9900              LDR      r1,[sp,#0]
00003a  f7fffffe          BL       addAndClamp
00003e  7068              STRB     r0,[r5,#1]
;;;1665            pDstR[8] = addAndClamp(pDstR[8], crR);
000040  7a28              LDRB     r0,[r5,#8]
000042  9900              LDR      r1,[sp,#0]
000044  f7fffffe          BL       addAndClamp
000048  7228              STRB     r0,[r5,#8]
;;;1666            pDstR[9] = addAndClamp(pDstR[9], crR);
00004a  7a68              LDRB     r0,[r5,#9]
00004c  9900              LDR      r1,[sp,#0]
00004e  f7fffffe          BL       addAndClamp
000052  7268              STRB     r0,[r5,#9]
;;;1667            
;;;1668            crG = ((cr * 183U) >> 8U) - 91;
000054  20b7              MOVS     r0,#0xb7
000056  4347              MULS     r7,r0,r7
000058  0a3f              LSRS     r7,r7,#8
;;;1669            pDstG[0] = subAndClamp(pDstG[0], crG);
00005a  3f5b              SUBS     r7,r7,#0x5b
00005c  7820              LDRB     r0,[r4,#0]
00005e  4639              MOV      r1,r7
000060  f7fffffe          BL       subAndClamp
000064  7020              STRB     r0,[r4,#0]
;;;1670            pDstG[1] = subAndClamp(pDstG[1], crG);
000066  7860              LDRB     r0,[r4,#1]
000068  4639              MOV      r1,r7
00006a  f7fffffe          BL       subAndClamp
00006e  7060              STRB     r0,[r4,#1]
;;;1671            pDstG[8] = subAndClamp(pDstG[8], crG);
000070  7a20              LDRB     r0,[r4,#8]
000072  4639              MOV      r1,r7
000074  f7fffffe          BL       subAndClamp
000078  7220              STRB     r0,[r4,#8]
;;;1672            pDstG[9] = subAndClamp(pDstG[9], crG);
00007a  7a60              LDRB     r0,[r4,#9]
00007c  4639              MOV      r1,r7
00007e  f7fffffe          BL       subAndClamp
000082  7260              STRB     r0,[r4,#9]
000084  9801              LDR      r0,[sp,#4]            ;1657
000086  1ca4              ADDS     r4,r4,#2              ;1657
000088  1c40              ADDS     r0,r0,#1              ;1657
00008a  b2c0              UXTB     r0,r0                 ;1657
00008c  1cad              ADDS     r5,r5,#2              ;1657
00008e  9001              STR      r0,[sp,#4]            ;1657
000090  2804              CMP      r0,#4                 ;1657
000092  d3c3              BCC      |L42.28|
000094  9802              LDR      r0,[sp,#8]            ;1655
000096  3408              ADDS     r4,r4,#8              ;1655
000098  1c40              ADDS     r0,r0,#1              ;1655
00009a  b2c0              UXTB     r0,r0                 ;1655
00009c  3508              ADDS     r5,r5,#8              ;1655
00009e  3608              ADDS     r6,r6,#8              ;1655
0000a0  9002              STR      r0,[sp,#8]            ;1655
0000a2  2804              CMP      r0,#4                 ;1655
0000a4  d3b8              BCC      |L42.24|
;;;1673            
;;;1674            pDstR += 2;
;;;1675            pDstG += 2;
;;;1676         }
;;;1677   
;;;1678         pSrc = pSrc - 4 + 8;
;;;1679         pDstR = pDstR - 8 + 16;
;;;1680         pDstG = pDstG - 8 + 16;
;;;1681      }
;;;1682   }   
0000a6  bdfe              POP      {r1-r7,pc}
;;;1683   /*----------------------------------------------------------------------------*/
                          ENDP

                  |L42.168|
                          DCD      ||.bss||

                          AREA ||i.upsampleCrH||, CODE, READONLY, ALIGN=2

                  upsampleCrH PROC
;;;1684   // Cr upsample and accumulate, 4x8 to 8x8
;;;1685   static void upsampleCrH(uint8 srcOfs, uint8 dstOfs)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1686   {
;;;1687      // Cr - affects R and G
;;;1688      uint8 x, y;
;;;1689      int16* pSrc = gCoeffBuf + srcOfs;
000002  4a1f              LDR      r2,|L43.128|
000004  0040              LSLS     r0,r0,#1
000006  1886              ADDS     r6,r0,r2
;;;1690      uint8* pDstR = gMCUBufR + dstOfs;
000008  4610              MOV      r0,r2
00000a  3080              ADDS     r0,r0,#0x80
00000c  1845              ADDS     r5,r0,r1
;;;1691      uint8* pDstG = gMCUBufG + dstOfs;
00000e  30ff              ADDS     r0,r0,#0xff
000010  3001              ADDS     r0,#1
000012  1844              ADDS     r4,r0,r1
000014  b089              SUB      sp,sp,#0x24           ;1686
;;;1692      for (y = 0; y < 8; y++)
000016  2000              MOVS     r0,#0
000018  9006              STR      r0,[sp,#0x18]
                  |L43.26|
;;;1693      {
;;;1694         for (x = 0; x < 4; x++)
00001a  2000              MOVS     r0,#0
00001c  9005              STR      r0,[sp,#0x14]
                  |L43.30|
;;;1695         {
;;;1696            uint8 cr = (uint8)*pSrc++;
00001e  7837              LDRB     r7,[r6,#0]
;;;1697            int16 crR, crG;
;;;1698   
;;;1699            crR = (cr + ((cr * 103U) >> 8U)) - 179;
000020  2067              MOVS     r0,#0x67
000022  4378              MULS     r0,r7,r0
000024  0a00              LSRS     r0,r0,#8
000026  19c0              ADDS     r0,r0,r7
000028  38b3              SUBS     r0,r0,#0xb3
;;;1700            pDstR[0] = addAndClamp(pDstR[0], crR);
00002a  9000              STR      r0,[sp,#0]
00002c  7828              LDRB     r0,[r5,#0]
00002e  1cb6              ADDS     r6,r6,#2
000030  9900              LDR      r1,[sp,#0]
000032  f7fffffe          BL       addAndClamp
000036  7028              STRB     r0,[r5,#0]
;;;1701            pDstR[1] = addAndClamp(pDstR[1], crR);
000038  7868              LDRB     r0,[r5,#1]
00003a  9900              LDR      r1,[sp,#0]
00003c  f7fffffe          BL       addAndClamp
000040  7068              STRB     r0,[r5,#1]
;;;1702            
;;;1703            crG = ((cr * 183U) >> 8U) - 91;
000042  20b7              MOVS     r0,#0xb7
000044  4347              MULS     r7,r0,r7
000046  0a3f              LSRS     r7,r7,#8
;;;1704            pDstG[0] = subAndClamp(pDstG[0], crG);
000048  3f5b              SUBS     r7,r7,#0x5b
00004a  7820              LDRB     r0,[r4,#0]
00004c  4639              MOV      r1,r7
00004e  f7fffffe          BL       subAndClamp
000052  7020              STRB     r0,[r4,#0]
;;;1705            pDstG[1] = subAndClamp(pDstG[1], crG);
000054  7860              LDRB     r0,[r4,#1]
000056  4639              MOV      r1,r7
000058  f7fffffe          BL       subAndClamp
00005c  7060              STRB     r0,[r4,#1]
00005e  9805              LDR      r0,[sp,#0x14]         ;1694
000060  1ca4              ADDS     r4,r4,#2              ;1694
000062  1c40              ADDS     r0,r0,#1              ;1694
000064  b2c0              UXTB     r0,r0                 ;1694
000066  1cad              ADDS     r5,r5,#2              ;1694
000068  9005              STR      r0,[sp,#0x14]         ;1694
00006a  2804              CMP      r0,#4                 ;1694
00006c  d3d7              BCC      |L43.30|
00006e  9806              LDR      r0,[sp,#0x18]         ;1692
000070  3608              ADDS     r6,r6,#8              ;1692
000072  1c40              ADDS     r0,r0,#1              ;1692
000074  b2c0              UXTB     r0,r0                 ;1692
000076  9006              STR      r0,[sp,#0x18]         ;1692
000078  2808              CMP      r0,#8                 ;1692
00007a  d3ce              BCC      |L43.26|
;;;1706            
;;;1707            pDstR += 2;
;;;1708            pDstG += 2;
;;;1709         }
;;;1710   
;;;1711         pSrc = pSrc - 4 + 8;
;;;1712      }
;;;1713   }   
00007c  b009              ADD      sp,sp,#0x24
00007e  bdf0              POP      {r4-r7,pc}
;;;1714   /*----------------------------------------------------------------------------*/
                          ENDP

                  |L43.128|
                          DCD      ||.bss||

                          AREA ||i.upsampleCrV||, CODE, READONLY, ALIGN=2

                  upsampleCrV PROC
;;;1715   // Cr upsample and accumulate, 8x4 to 8x8
;;;1716   static void upsampleCrV(uint8 srcOfs, uint8 dstOfs)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1717   {
;;;1718      // Cr - affects R and G
;;;1719      uint8 x, y;
;;;1720      int16* pSrc = gCoeffBuf + srcOfs;
000002  4a20              LDR      r2,|L44.132|
000004  0040              LSLS     r0,r0,#1
000006  b089              SUB      sp,sp,#0x24           ;1717
000008  1880              ADDS     r0,r0,r2
;;;1721      uint8* pDstR = gMCUBufR + dstOfs;
00000a  9006              STR      r0,[sp,#0x18]
00000c  4610              MOV      r0,r2
00000e  3080              ADDS     r0,r0,#0x80
000010  1845              ADDS     r5,r0,r1
;;;1722      uint8* pDstG = gMCUBufG + dstOfs;
000012  30ff              ADDS     r0,r0,#0xff
000014  3001              ADDS     r0,#1
000016  1844              ADDS     r4,r0,r1
;;;1723      for (y = 0; y < 4; y++)
000018  2000              MOVS     r0,#0
00001a  9005              STR      r0,[sp,#0x14]
                  |L44.28|
;;;1724      {
;;;1725         for (x = 0; x < 8; x++)
00001c  2700              MOVS     r7,#0
                  |L44.30|
;;;1726         {
;;;1727            uint8 cr = (uint8)*pSrc++;
00001e  9806              LDR      r0,[sp,#0x18]
000020  7806              LDRB     r6,[r0,#0]
000022  1c80              ADDS     r0,r0,#2
;;;1728            int16 crR, crG;
;;;1729   
;;;1730            crR = (cr + ((cr * 103U) >> 8U)) - 179;
000024  9006              STR      r0,[sp,#0x18]
000026  2067              MOVS     r0,#0x67
000028  4370              MULS     r0,r6,r0
00002a  0a00              LSRS     r0,r0,#8
00002c  1980              ADDS     r0,r0,r6
00002e  38b3              SUBS     r0,r0,#0xb3
;;;1731            pDstR[0] = addAndClamp(pDstR[0], crR);
000030  9000              STR      r0,[sp,#0]
000032  7828              LDRB     r0,[r5,#0]
000034  9900              LDR      r1,[sp,#0]
000036  f7fffffe          BL       addAndClamp
00003a  7028              STRB     r0,[r5,#0]
;;;1732            pDstR[8] = addAndClamp(pDstR[8], crR);
00003c  7a28              LDRB     r0,[r5,#8]
00003e  9900              LDR      r1,[sp,#0]
000040  f7fffffe          BL       addAndClamp
000044  7228              STRB     r0,[r5,#8]
;;;1733   
;;;1734            crG = ((cr * 183U) >> 8U) - 91;
000046  20b7              MOVS     r0,#0xb7
000048  4346              MULS     r6,r0,r6
00004a  0a36              LSRS     r6,r6,#8
;;;1735            pDstG[0] = subAndClamp(pDstG[0], crG);
00004c  3e5b              SUBS     r6,r6,#0x5b
00004e  7820              LDRB     r0,[r4,#0]
000050  4631              MOV      r1,r6
000052  f7fffffe          BL       subAndClamp
000056  7020              STRB     r0,[r4,#0]
;;;1736            pDstG[8] = subAndClamp(pDstG[8], crG);
000058  7a20              LDRB     r0,[r4,#8]
00005a  4631              MOV      r1,r6
00005c  f7fffffe          BL       subAndClamp
000060  7220              STRB     r0,[r4,#8]
000062  1c7f              ADDS     r7,r7,#1
000064  b2ff              UXTB     r7,r7                 ;1725
000066  1c64              ADDS     r4,r4,#1              ;1725
000068  1c6d              ADDS     r5,r5,#1              ;1725
00006a  2f08              CMP      r7,#8                 ;1725
00006c  d3d7              BCC      |L44.30|
00006e  9805              LDR      r0,[sp,#0x14]         ;1723
000070  3408              ADDS     r4,r4,#8              ;1723
000072  1c40              ADDS     r0,r0,#1              ;1723
000074  b2c0              UXTB     r0,r0                 ;1723
000076  3508              ADDS     r5,r5,#8              ;1723
000078  9005              STR      r0,[sp,#0x14]         ;1723
00007a  2804              CMP      r0,#4                 ;1723
00007c  d3ce              BCC      |L44.28|
;;;1737   
;;;1738            ++pDstR;
;;;1739            ++pDstG;
;;;1740         }
;;;1741   
;;;1742         pDstR = pDstR - 8 + 16;
;;;1743         pDstG = pDstG - 8 + 16;
;;;1744      }
;;;1745   } 
00007e  b009              ADD      sp,sp,#0x24
000080  bdf0              POP      {r4-r7,pc}
;;;1746   /*----------------------------------------------------------------------------*/
                          ENDP

000082  0000              DCW      0x0000
                  |L44.132|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  gCoeffBuf
                          %        128
                  gMCUBufR
                          %        256
                  gMCUBufG
                          %        256
                  gMCUBufB
                          %        256
                  gQuant0
                          %        128
                  gQuant1
                          %        128
                  gHuffTab0
                          %        80
                  gHuffVal0
                          %        16
                  gHuffTab1
                          %        80
                  gHuffVal1
                          %        16
                  gHuffTab2
                          %        80
                  gHuffVal2
                          %        256
                  gHuffTab3
                          %        80
                  gHuffVal3
                          %        256
                  gInBuf
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  ZAG
000000  00010810          DCB      0x00,0x01,0x08,0x10
000004  0902030a          DCB      0x09,0x02,0x03,0x0a
000008  11182019          DCB      0x11,0x18,0x20,0x19
00000c  120b0405          DCB      0x12,0x0b,0x04,0x05
000010  0c131a21          DCB      0x0c,0x13,0x1a,0x21
000014  28302922          DCB      0x28,0x30,0x29,0x22
000018  1b140d06          DCB      0x1b,0x14,0x0d,0x06
00001c  070e151c          DCB      0x07,0x0e,0x15,0x1c
000020  232a3138          DCB      0x23,0x2a,0x31,0x38
000024  39322b24          DCB      0x39,0x32,0x2b,0x24
000028  1d160f17          DCB      0x1d,0x16,0x0f,0x17
00002c  1e252c33          DCB      0x1e,0x25,0x2c,0x33
000030  3a3b342d          DCB      0x3a,0x3b,0x34,0x2d
000034  261f272e          DCB      0x26,0x1f,0x27,0x2e
000038  353c3d36          DCB      0x35,0x3c,0x3d,0x36
00003c  2f373e3f          DCB      0x2f,0x37,0x3e,0x3f
                  gWinogradQuant
000040  80b2b2a7          DCB      0x80,0xb2,0xb2,0xa7
000044  f6a797e8          DCB      0xf6,0xa7,0x97,0xe8
000048  e89780d1          DCB      0xe8,0x97,0x80,0xd1
00004c  dbd18065          DCB      0xdb,0xd1,0x80,0x65
000050  b2c5c5b2          DCB      0xb2,0xc5,0xc5,0xb2
000054  65458ba7          DCB      0x65,0x45,0x8b,0xa7
000058  b1a78b45          DCB      0xb1,0xa7,0x8b,0x45
00005c  23608397          DCB      0x23,0x60,0x83,0x97
000060  97836023          DCB      0x97,0x83,0x60,0x23
000064  315b7680          DCB      0x31,0x5b,0x76,0x80
000068  765b312e          DCB      0x76,0x5b,0x31,0x2e
00006c  51656551          DCB      0x51,0x65,0x65,0x51
000070  2e2a454f          DCB      0x2e,0x2a,0x45,0x4f
000074  452a2336          DCB      0x45,0x2a,0x23,0x36
000078  36231c25          DCB      0x36,0x23,0x1c,0x25
00007c  1c13130a          DCB      0x1c,0x13,0x13,0x0a

                          AREA ||.data||, DATA, ALIGN=2

                  gValidHuffTables
000000  00                DCB      0x00
                  gValidQuantTables
000001  00                DCB      0x00
                  gTemFlag
000002  00                DCB      0x00
                  gInBufOfs
000003  00                DCB      0x00
                  gInBufLeft
000004  00                DCB      0x00
                  gBitsLeft
000005  00                DCB      0x00
                  gCompsInFrame
000006  00                DCB      0x00
                  gCompsInScan
000007  00                DCB      0x00
                  gScanType
000008  00                DCB      0x00
                  gMaxBlocksPerMCU
000009  00                DCB      0x00
                  gMaxMCUXSize
00000a  00                DCB      0x00
                  gMaxMCUYSize
00000b  00                DCB      0x00
                  gCallbackStatus
00000c  00                DCB      0x00
                  gReduce
00000d  00                DCB      0x00
                  gBitBuf
00000e  0000              DCB      0x00,0x00
                  gImageXSize
000010  0000              DCB      0x00,0x00
                  gImageYSize
000012  0000              DCB      0x00,0x00
                  gRestartInterval
000014  0000              DCB      0x00,0x00
                  gNextRestartNum
000016  0000              DCB      0x00,0x00
                  gRestartsLeft
000018  0000              DCB      0x00,0x00
                  gMaxMCUSPerRow
00001a  0000              DCB      0x00,0x00
                  gMaxMCUSPerCol
00001c  0000              DCB      0x00,0x00
                  gNumMCUSRemaining
00001e  0000              DCB      0x00,0x00
                  gCompIdent
000020  000000            DCB      0x00,0x00,0x00
                  gCompHSamp
000023  00                DCB      0x00
000024  0000              DCB      0x00,0x00
                  gCompVSamp
000026  0000              DCB      0x00,0x00
000028  00                DCB      0x00
                  gCompQuant
000029  000000            DCB      0x00,0x00,0x00
                  gCompList
00002c  000000            DCB      0x00,0x00,0x00
                  gCompDCTab
00002f  00                DCB      0x00
000030  0000              DCB      0x00,0x00
                  gCompACTab
000032  0000              DCB      0x00,0x00
000034  00000000          DCB      0x00,0x00,0x00,0x00
                  huffDecode_ctr
                          DCD      0x00000000
                  g_pNeedBytesCallback
                          DCD      0x00000000
                  g_pCallback_data
                          DCD      0x00000000
                  gLastDC
                          DCD      0x00000000
000048  0000              DCB      0x00,0x00
                  gMCUOrg
00004a  0000              DCB      0x00,0x00
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L234.16|
00000e  461d              MOV      r5,r3
                  |L234.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP

