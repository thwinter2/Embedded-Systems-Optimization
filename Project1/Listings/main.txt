; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\Include -I.\Source\Profiler -I.\Source\LCD -I.\Source\FS -I.\Source\ulibSD -I.\RTE\Device\MKL25Z128xxx4 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.15.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DMKL25Z128xxx4 --omf_browse=.\objects\main.crf Source\main.c]
                          THUMB

                          AREA ||i.DMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA_IRQHandler PROC
;;;156    
;;;157    void DMA_IRQHandler(void){
000000  480c              LDR      r0,|L1.52|
;;;158    	DMA0->DMA[0].DSR_BCR |= DMA_DSR_BCR_DONE_MASK;
000002  6882              LDR      r2,[r0,#8]
000004  2101              MOVS     r1,#1
000006  0609              LSLS     r1,r1,#24
000008  430a              ORRS     r2,r2,r1
00000a  6082              STR      r2,[r0,#8]
00000c  4a0a              LDR      r2,|L1.56|
00000e  7952              LDRB     r2,[r2,#5]
000010  6002              STR      r2,[r0,#0]
000012  4a0a              LDR      r2,|L1.60|
000014  6813              LDR      r3,[r2,#0]  ; DMA_Destination
000016  6043              STR      r3,[r0,#4]
000018  6852              LDR      r2,[r2,#4]  ; DMA_Count
00001a  0212              LSLS     r2,r2,#8
00001c  0a12              LSRS     r2,r2,#8
00001e  6082              STR      r2,[r0,#8]
000020  6882              LDR      r2,[r0,#8]
000022  438a              BICS     r2,r2,r1
000024  6082              STR      r2,[r0,#8]
000026  4806              LDR      r0,|L1.64|
000028  7801              LDRB     r1,[r0,#0]
00002a  2280              MOVS     r2,#0x80
00002c  4311              ORRS     r1,r1,r2
00002e  7001              STRB     r1,[r0,#0]
;;;159    	Start_DMA();
;;;160    }
000030  4770              BX       lr
;;;161    
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      0x40008100
                  |L1.56|
                          DCD      0x40077000
                  |L1.60|
                          DCD      ||.data||
                  |L1.64|
                          DCD      0x40021000

                          AREA ||i.Init_DMA||, CODE, READONLY, ALIGN=2

                  Init_DMA PROC
;;;122    
;;;123    void Init_DMA(uint32_t * destination, uint32_t count){
000000  4a10              LDR      r2,|L2.68|
;;;124    	DMA_Destination = destination;
;;;125    	DMA_Count = count;
;;;126    	
;;;127    	SIM->SCGC7 |= SIM_SCGC7_DMA_MASK;
000002  6051              STR      r1,[r2,#4]  ; DMA_Count
000004  6010              STR      r0,[r2,#0]  ; DMA_Destination
000006  4810              LDR      r0,|L2.72|
000008  6801              LDR      r1,[r0,#0]
00000a  1582              ASRS     r2,r0,#22
00000c  4311              ORRS     r1,r1,r2
00000e  6001              STR      r1,[r0,#0]
;;;128    	SIM->SCGC6 |= SIM_SCGC6_DMAMUX_MASK;
000010  480e              LDR      r0,|L2.76|
000012  6bc1              LDR      r1,[r0,#0x3c]
000014  2202              MOVS     r2,#2
000016  4311              ORRS     r1,r1,r2
000018  63c1              STR      r1,[r0,#0x3c]
;;;129    	
;;;130    	DMAMUX0->CHCFG[0] = 0;
00001a  480d              LDR      r0,|L2.80|
00001c  2100              MOVS     r1,#0
00001e  7001              STRB     r1,[r0,#0]
;;;131    	
;;;132    	DMA0->DMA[0].DCR = DMA_DCR_EINT_MASK | DMA_DCR_SINC_MASK | DMA_DCR_SSIZE(1) | DMA_DCR_DSIZE(1) | 
000020  4a0d              LDR      r2,|L2.88|
000022  490c              LDR      r1,|L2.84|
000024  60d1              STR      r1,[r2,#0xc]
000026  490d              LDR      r1,|L2.92|
000028  680a              LDR      r2,[r1,#0]
00002a  2380              MOVS     r3,#0x80
00002c  0a12              LSRS     r2,r2,#8
00002e  0212              LSLS     r2,r2,#8
000030  431a              ORRS     r2,r2,r3
000032  600a              STR      r2,[r1,#0]
000034  4a0a              LDR      r2,|L2.96|
000036  2101              MOVS     r1,#1
000038  6011              STR      r1,[r2,#0]
00003a  4a0a              LDR      r2,|L2.100|
00003c  6011              STR      r1,[r2,#0]
;;;133    	DMA_DCR_ERQ_MASK | DMA_DCR_CS_MASK;
;;;134    	
;;;135    	// Configure DMA ISR
;;;136    	NVIC_SetPriority(DMA0_IRQn, 2);
;;;137    	NVIC_ClearPendingIRQ(DMA0_IRQn);
;;;138    	NVIC_EnableIRQ(DMA0_IRQn);
;;;139    	
;;;140    	// Set DMA MUX channel to use SPI1 Transmit Complete as Trigger
;;;141    	DMAMUX0->CHCFG[0] = DMAMUX_CHCFG_SOURCE(18);
00003e  2112              MOVS     r1,#0x12
000040  7001              STRB     r1,[r0,#0]
;;;142    	
;;;143    }
000042  4770              BX       lr
;;;144    
                          ENDP

                  |L2.68|
                          DCD      ||.data||
                  |L2.72|
                          DCD      0x40048040
                  |L2.76|
                          DCD      0x40048000
                  |L2.80|
                          DCD      0x40021000
                  |L2.84|
                          DCD      0xe0520000
                  |L2.88|
                          DCD      0x40008100
                  |L2.92|
                          DCD      0xe000e400
                  |L2.96|
                          DCD      0xe000e280
                  |L2.100|
                          DCD      0xe000e100

                          AREA ||i.Start_DMA||, CODE, READONLY, ALIGN=2

                  Start_DMA PROC
;;;144    
;;;145    void Start_DMA(void){
000000  480a              LDR      r0,|L3.44|
;;;146    	// Initialize Source/Dest Pointers
;;;147    	DMA0->DMA[0].SAR = DMA_SAR_SAR((uint32_t) (SPI1_D));
000002  7941              LDRB     r1,[r0,#5]
000004  480a              LDR      r0,|L3.48|
000006  6001              STR      r1,[r0,#0]
;;;148    	DMA0->DMA[0].DAR = DMA_DAR_DAR((uint32_t) DMA_Destination);
000008  490a              LDR      r1,|L3.52|
00000a  680a              LDR      r2,[r1,#0]  ; DMA_Destination
00000c  6042              STR      r2,[r0,#4]
;;;149    	// byte count
;;;150    	DMA0->DMA[0].DSR_BCR = DMA_DSR_BCR_BCR(DMA_Count);
00000e  6849              LDR      r1,[r1,#4]  ; DMA_Count
000010  0209              LSLS     r1,r1,#8
000012  0a09              LSRS     r1,r1,#8
000014  6081              STR      r1,[r0,#8]
;;;151    	// clear done flag
;;;152    	DMA0->DMA[0].DSR_BCR &= ~DMA_DSR_BCR_DONE_MASK;
000016  6881              LDR      r1,[r0,#8]
000018  2201              MOVS     r2,#1
00001a  0612              LSLS     r2,r2,#24
00001c  4391              BICS     r1,r1,r2
00001e  6081              STR      r1,[r0,#8]
;;;153    	// set enable flag
;;;154    	DMAMUX0->CHCFG[0] |= DMAMUX_CHCFG_ENBL_MASK;
000020  4805              LDR      r0,|L3.56|
000022  7801              LDRB     r1,[r0,#0]
000024  2280              MOVS     r2,#0x80
000026  4311              ORRS     r1,r1,r2
000028  7001              STRB     r1,[r0,#0]
;;;155    }
00002a  4770              BX       lr
;;;156    
                          ENDP

                  |L3.44|
                          DCD      0x40077000
                  |L3.48|
                          DCD      0x40008100
                  |L3.52|
                          DCD      ||.data||
                  |L3.56|
                          DCD      0x40021000

                          AREA ||i.die||, CODE, READONLY, ALIGN=1

                  ||die|| PROC
;;;28     
;;;29     void die(												/* Stop with dying message */
000000  2200              MOVS     r2,#0
;;;30     					FRESULT rc						/* FatFs return value */
;;;31     		) {
;;;32     //  printf("Failed with rc=%u.\n", rc);
;;;33     	Control_RGB_LEDs(1, 0, 0);
000002  4611              MOV      r1,r2
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       Control_RGB_LEDs
                  |L4.10|
;;;34     	for (;;);
00000a  e7fe              B        |L4.10|
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  main PROC
;;;164     *----------------------------------------------------------------------------*/
;;;165    int main(void) {
000000  b092              SUB      sp,sp,#0x48
;;;166    	FATFS fatfs;
;;;167    	FRESULT rc;
;;;168    	int error;
;;;169    	PT_T p;
;;;170    	char buf[16];
;;;171    	
;;;172    	Init_RGB_LEDs();
000002  f7fffffe          BL       Init_RGB_LEDs
;;;173    	Init_DMA(DMA_Destination_Buffer,512);
000006  2101              MOVS     r1,#1
000008  0249              LSLS     r1,r1,#9
00000a  482b              LDR      r0,|L5.184|
00000c  f7fffffe          BL       Init_DMA
;;;174    
;;;175    #ifdef PROFILER_SERIAL_SUPPORT
;;;176    	Init_UART0(115200);
;;;177    	printf("Hello 2019!\n\r");
;;;178    #endif
;;;179    #if DEBUG_ENABLE
;;;180    	Init_Debug_Signals();
000010  f7fffffe          BL       Init_Debug_Signals
;;;181    #endif
;;;182    
;;;183    #ifdef PROFILER_LCD_SUPPORT
;;;184    	LCD_Init();
000014  f7fffffe          BL       LCD_Init
;;;185    	LCD_Text_Init(1);
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       LCD_Text_Init
;;;186    	LCD_Erase();
00001e  f7fffffe          BL       LCD_Erase
;;;187    
;;;188    	LCD_Text_PrintStr_RC(0, 0, "Initializing");
000022  2100              MOVS     r1,#0
000024  a225              ADR      r2,|L5.188|
000026  4608              MOV      r0,r1
000028  f7fffffe          BL       LCD_Text_PrintStr_RC
;;;189    #endif
;;;190    
;;;191    	LCD_Text_PrintStr_RC(1, 0, "Looking for uSD card");
00002c  a227              ADR      r2,|L5.204|
00002e  2100              MOVS     r1,#0
000030  2001              MOVS     r0,#1
000032  f7fffffe          BL       LCD_Text_PrintStr_RC
;;;192    	rc = pf_mount(&fatfs);
000036  4668              MOV      r0,sp
000038  f7fffffe          BL       pf_mount
;;;193    	if (rc) {
00003c  2800              CMP      r0,#0
00003e  d00a              BEQ      |L5.86|
;;;194    		LCD_Text_PrintStr_RC(2, 0, "pf_mount failed");
000040  a228              ADR      r2,|L5.228|
000042  2100              MOVS     r1,#0
000044  2002              MOVS     r0,#2
000046  f7fffffe          BL       LCD_Text_PrintStr_RC
;;;195    		Control_RGB_LEDs(1, 0, 0);
00004a  2200              MOVS     r2,#0
00004c  4611              MOV      r1,r2
00004e  2001              MOVS     r0,#1
000050  f7fffffe          BL       Control_RGB_LEDs
                  |L5.84|
;;;196    		while (1);
000054  e7fe              B        |L5.84|
                  |L5.86|
;;;197    	}
;;;198    	LCD_Text_PrintStr_RC(2, 0, "Mounted uSD card");
000056  a227              ADR      r2,|L5.244|
000058  2100              MOVS     r1,#0
00005a  2002              MOVS     r0,#2
00005c  f7fffffe          BL       LCD_Text_PrintStr_RC
000060  2700              MOVS     r7,#0
000062  2601              MOVS     r6,#1                 ;185
;;;199    
;;;200    
;;;201    	while (1) {
;;;202    		Init_Profiling();
;;;203    		LCD_Erase();
;;;204    		Control_RGB_LEDs(1, 0, 1);	// Magenta: running
;;;205    		profiling_enabled = 1;
000064  4d28              LDR      r5,|L5.264|
                  |L5.102|
000066  f7fffffe          BL       Init_Profiling
00006a  f7fffffe          BL       LCD_Erase
00006e  2201              MOVS     r2,#1                 ;204
000070  2100              MOVS     r1,#0                 ;204
000072  4610              MOV      r0,r2                 ;204
000074  f7fffffe          BL       Control_RGB_LEDs
000078  702e              STRB     r6,[r5,#0]
;;;206    		error = LCD_JPEG();
00007a  f7fffffe          BL       LCD_JPEG
00007e  4604              MOV      r4,r0
;;;207    		profiling_enabled = 0;
000080  702f              STRB     r7,[r5,#0]
;;;208    		Control_RGB_LEDs(error, 1-error, 0);	// Green: ok. Red: bad.
000082  1b31              SUBS     r1,r6,r4
000084  2200              MOVS     r2,#0
000086  f7fffffe          BL       Control_RGB_LEDs
;;;209    		if (error != 0) {
00008a  2c00              CMP      r4,#0
00008c  d00a              BEQ      |L5.164|
;;;210    			sprintf(buf, "LCD_JPEG failure %d", error);
00008e  4622              MOV      r2,r4
000090  a11e              ADR      r1,|L5.268|
000092  a80c              ADD      r0,sp,#0x30
000094  f7fffffe          BL       __2sprintf
;;;211    			LCD_Text_PrintStr_RC(0, 0, buf); 
000098  2100              MOVS     r1,#0
00009a  aa0c              ADD      r2,sp,#0x30
00009c  4608              MOV      r0,r1
00009e  f7fffffe          BL       LCD_Text_PrintStr_RC
                  |L5.162|
;;;212    			while (1)
0000a2  e7fe              B        |L5.162|
                  |L5.164|
;;;213    				;
;;;214    		}
;;;215    		Sort_Profile_Regions();
0000a4  f7fffffe          BL       Sort_Profile_Regions
;;;216    		LCD_TS_Blocking_Read(&p);		// Wait for user to press screen
0000a8  a810              ADD      r0,sp,#0x40
0000aa  f7fffffe          BL       LCD_TS_Blocking_Read
;;;217    		LCD_Erase();
0000ae  f7fffffe          BL       LCD_Erase
;;;218    		Display_Profile();
0000b2  f7fffffe          BL       Display_Profile
0000b6  e7d6              B        |L5.102|
;;;219    	}
;;;220    }
                          ENDP

                  |L5.184|
                          DCD      ||.bss||
                  |L5.188|
0000bc  496e6974          DCB      "Initializing",0
0000c0  69616c69
0000c4  7a696e67
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L5.204|
0000cc  4c6f6f6b          DCB      "Looking for uSD card",0
0000d0  696e6720
0000d4  666f7220
0000d8  75534420
0000dc  63617264
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L5.228|
0000e4  70665f6d          DCB      "pf_mount failed",0
0000e8  6f756e74
0000ec  20666169
0000f0  6c656400
                  |L5.244|
0000f4  4d6f756e          DCB      "Mounted uSD card",0
0000f8  74656420
0000fc  75534420
000100  63617264
000104  00      
000105  00                DCB      0
000106  00                DCB      0
000107  00                DCB      0
                  |L5.264|
                          DCD      profiling_enabled
                  |L5.268|
00010c  4c43445f          DCB      "LCD_JPEG failure %d",0
000110  4a504547
000114  20666169
000118  6c757265
00011c  20256400

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  DMA_Destination_Buffer
                          %        2048

                          AREA ||.data||, DATA, ALIGN=2

                  DMA_Destination
                          DCD      0x00000000
                  DMA_Count
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Source\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_9c3e1791____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_9c3e1791____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_9c3e1791____REVSH|
#line 462
|__asm___6_main_c_9c3e1791____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
