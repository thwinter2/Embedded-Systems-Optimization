; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\timers.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\timers.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\Include -I.\Source\Profiler -I.\Source\LCD -I.\Source\FS -I.\Source\ulibSD -I.\RTE\Device\MKL25Z128xxx4 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.15.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DMKL25Z128xxx4 --omf_browse=.\objects\timers.crf --remarks Source\timers.c]
                          THUMB

                          AREA ||i.Configure_TPM0_for_DMA||, CODE, READONLY, ALIGN=2

                  Configure_TPM0_for_DMA PROC
;;;51     
;;;52     void Configure_TPM0_for_DMA(uint32_t period_us)
000000  4904              LDR      r1,|L1.20|
;;;53     {
;;;54     
;;;55     	// disable TPM
;;;56     	TPM0->SC = 0;
000002  2200              MOVS     r2,#0
000004  600a              STR      r2,[r1,#0]
;;;57     	
;;;58     	//load the counter and mod
;;;59     	TPM0->MOD = TPM_MOD_MOD(period_us*48);
000006  2230              MOVS     r2,#0x30
000008  4350              MULS     r0,r2,r0
00000a  b280              UXTH     r0,r0
00000c  6088              STR      r0,[r1,#8]
;;;60     
;;;61     	//set TPM to count up and divide by 1 prescaler and clock mode
;;;62     	TPM0->SC = (TPM_SC_DMA_MASK | TPM_SC_PS(0));
00000e  1588              ASRS     r0,r1,#22
000010  6008              STR      r0,[r1,#0]
;;;63     	
;;;64     #if 0 // if using interrupt for debugging
;;;65     	// Enable TPM interrupts for debugging
;;;66     	TPM0->SC |= TPM_SC_TOIE_MASK;
;;;67     
;;;68     	// Configure NVIC 
;;;69     	NVIC_SetPriority(TPM0_IRQn, 128); // 0, 64, 128 or 192
;;;70     	NVIC_ClearPendingIRQ(TPM0_IRQn); 
;;;71     	NVIC_EnableIRQ(TPM0_IRQn);	
;;;72     #endif
;;;73     
;;;74     }
000012  4770              BX       lr
;;;75     
                          ENDP

                  |L1.20|
                          DCD      0x40038000

                          AREA ||i.PWM_Init||, CODE, READONLY, ALIGN=2

                  PWM_Init PROC
;;;3      
;;;4      void PWM_Init(TPM_Type * TPM, uint8_t channel_num, uint16_t period, uint16_t duty)
000000  b470              PUSH     {r4-r6}
;;;5      {
;;;6      		//turn on clock to TPM 
;;;7      		switch ((int) TPM) {
000002  4c16              LDR      r4,|L2.92|
000004  1906              ADDS     r6,r0,r4
;;;8      			case (int) TPM0:
;;;9      				SIM->SCGC6 |= SIM_SCGC6_TPM0_MASK;
000006  4c16              LDR      r4,|L2.96|
000008  d01c              BEQ      |L2.68|
00000a  2501              MOVS     r5,#1                 ;7
00000c  032d              LSLS     r5,r5,#12             ;7
00000e  1b76              SUBS     r6,r6,r5              ;7
000010  d01e              BEQ      |L2.80|
000012  42ae              CMP      r6,r5                 ;7
000014  d103              BNE      |L2.30|
;;;10     				break;
;;;11     			case (int) TPM1:
;;;12     				SIM->SCGC6 |= SIM_SCGC6_TPM1_MASK;
;;;13     				break;
;;;14     			case (int) TPM2:
;;;15     				SIM->SCGC6 |= SIM_SCGC6_TPM2_MASK;
000016  6be5              LDR      r5,[r4,#0x3c]
000018  03b6              LSLS     r6,r6,#14
00001a  4335              ORRS     r5,r5,r6
00001c  63e5              STR      r5,[r4,#0x3c]
                  |L2.30|
;;;16     				break;
;;;17     			default:
;;;18     				break;
;;;19     		}
;;;20     		//set clock source for tpm
;;;21     		SIM->SOPT2 |= (SIM_SOPT2_TPMSRC(1) | SIM_SOPT2_PLLFLLSEL_MASK);
00001e  6865              LDR      r5,[r4,#4]
000020  4e10              LDR      r6,|L2.100|
000022  4335              ORRS     r5,r5,r6
000024  6065              STR      r5,[r4,#4]
;;;22     
;;;23     		//load the counter and mod
;;;24     		TPM->MOD = period;
000026  6082              STR      r2,[r0,#8]
;;;25     			
;;;26     		//set channels to center-aligned high-true PWM
;;;27     		TPM->CONTROLS[channel_num].CnSC = TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK;
000028  2228              MOVS     r2,#0x28
00002a  00c9              LSLS     r1,r1,#3
00002c  1809              ADDS     r1,r1,r0
00002e  60ca              STR      r2,[r1,#0xc]
;;;28     
;;;29     		//set TPM to up-down and divide by 8 prescaler and clock mode
;;;30     		TPM->SC = (TPM_SC_CPWMS_MASK | TPM_SC_CMOD(1) | TPM_SC_PS(3));
000030  222b              MOVS     r2,#0x2b
000032  6002              STR      r2,[r0,#0]
000034  3080              ADDS     r0,r0,#0x80
;;;31     		
;;;32     		//set trigger mode, keep running when in debug 
;;;33     		TPM->CONF |= TPM_CONF_TRGSEL(0xA) | TPM_CONF_DBGMODE(3);
000036  6842              LDR      r2,[r0,#4]
000038  4c0b              LDR      r4,|L2.104|
00003a  4322              ORRS     r2,r2,r4
00003c  6042              STR      r2,[r0,#4]
;;;34     
;;;35     		// Set initial duty cycle
;;;36     		TPM->CONTROLS[channel_num].CnV = duty;
00003e  610b              STR      r3,[r1,#0x10]
;;;37     }
000040  bc70              POP      {r4-r6}
000042  4770              BX       lr
                  |L2.68|
000044  6be5              LDR      r5,[r4,#0x3c]         ;9
000046  2601              MOVS     r6,#1                 ;9
000048  0636              LSLS     r6,r6,#24             ;9
00004a  4335              ORRS     r5,r5,r6              ;9
00004c  63e5              STR      r5,[r4,#0x3c]         ;9
00004e  e7e6              B        |L2.30|
                  |L2.80|
000050  6be5              LDR      r5,[r4,#0x3c]         ;12
000052  2601              MOVS     r6,#1                 ;12
000054  0676              LSLS     r6,r6,#25             ;12
000056  4335              ORRS     r5,r5,r6              ;12
000058  63e5              STR      r5,[r4,#0x3c]         ;12
00005a  e7e0              B        |L2.30|
;;;38     
                          ENDP

                  |L2.92|
                          DCD      0xbffc8000
                  |L2.96|
                          DCD      0x40048000
                  |L2.100|
                          DCD      0x01010000
                  |L2.104|
                          DCD      0x0a0000c0

                          AREA ||i.PWM_Set_Value||, CODE, READONLY, ALIGN=1

                  PWM_Set_Value PROC
;;;38     
;;;39     void PWM_Set_Value(TPM_Type * TPM, uint8_t channel_num, uint16_t value) {
000000  00c9              LSLS     r1,r1,#3
;;;40     	TPM->CONTROLS[channel_num].CnV = value;
000002  1808              ADDS     r0,r1,r0
000004  6102              STR      r2,[r0,#0x10]
;;;41     }
000006  4770              BX       lr
;;;42     
                          ENDP


                          AREA ||i.TPM0_IRQHandler||, CODE, READONLY, ALIGN=2

                  TPM0_IRQHandler PROC
;;;82     
;;;83     void TPM0_IRQHandler() {
000000  4802              LDR      r0,|L4.12|
;;;84     	//clear pending IRQ flag
;;;85     	TPM0->SC |= TPM_SC_TOF_MASK; 
000002  6801              LDR      r1,[r0,#0]
000004  2280              MOVS     r2,#0x80
000006  4311              ORRS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;86     }
00000a  4770              BX       lr
                          ENDP

                  |L4.12|
                          DCD      0x40038000

                          AREA ||i.TPM0_Init||, CODE, READONLY, ALIGN=2

                  TPM0_Init PROC
;;;43     
;;;44     void TPM0_Init(void) {
000000  4805              LDR      r0,|L5.24|
;;;45     	//turn on clock to TPM 
;;;46     	SIM->SCGC6 |= SIM_SCGC6_TPM0_MASK;
000002  6bc1              LDR      r1,[r0,#0x3c]
000004  2201              MOVS     r2,#1
000006  0612              LSLS     r2,r2,#24
000008  4311              ORRS     r1,r1,r2
00000a  63c1              STR      r1,[r0,#0x3c]
;;;47     	
;;;48     	//set clock source for tpm
;;;49     	SIM->SOPT2 |= (SIM_SOPT2_TPMSRC(1) | SIM_SOPT2_PLLFLLSEL_MASK);
00000c  6841              LDR      r1,[r0,#4]
00000e  4a03              LDR      r2,|L5.28|
000010  4311              ORRS     r1,r1,r2
000012  6041              STR      r1,[r0,#4]
;;;50     }
000014  4770              BX       lr
;;;51     
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      0x40048000
                  |L5.28|
                          DCD      0x01010000

                          AREA ||i.TPM0_Start||, CODE, READONLY, ALIGN=2

                  TPM0_Start PROC
;;;75     
;;;76     void TPM0_Start(void) {
000000  4802              LDR      r0,|L6.12|
;;;77     // Enable counter
;;;78     	TPM0->SC |= TPM_SC_CMOD(1);
000002  6801              LDR      r1,[r0,#0]
000004  2208              MOVS     r2,#8
000006  4311              ORRS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;79     }
00000a  4770              BX       lr
;;;80     
                          ENDP

                  |L6.12|
                          DCD      0x40038000

;*** Start embedded assembler ***

#line 1 "Source\\timers.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_timers_c_PWM_Init____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_timers_c_PWM_Init____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_timers_c_PWM_Init____REVSH|
#line 462
|__asm___8_timers_c_PWM_Init____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
