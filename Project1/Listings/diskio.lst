L 1 "Source\FS\diskio.c"
N/*-----------------------------------------------------------------------*/
N/* Low level disk I/O module skeleton for Petit FatFs (C)ChaN, 2014      */
N/*-----------------------------------------------------------------------*/
N
N#include "diskio.h"
L 1 "Source\FS\diskio.h" 1
N/*-----------------------------------------------------------------------
N/  PFF - Low level disk interface modlue include file    (C)ChaN, 2014
N/-----------------------------------------------------------------------*/
N
N#ifndef _DISKIO_DEFINED
N#define _DISKIO_DEFINED
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "pff.h"
L 1 "Source\FS\pff.h" 1
N/*---------------------------------------------------------------------------/
N/  Petit FatFs - FAT file system module include file  R0.03a
N/----------------------------------------------------------------------------/
N/ Petit FatFs module is an open source software to implement FAT file system to
N/ small embedded systems. This is a free software and is opened for education,
N/ research and commercial developments under license policy of following trems.
N/
N/  Copyright (C) 2019, ChaN, all right reserved.
N/
N/ * The Petit FatFs module is a free software and there is NO WARRANTY.
N/ * No restriction on use. You can use, modify and redistribute it for
N/   personal, non-profit or commercial use UNDER YOUR RESPONSIBILITY.
N/ * Redistributions of source code must retain the above copyright notice.
N/
N/----------------------------------------------------------------------------*/
N
N#ifndef PF_DEFINED
N#define PF_DEFINED	8088	/* Revision ID */
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "pffconf.h"
L 1 "Source\FS\pffconf.h" 1
N/*---------------------------------------------------------------------------/
N/  Petit FatFs - Configuration file
N/---------------------------------------------------------------------------*/
N
N#ifndef PFCONF_DEF
N#define PFCONF_DEF 8088	/* Revision ID */
N
N/*---------------------------------------------------------------------------/
N/ Function Configurations (0:Disable, 1:Enable)
N/---------------------------------------------------------------------------*/
N
N#define	PF_USE_READ		1	/* pf_read() function */
N#define	PF_USE_DIR		1	/* pf_opendir() and pf_readdir() function */
N#define	PF_USE_LSEEK	1	/* pf_lseek() function */
N#define	PF_USE_WRITE	0	/* pf_write() function */
N
N#define PF_FS_FAT12		0	/* FAT12 */
N#define PF_FS_FAT16		0	/* FAT16 */
N#define PF_FS_FAT32		1	/* FAT32 */
N
N
N/*---------------------------------------------------------------------------/
N/ Locale and Namespace Configurations
N/---------------------------------------------------------------------------*/
N
N#define PF_USE_LCC		1	/* Allow lower case ASCII and non-ASCII chars */
N
N#define	PF_CODE_PAGE	437
N/* The PF_CODE_PAGE specifies the code page to be used on the target system.
N/  SBCS code pages with PF_USE_LCC == 1 requiers a 128 byte of case conversion
N/  table. It might occupy RAM on some platforms, e.g. avr-gcc.
N/  When PF_USE_LCC == 0, PF_CODE_PAGE has no effect.
N/
N/   437 - U.S.
N/   720 - Arabic
N/   737 - Greek
N/   771 - KBL
N/   775 - Baltic
N/   850 - Latin 1
N/   852 - Latin 2
N/   855 - Cyrillic
N/   857 - Turkish
N/   860 - Portuguese
N/   861 - Icelandic
N/   862 - Hebrew
N/   863 - Canadian French
N/   864 - Arabic
N/   865 - Nordic
N/   866 - Russian
N/   869 - Greek 2
N/   932 - Japanese (DBCS)
N/   936 - Simplified Chinese (DBCS)
N/   949 - Korean (DBCS)
N/   950 - Traditional Chinese (DBCS)
N*/
N
N
N#endif /* PF_CONF */
L 25 "Source\FS\pff.h" 2
N
N#if PF_DEFINED != PFCONF_DEF
X#if 8088 != 8088
S#error Wrong configuration file (pffconf.h).
N#endif
N
N
N/* Integer types used for FatFs API */
N	
N	// AD: change start
N#include "integer.h"
L 1 "Source\FS\integer.h" 1
N/*
N *  File: integer.h
N *  Author: Nelson Lombardo
N *  Year: 2015
N *  e-mail: nelson.lombardo@gmail.com
N *  License at the end of file.
N */
N 
N/*****************************************************************************/
N/* Integer type definitions                                                  */
N/*****************************************************************************/
N#ifndef _INTEGER_H_
N#define _INTEGER_H_
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060019
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 16 "Source\FS\integer.h" 2
N
N/* 16-bit, 32-bit or larger integer */
Ntypedef int16_t         INT;
Ntypedef uint16_t        UINT;
N
N/* 8-bit integer */
Ntypedef int8_t          CHAR;
Ntypedef uint8_t         UCHAR;
Ntypedef uint8_t         BYTE;
Ntypedef uint8_t         BOOL;
N
N/* 16-bit integer */
Ntypedef int16_t         SHORT;
Ntypedef uint16_t        USHORT;
Ntypedef uint16_t        WORD;
Ntypedef uint16_t        WCHAR;
N
N/* 32-bit integer */
Ntypedef int32_t         LONG;
Ntypedef uint32_t        ULONG;
Ntypedef uint32_t        DWORD;
N
N/* Boolean type */
Ntypedef enum { FALSE = 0, TRUE } BOOLEAN;
Ntypedef enum { LOW = 0, HIGH } THROTTLE;
N
N#endif
N
N// «integer.h» is part of:
N/*----------------------------------------------------------------------------/
N/  ulibSD - Library for SD cards semantics            (C)Nelson Lombardo, 2015
N/-----------------------------------------------------------------------------/
N/ ulibSD library is a free software that opened under license policy of
N/ following conditions.
N/
N/ Copyright (C) 2015, ChaN, all right reserved.
N/
N/ 1. Redistributions of source code must retain the above copyright notice,
N/    this condition and the following disclaimer.
N/
N/ This software is provided by the copyright holder and contributors "AS IS"
N/ and any warranties related to this software are DISCLAIMED.
N/ The copyright owner or contributors be NOT LIABLE for any damages caused
N/ by use of this software.
N/----------------------------------------------------------------------------*/
N
N// Derived from Mister Chan works on FatFs code (http://elm-chan.org/fsw/ff/00index_e.html):
N/*----------------------------------------------------------------------------/
N/  FatFs - FAT file system module  R0.11                 (C)ChaN, 2015
N/-----------------------------------------------------------------------------/
N/ FatFs module is a free software that opened under license policy of
N/ following conditions.
N/
N/ Copyright (C) 2015, ChaN, all right reserved.
N/
N/ 1. Redistributions of source code must retain the above copyright notice,
N/    this condition and the following disclaimer.
N/
N/ This software is provided by the copyright holder and contributors "AS IS"
N/ and any warranties related to this software are DISCLAIMED.
N/ The copyright owner or contributors be NOT LIABLE for any damages caused
N/ by use of this software.
N/----------------------------------------------------------------------------*/
L 35 "Source\FS\pff.h" 2
N	
N//#if defined(_WIN32)	/* Main development platform */
N//#include <windows.h>
N//#elif (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || defined(__cplusplus)	/* C99 or later */
N//#include <stdint.h>
N//typedef unsigned int	UINT;	/* int must be 16-bit or 32-bit */
N//typedef unsigned char	BYTE;	/* char must be 8-bit */
N//typedef uint16_t		WORD;	/* 16-bit unsigned integer */
N//typedef uint16_t		WCHAR;	/* 16-bit unsigned integer */
N//typedef uint32_t		DWORD;	/* 32-bit unsigned integer */
N//#else  	/* Earlier than C99 */
N//typedef unsigned int	UINT;	/* int must be 16-bit or 32-bit */
N//typedef unsigned char	BYTE;	/* char must be 8-bit */
N//typedef unsigned short	WORD;	/* 16-bit unsigned integer */
N//typedef unsigned short	WCHAR;	/* 16-bit unsigned integer */
N//typedef unsigned long	DWORD;	/* 32-bit unsigned integer */
N//#endif
N//#define PF_INTDEF 1
N
N// AD: change end
N
N#if PF_FS_FAT32
X#if 1
N#define	CLUST	DWORD
N#else
S#define	CLUST	WORD
N#endif
N
N
N/* File system object structure */
N
Ntypedef struct {
N	BYTE	fs_type;	/* FAT sub type */
N	BYTE	flag;		/* File status flags */
N	BYTE	csize;		/* Number of sectors per cluster */
N	BYTE	pad1;
N	WORD	n_rootdir;	/* Number of root directory entries (0 on FAT32) */
N	CLUST	n_fatent;	/* Number of FAT entries (= number of clusters + 2) */
X	DWORD	n_fatent;	 
N	DWORD	fatbase;	/* FAT start sector */
N	DWORD	dirbase;	/* Root directory start sector (Cluster# on FAT32) */
N	DWORD	database;	/* Data start sector */
N	DWORD	fptr;		/* File R/W pointer */
N	DWORD	fsize;		/* File size */
N	CLUST	org_clust;	/* File start cluster */
X	DWORD	org_clust;	 
N	CLUST	curr_clust;	/* File current cluster */
X	DWORD	curr_clust;	 
N	DWORD	dsect;		/* File current data sector */
N} FATFS;
N
N
N
N/* Directory object structure */
N
Ntypedef struct {
N	WORD	index;		/* Current read/write index number */
N	BYTE*	fn;			/* Pointer to the SFN (in/out) {file[8],ext[3],status[1]} */
N	CLUST	sclust;		/* Table start cluster (0:Static table) */
X	DWORD	sclust;		 
N	CLUST	clust;		/* Current cluster */
X	DWORD	clust;		 
N	DWORD	sect;		/* Current sector */
N} DIR;
N
N
N
N/* File status structure */
N
Ntypedef struct {
N	DWORD	fsize;		/* File size */
N	WORD	fdate;		/* Last modified date */
N	WORD	ftime;		/* Last modified time */
N	BYTE	fattrib;	/* Attribute */
N	char	fname[13];	/* File name */
N} FILINFO;
N
N
N
N/* File function return code (FRESULT) */
N
Ntypedef enum {
N	FR_OK = 0,			/* 0 */
N	FR_DISK_ERR,		/* 1 */
N	FR_NOT_READY,		/* 2 */
N	FR_NO_FILE,			/* 3 */
N	FR_NOT_OPENED,		/* 4 */
N	FR_NOT_ENABLED,		/* 5 */
N	FR_NO_FILESYSTEM	/* 6 */
N} FRESULT;
N
N
N
N/*--------------------------------------------------------------*/
N/* Petit FatFs module application interface                     */
N
NFRESULT pf_mount (FATFS* fs);								/* Mount/Unmount a logical drive */
NFRESULT pf_open (const char* path);							/* Open a file */
NFRESULT pf_read (void* buff, UINT btr, UINT* br);			/* Read data from the open file */
NFRESULT pf_write (const void* buff, UINT btw, UINT* bw);	/* Write data to the open file */
NFRESULT pf_lseek (DWORD ofs);								/* Move file pointer of the open file */
NFRESULT pf_opendir (DIR* dj, const char* path);				/* Open a directory */
NFRESULT pf_readdir (DIR* dj, FILINFO* fno);					/* Read a directory item from the open directory */
N
N
N
N/*--------------------------------------------------------------*/
N/* Flags and offset address                                     */
N
N
N/* File status flag (FATFS.flag) */
N#define	FA_OPENED	0x01
N#define	FA_WPRT		0x02
N#define	FA__WIP		0x40
N
N
N/* FAT sub type (FATFS.fs_type) */
N#define FS_FAT12	1
N#define FS_FAT16	2
N#define FS_FAT32	3
N
N
N/* File attribute bits for directory entry */
N
N#define	AM_RDO	0x01	/* Read only */
N#define	AM_HID	0x02	/* Hidden */
N#define	AM_SYS	0x04	/* System */
N#define	AM_VOL	0x08	/* Volume label */
N#define AM_LFN	0x0F	/* LFN entry */
N#define AM_DIR	0x10	/* Directory */
N#define AM_ARC	0x20	/* Archive */
N#define AM_MASK	0x3F	/* Mask of defined bits */
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* _PFATFS */
L 13 "Source\FS\diskio.h" 2
N
N
N/* Status of Disk Functions */
Ntypedef BYTE	DSTATUS;
N
N
N/* Results of Disk Functions */
Ntypedef enum {
N	RES_OK = 0,		/* 0: Function succeeded */
N	RES_ERROR,		/* 1: Disk error */
N	RES_NOTRDY,		/* 2: Not ready */
N	RES_PARERR		/* 3: Invalid parameter */
N} DRESULT;
N
N
N/*---------------------------------------*/
N/* Prototypes for disk control functions */
N
NDSTATUS disk_initialize (void);
NDRESULT disk_readp (BYTE* buff, DWORD sector, UINT offser, UINT count);
NDRESULT disk_writep (const BYTE* buff, DWORD sc);
N
N#define STA_NOINIT		0x01	/* Drive not initialized */
N#define STA_NODISK		0x02	/* No medium in the drive */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif	/* _DISKIO_DEFINED */
L 6 "Source\FS\diskio.c" 2
N#include "sd_io.h"
L 1 ".\Source\ulibSD\sd_io.h" 1
N/*
N *  File: sd_io.h
N *  Author: Nelson Lombardo
N *  Year: 2015
N *  e-mail: nelson.lombardo@gmail.com
N *  License at the end of file.
N */
N
N// Modified 2017 by Alex Dean (agdean@ncsu.edu) for teaching FSMs
N	
N
N#ifndef _SD_IO_H_
N#define _SD_IO_H_
N
N/*****************************************************************************/
N/* Configurations                                                            */
N/*****************************************************************************/
N#define SD_IO_WRITE
N#define SD_IO_WRITE_TIMEOUT_WAIT 250
N
N// #define SD_IO_DBG_COUNT
N/*****************************************************************************/
N
N#include "spi_io.h" /* Provide the low-level functions */
L 1 ".\Source\ulibSD\spi_io.h" 1
N/*
N *  spi_io.h
N *  Author: Nelson Lombardo (C) 2015
N *  e-mail: nelson.lombardo@gmail.com
N *  License at the end of file.
N */
N // Modified 2017 by Alex Dean (agdean@ncsu.edu) for teaching FSMs
N
N#ifndef _SPI_IO_H_
N#define _SPI_IO_H_
N
N#include "integer.h"        /* Type redefinition for portability */
Nextern uint32_t DMA_Destination_Buffer[512];
Nextern uint32_t * DMA_Destination;
Nextern uint32_t DMA_Count;
N
N/******************************************************************************
N Public methods
N *****************************************************************************/
Nvoid Init_DMA(uint32_t * destination, uint32_t count);
Nvoid Start_DMA(void);
N
N/**
N    \brief Initialize SPI hardware
N */
Nvoid SPI_Init (void);
N
N/**
N    \brief Read/Write a single byte.
N    \param d Byte to send.
N    \return Byte that arrived.
N */
NBYTE SPI_RW (BYTE d);
N
N/**
N    \brief Flush of SPI buffer.
N */
Nvoid SPI_Release (void);
N
N/**
N    \brief Selecting function in SPI terms, associated with SPI module.
N */
Nvoid SPI_CS_Low (void);
N
N/**
N    \brief Deselecting function in SPI terms, associated with SPI module.
N */
Nvoid SPI_CS_High (void);
N
N/**
N    \brief Setting frequency of SPI's clock to maximun possible.
N */
Nvoid SPI_Freq_High (void);
N
N/**
N    \brief Setting frequency of SPI's clock equal or lower than 400kHz.
N */
Nvoid SPI_Freq_Low (void);
N
N/**
N    \brief Start a non-blocking timer.
N    \param ms Milliseconds.
N */
Nvoid SPI_Timer_On (WORD ms);
N
N/**
N    \brief Check the status of non-blocking timer.
N    \return Status, TRUE if timeout is not reach yet.
N */
NBOOL SPI_Timer_Status (void);
N
N/**
N    \brief Stop of non-blocking timer. Mandatory.
N */
Nvoid SPI_Timer_Off (void);
N
N#endif
N
N/*
NThe MIT License (MIT)
N
NCopyright (c) 2015 Nelson Lombardo
N
NPermission is hereby granted, free of charge, to any person obtaining a copy
Nof this software and associated documentation files (the "Software"), to deal
Nin the Software without restriction, including without limitation the rights
Nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell
Ncopies of the Software, and to permit persons to whom the Software is
Nfurnished to do so, subject to the following conditions:
N
NThe above copyright notice and this permission notice shall be included in
Nall copies or substantial portions of the Software.
N
NTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
NIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
NFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
NAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
NLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
NOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
NTHE SOFTWARE.
N*/
L 25 ".\Source\ulibSD\sd_io.h" 2
N
N/* Definitions of SD commands */
N#define CMD0    (0x40+0)        /* GO_IDLE_STATE            */
N#define CMD1    (0x40+1)        /* SEND_OP_COND (MMC)       */
N#define ACMD41  (0xC0+41)       /* SEND_OP_COND (SDC)       */
N#define CMD8    (0x40+8)        /* SEND_IF_COND             */
N#define CMD9    (0x40+9)        /* SEND_CSD                 */
N#define CMD16   (0x40+16)       /* SET_BLOCKLEN             */
N#define CMD17   (0x40+17)       /* READ_SINGLE_BLOCK        */
N#define CMD24   (0x40+24)       /* WRITE_SINGLE_BLOCK       */
N#define CMD42   (0x40+42)       /* LOCK_UNLOCK              */
N#define CMD55   (0x40+55)       /* APP_CMD                  */
N#define CMD58   (0x40+58)       /* READ_OCR                 */
N#define CMD59   (0x40+59)       /* CRC_ON_OFF               */
N
N#define SD_INIT_TRYS    0x03
N
N/* CardType */
N#define SDCT_MMC        0x01                    /* MMC version 3    */
N#define SDCT_SD1        0x02                    /* SD version 1     */
N#define SDCT_SD2        0x04                    /* SD version 2     */
N#define SDCT_SDC        (SDCT_SD1|SDCT_SD2)     /* SD               */
N#define SDCT_BLOCK      0x08                    /* Block addressing */
N
N#define SD_BLK_SIZE     512
N
N/* Results of SD functions */
Ntypedef enum {
N    SD_OK = 0,      /* 0: Function succeeded    */
N    SD_NOINIT,      /* 1: SD not initialized    */
N    SD_ERROR,       /* 2: Disk error            */
N    SD_PARERR,      /* 3: Invalid parameter     */
N    SD_BUSY,        /* 4: Programming busy      */
N    SD_REJECT,      /* 5: Reject data           */
N    SD_NORESPONSE   /* 6: No response           */
N} SDRESULTS;
N
Ntypedef struct _DBG_COUNT {
N    WORD read;
N    WORD write;
N} DBG_COUNT;
N
N
N/* SD device object */
Ntypedef struct _SD_DEV {
N    BOOL mount;
N    BYTE cardtype;
N    DWORD last_sector;
N    DBG_COUNT debug;
N} SD_DEV;
N
N/*******************************************************************************
N * Public Methods - Direct work with SD card                                   *
N ******************************************************************************/
N
N/**
N    \brief Initialization the SD card.
N    \return If all goes well returns SD_OK.
N */
NSDRESULTS SD_Init (SD_DEV *dev);
N
N/**
N    \brief Read a single block.
N    \param dest Pointer to the destination object to put data
N    \param sector Start sector number (internally is converted to byte address).
N    \param ofs Byte offset in the sector (0..511).
N    \param cnt Byte count (1..512).
N    \return If all goes well returns SD_OK.
N */
NSDRESULTS SD_Read (SD_DEV *dev, void *dat, DWORD sector, WORD ofs, WORD cnt);
N
N/**
N    \brief Write a single block.
N    \param dat Data to write.
N    \param sector Sector number to write (internally is converted to byte address).
N    \return If all goes well returns SD_OK.
N */
NSDRESULTS SD_Write (SD_DEV *dev, void *dat, DWORD sector);
N
N/**
N    \brief Allows know status of SD card.
N    \return If all goes well returns SD_OK.
N*/
NSDRESULTS SD_Status (SD_DEV *dev);
N
N#endif
N
N// «sd_io.h» is part of:
N/*----------------------------------------------------------------------------/
N/  ulibSD - Library for SD cards semantics            (C)Nelson Lombardo, 2015
N/-----------------------------------------------------------------------------/
N/ ulibSD library is a free software that opened under license policy of
N/ following conditions.
N/
N/ Copyright (C) 2015, ChaN, all right reserved.
N/
N/ 1. Redistributions of source code must retain the above copyright notice,
N/    this condition and the following disclaimer.
N/
N/ This software is provided by the copyright holder and contributors "AS IS"
N/ and any warranties related to this software are DISCLAIMED.
N/ The copyright owner or contributors be NOT LIABLE for any damages caused
N/ by use of this software.
N/----------------------------------------------------------------------------*/
N
N// Derived from Mister Chan works on FatFs code (http://elm-chan.org/fsw/ff/00index_e.html):
N/*----------------------------------------------------------------------------/
N/  FatFs - FAT file system module  R0.11                 (C)ChaN, 2015
N/-----------------------------------------------------------------------------/
N/ FatFs module is a free software that opened under license policy of
N/ following conditions.
N/
N/ Copyright (C) 2015, ChaN, all right reserved.
N/
N/ 1. Redistributions of source code must retain the above copyright notice,
N/    this condition and the following disclaimer.
N/
N/ This software is provided by the copyright holder and contributors "AS IS"
N/ and any warranties related to this software are DISCLAIMED.
N/ The copyright owner or contributors be NOT LIABLE for any damages caused
N/ by use of this software.
N/----------------------------------------------------------------------------*/
L 7 "Source\FS\diskio.c" 2
N#include <string.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060019
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 8 "Source\FS\diskio.c" 2
N
NSD_DEV dev;
N
N/*-----------------------------------------------------------------------*/
N/* Initialize Disk Drive                                                 */
N/*-----------------------------------------------------------------------*/
N
NDSTATUS disk_initialize(void) {
N	DSTATUS stat;
N
N	if (SD_Init(&dev) != SD_OK) {
N		stat = RES_ERROR;
N	} else {
N		stat = RES_OK;
N	}
N
N	return stat;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Read Partial Sector                                                   */
N/*-----------------------------------------------------------------------*/
NDRESULT disk_readp(BYTE * buff,	/* Pointer to the destination object */
N									 DWORD sector,	/* Sector number (LBA) */
N									 UINT offset,	/* Offset in the sector */
N									 UINT count		/* Byte count (bit15:destination) */
N		) {
N	DRESULT res;
N	// SD_Read reads entire block, but only stores count bytes starting at offset
N	if (SD_Read(&dev, buff, sector, offset, count) != SD_OK) {
N		res = RES_ERROR;
N	} else {
N		res = RES_OK;
N	}
N	return res;
N}
N
N/*-----------------------------------------------------------------------*/
N/* Write Partial Sector                                                  */
N/*-----------------------------------------------------------------------*/
N
NDRESULT disk_writep(const BYTE * buff,	/* Pointer to the data to be written, NULL:Initiate/Finalize write operation */
N										DWORD sc		/* Sector number (LBA) or Number of bytes to send */
N		) {
N	DRESULT res;
N
N
N	// AD
N	// TODO: Need to port. SD_Write writes an entire sector, needs to be modified to just write specified number of bytes
N	// Look into PFFS ports to see how this is done
N	if (!buff) {
N		if (sc) {
N
N			// Initiate write process
N
N		} else {
N
N			// Finalize write process
N
N		}
N	} else {
N
N		// Send data to the disk
N
N	}
N
N	return res;
N}
