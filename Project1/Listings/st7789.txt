; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\st7789.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\st7789.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\Include -I.\Source\Profiler -I.\Source\LCD -I.\Source\FS -I.\Source\ulibSD -I.\RTE\Device\MKL25Z128xxx4 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.15.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DMKL25Z128xxx4 --omf_browse=.\objects\st7789.crf Source\LCD\ST7789.c]
                          THUMB

                          AREA ||i.LCD_Controller_Init||, CODE, READONLY, ALIGN=2

                  LCD_Controller_Init PROC
;;;183    
;;;184    void LCD_Controller_Init(const LCD_CTLR_INIT_SEQ_T init_seq[]) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4606              MOV      r6,r0
;;;185    	unsigned i = 0, done = 0;
000004  2500              MOVS     r5,#0
;;;186    
;;;187    	GPIO_SetBit(LCD_NRD_POS);
000006  2001              MOVS     r0,#1
000008  4c19              LDR      r4,|L1.112|
00000a  0400              LSLS     r0,r0,#16
00000c  6060              STR      r0,[r4,#4]
;;;188    	GPIO_ResetBit(LCD_NWR_POS);
00000e  10c0              ASRS     r0,r0,#3
000010  60a0              STR      r0,[r4,#8]
;;;189    	GPIO_ResetBit(LCD_NRST_POS);
000012  0107              LSLS     r7,r0,#4
000014  60a7              STR      r7,[r4,#8]
;;;190    	Delay(100);
000016  2064              MOVS     r0,#0x64
000018  f7fffffe          BL       Delay
;;;191    	GPIO_SetBit(LCD_NRST_POS);
00001c  6067              STR      r7,[r4,#4]
;;;192    	Delay(100);
00001e  2064              MOVS     r0,#0x64
000020  f7fffffe          BL       Delay
;;;193    	GPIO_SetBit(LCD_D_NC_POS);		// AD: by default select data, not command
000024  1178              ASRS     r0,r7,#5
000026  6060              STR      r0,[r4,#4]
000028  0041              LSLS     r1,r0,#1              ;188
00002a  22ff              MOVS     r2,#0xff              ;188
00002c  00d2              LSLS     r2,r2,#3              ;188
                  |L1.46|
;;;194    
;;;195    	while (!done) {
;;;196    		switch (init_seq[i].Type) {
00002e  006b              LSLS     r3,r5,#1
000030  5cf7              LDRB     r7,[r6,r3]
000032  2f00              CMP      r7,#0
000034  d018              BEQ      |L1.104|
000036  2f01              CMP      r7,#1
000038  d002              BEQ      |L1.64|
00003a  2f02              CMP      r7,#2
00003c  d112              BNE      |L1.100|
00003e  e00a              B        |L1.86|
                  |L1.64|
;;;197    		case LCD_CTRL_INIT_SEQ_CMD:
;;;198    			LCD_24S_Write_Command(init_seq[i].Value);
000040  199b              ADDS     r3,r3,r6
000042  785b              LDRB     r3,[r3,#1]
000044  60a0              STR      r0,[r4,#8]
000046  60a2              STR      r2,[r4,#8]
000048  00db              LSLS     r3,r3,#3
00004a  6063              STR      r3,[r4,#4]
00004c  60a1              STR      r1,[r4,#8]
00004e  6061              STR      r1,[r4,#4]
000050  6060              STR      r0,[r4,#4]
000052  1c6d              ADDS     r5,r5,#1
;;;199    			break;
000054  e7eb              B        |L1.46|
                  |L1.86|
;;;200    		case LCD_CTRL_INIT_SEQ_DAT:
;;;201    			LCD_24S_Write_Data(init_seq[i].Value);
000056  199b              ADDS     r3,r3,r6
000058  785b              LDRB     r3,[r3,#1]
00005a  60a2              STR      r2,[r4,#8]
00005c  00db              LSLS     r3,r3,#3
00005e  6063              STR      r3,[r4,#4]
000060  60a1              STR      r1,[r4,#8]
000062  6061              STR      r1,[r4,#4]
                  |L1.100|
000064  1c6d              ADDS     r5,r5,#1
000066  e7e2              B        |L1.46|
                  |L1.104|
;;;202    			break;
;;;203    		case LCD_CTRL_INIT_SEQ_END:
;;;204    			done = 1;
;;;205    			break;
;;;206    		default:
;;;207    			break;
;;;208    		}
;;;209    		i++;
;;;210    	}
;;;211    	Delay(10);
000068  200a              MOVS     r0,#0xa
00006a  f7fffffe          BL       Delay
;;;212    }
00006e  bdf8              POP      {r3-r7,pc}
;;;213    
                          ENDP

                  |L1.112|
                          DCD      0xf80ff080

                          AREA ||i.LCD_Fill_Buffer||, CODE, READONLY, ALIGN=2

                  LCD_Fill_Buffer PROC
;;;268    /* Fill the entire display buffer with the given color. */
;;;269    void LCD_Fill_Buffer(COLOR_T * color) {
000000  b4f0              PUSH     {r4-r7}
000002  2501              MOVS     r5,#1
000004  4f32              LDR      r7,|L2.208|
000006  032d              LSLS     r5,r5,#12
000008  60bd              STR      r5,[r7,#8]
00000a  22ff              MOVS     r2,#0xff
00000c  00d2              LSLS     r2,r2,#3
00000e  60ba              STR      r2,[r7,#8]
000010  21ff              MOVS     r1,#0xff
000012  3151              ADDS     r1,r1,#0x51
000014  6079              STR      r1,[r7,#4]
000016  0069              LSLS     r1,r5,#1
000018  60b9              STR      r1,[r7,#8]
00001a  6079              STR      r1,[r7,#4]
00001c  607d              STR      r5,[r7,#4]
00001e  60ba              STR      r2,[r7,#8]
000020  2300              MOVS     r3,#0
000022  607b              STR      r3,[r7,#4]
000024  60b9              STR      r1,[r7,#8]
000026  6079              STR      r1,[r7,#4]
000028  60ba              STR      r2,[r7,#8]
00002a  607b              STR      r3,[r7,#4]
00002c  60b9              STR      r1,[r7,#8]
00002e  6079              STR      r1,[r7,#4]
000030  60ba              STR      r2,[r7,#8]
000032  607b              STR      r3,[r7,#4]
000034  60b9              STR      r1,[r7,#8]
000036  6079              STR      r1,[r7,#4]
000038  60ba              STR      r2,[r7,#8]
00003a  24ef              MOVS     r4,#0xef
00003c  00e4              LSLS     r4,r4,#3
00003e  607c              STR      r4,[r7,#4]
000040  60b9              STR      r1,[r7,#8]
000042  6079              STR      r1,[r7,#4]
000044  60bd              STR      r5,[r7,#8]
000046  60ba              STR      r2,[r7,#8]
000048  24ff              MOVS     r4,#0xff
00004a  3459              ADDS     r4,r4,#0x59
00004c  607c              STR      r4,[r7,#4]
00004e  60b9              STR      r1,[r7,#8]
000050  6079              STR      r1,[r7,#4]
000052  607d              STR      r5,[r7,#4]
000054  60ba              STR      r2,[r7,#8]
000056  607b              STR      r3,[r7,#4]
000058  60b9              STR      r1,[r7,#8]
00005a  6079              STR      r1,[r7,#4]
00005c  60ba              STR      r2,[r7,#8]
00005e  607b              STR      r3,[r7,#4]
000060  60b9              STR      r1,[r7,#8]
000062  6079              STR      r1,[r7,#4]
000064  60ba              STR      r2,[r7,#8]
000066  2308              MOVS     r3,#8
000068  607b              STR      r3,[r7,#4]
00006a  60b9              STR      r1,[r7,#8]
00006c  6079              STR      r1,[r7,#4]
00006e  60ba              STR      r2,[r7,#8]
000070  23ff              MOVS     r3,#0xff
000072  33f9              ADDS     r3,r3,#0xf9
000074  607b              STR      r3,[r7,#4]
000076  60b9              STR      r1,[r7,#8]
000078  6079              STR      r1,[r7,#4]
;;;270    	uint32_t x, y;
;;;271    	uint8_t b1, b2;
;;;272    
;;;273    	// Enable access to full screen, reset write pointer to origin
;;;274    	LCD_24S_Write_Command(0x002A);	//column address set
;;;275    	LCD_24S_Write_Data(0x0000);
;;;276    	LCD_24S_Write_Data(0x0000);		//start 0x0000
;;;277    	LCD_24S_Write_Data(0x0000);
;;;278    	LCD_24S_Write_Data(0x00EF);		//end 0x00EF
;;;279    	LCD_24S_Write_Command(0x002B);	//page address set
;;;280    	LCD_24S_Write_Data(0x0000);
;;;281    	LCD_24S_Write_Data(0x0000);		//start 0x0000
;;;282    	LCD_24S_Write_Data(0x0001);
;;;283    	LCD_24S_Write_Data(0x003F);		//end 0x013F
;;;284    
;;;285    	// Memory Write 0x2c
;;;286    	// 16 bpp, 5-6-5. Assume color channel data is left-aligned
;;;287    	b1 = (color->R & 0xf8) | ((color->G & 0xe0) >> 5);
00007a  7803              LDRB     r3,[r0,#0]
00007c  08dc              LSRS     r4,r3,#3
00007e  7843              LDRB     r3,[r0,#1]
000080  00e4              LSLS     r4,r4,#3
000082  095e              LSRS     r6,r3,#5
000084  4334              ORRS     r4,r4,r6
;;;288    	b2 = ((color->G & 0x1c) << 3) | ((color->B & 0xf8) >> 3);
000086  261c              MOVS     r6,#0x1c
000088  4033              ANDS     r3,r3,r6
00008a  7880              LDRB     r0,[r0,#2]
00008c  00db              LSLS     r3,r3,#3
00008e  08c0              LSRS     r0,r0,#3
000090  4303              ORRS     r3,r3,r0
000092  60bd              STR      r5,[r7,#8]
000094  60ba              STR      r2,[r7,#8]
000096  20ff              MOVS     r0,#0xff
000098  3061              ADDS     r0,r0,#0x61
00009a  6078              STR      r0,[r7,#4]
00009c  60b9              STR      r1,[r7,#8]
00009e  6079              STR      r1,[r7,#4]
0000a0  607d              STR      r5,[r7,#4]
;;;289    
;;;290    	LCD_24S_Write_Command(0x002c);
;;;291    	for (y = 0; y < 320; y++) {
0000a2  2600              MOVS     r6,#0
0000a4  00e5              LSLS     r5,r4,#3
0000a6  00dc              LSLS     r4,r3,#3
                  |L2.168|
;;;292    		for (x = 0; x < 240; x++) {
0000a8  2300              MOVS     r3,#0
0000aa  4638              MOV      r0,r7
                  |L2.172|
0000ac  6082              STR      r2,[r0,#8]
0000ae  6045              STR      r5,[r0,#4]
0000b0  6081              STR      r1,[r0,#8]
0000b2  6041              STR      r1,[r0,#4]
0000b4  6082              STR      r2,[r0,#8]
0000b6  6044              STR      r4,[r0,#4]
0000b8  6081              STR      r1,[r0,#8]
0000ba  6041              STR      r1,[r0,#4]
0000bc  1c5b              ADDS     r3,r3,#1
0000be  2bf0              CMP      r3,#0xf0
0000c0  d3f4              BCC      |L2.172|
0000c2  20ff              MOVS     r0,#0xff              ;291
0000c4  3041              ADDS     r0,r0,#0x41           ;291
0000c6  1c76              ADDS     r6,r6,#1              ;291
0000c8  4286              CMP      r6,r0                 ;291
0000ca  d3ed              BCC      |L2.168|
;;;293    			LCD_24S_Write_Data(b1);
;;;294    			LCD_24S_Write_Data(b2);
;;;295    #if ENABLE_PIXEL_HASH
;;;296    			// Update pixel_data_hash
;;;297    			pixel_data_hash ^= b1 ^ b2;
;;;298    			if (pixel_data_hash & 0x01) {
;;;299    				pixel_data_hash >>= 1;
;;;300    				pixel_data_hash |= 0x80000000;
;;;301    			} else {
;;;302    				pixel_data_hash >>= 1;
;;;303    			}
;;;304    #endif
;;;305    		}
;;;306    	}
;;;307    }
0000cc  bcf0              POP      {r4-r7}
0000ce  4770              BX       lr
;;;308    
                          ENDP

                  |L2.208|
                          DCD      0xf80ff080

                          AREA ||i.LCD_Fill_Rectangle||, CODE, READONLY, ALIGN=2

                  LCD_Fill_Rectangle PROC
;;;309    /* Draw a rectangle from p1 to p2 filled with specified color. */
;;;310    void LCD_Fill_Rectangle(PT_T * p1, PT_T * p2, COLOR_T * color) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4694              MOV      r12,r2
;;;311    	uint32_t n;
;;;312    	uint8_t b1, b2;
;;;313    	uint16_t c_min, c_max, r_min, r_max;
;;;314    
;;;315    	c_min = MIN(p1->X, p2->X);
000004  6803              LDR      r3,[r0,#0]
000006  680a              LDR      r2,[r1,#0]
000008  4293              CMP      r3,r2
00000a  d201              BCS      |L3.16|
00000c  461c              MOV      r4,r3
00000e  e000              B        |L3.18|
                  |L3.16|
000010  4614              MOV      r4,r2
                  |L3.18|
000012  b2a7              UXTH     r7,r4
;;;316    	c_max = MAX(p1->X, p2->X);
000014  4293              CMP      r3,r2
000016  d900              BLS      |L3.26|
000018  461a              MOV      r2,r3
                  |L3.26|
00001a  b296              UXTH     r6,r2
;;;317    	c_max = MIN(c_max, LCD_WIDTH - 1);
00001c  2eef              CMP      r6,#0xef
00001e  d300              BCC      |L3.34|
000020  26ef              MOVS     r6,#0xef
                  |L3.34|
;;;318    
;;;319    	r_min = MIN(p1->Y, p2->Y);
000022  6840              LDR      r0,[r0,#4]
000024  6849              LDR      r1,[r1,#4]
000026  4288              CMP      r0,r1
000028  d201              BCS      |L3.46|
00002a  4602              MOV      r2,r0
00002c  e000              B        |L3.48|
                  |L3.46|
00002e  460a              MOV      r2,r1
                  |L3.48|
000030  b292              UXTH     r2,r2
;;;320    	r_max = MAX(p1->Y, p2->Y);
000032  4288              CMP      r0,r1
000034  d800              BHI      |L3.56|
000036  4608              MOV      r0,r1
                  |L3.56|
000038  b285              UXTH     r5,r0
;;;321    	r_max = MIN(r_max, LCD_HEIGHT - 1);
00003a  20ff              MOVS     r0,#0xff
00003c  3040              ADDS     r0,r0,#0x40
00003e  4285              CMP      r5,r0
000040  d300              BCC      |L3.68|
000042  4605              MOV      r5,r0
                  |L3.68|
;;;322    
;;;323    	n = (c_max - c_min + 1) * (r_max - r_min + 1);
000044  1bf0              SUBS     r0,r6,r7
000046  1aa9              SUBS     r1,r5,r2
000048  1c40              ADDS     r0,r0,#1
00004a  1c49              ADDS     r1,r1,#1
00004c  4348              MULS     r0,r1,r0
00004e  4686              MOV      lr,r0
;;;324    	if (n == 0)
000050  d070              BEQ      |L3.308|
000052  2101              MOVS     r1,#1
000054  4838              LDR      r0,|L3.312|
000056  0309              LSLS     r1,r1,#12
000058  6081              STR      r1,[r0,#8]
00005a  23ff              MOVS     r3,#0xff
00005c  00db              LSLS     r3,r3,#3
00005e  6083              STR      r3,[r0,#8]
000060  21ff              MOVS     r1,#0xff
000062  3151              ADDS     r1,r1,#0x51
000064  6041              STR      r1,[r0,#4]
000066  2101              MOVS     r1,#1
000068  0349              LSLS     r1,r1,#13
00006a  6081              STR      r1,[r0,#8]
00006c  6041              STR      r1,[r0,#4]
00006e  104c              ASRS     r4,r1,#1
000070  6044              STR      r4,[r0,#4]
;;;325    		return;
;;;326    
;;;327    	// Enable access to full screen, reset write pointer to origin
;;;328    	LCD_24S_Write_Command(0x002A);	//column address set
;;;329    	LCD_24S_Write_Data(c_min >> 8);
000072  0a3c              LSRS     r4,r7,#8
000074  6083              STR      r3,[r0,#8]
000076  00e4              LSLS     r4,r4,#3
000078  6044              STR      r4,[r0,#4]
00007a  6081              STR      r1,[r0,#8]
00007c  6041              STR      r1,[r0,#4]
;;;330    	LCD_24S_Write_Data(c_min & 0xff);	//start 
00007e  063f              LSLS     r7,r7,#24
000080  6083              STR      r3,[r0,#8]
000082  0d7f              LSRS     r7,r7,#21
000084  6047              STR      r7,[r0,#4]
000086  6081              STR      r1,[r0,#8]
000088  6041              STR      r1,[r0,#4]
;;;331    	LCD_24S_Write_Data(c_max >> 8);
00008a  0a37              LSRS     r7,r6,#8
00008c  6083              STR      r3,[r0,#8]
00008e  00ff              LSLS     r7,r7,#3
000090  6047              STR      r7,[r0,#4]
000092  6081              STR      r1,[r0,#8]
000094  6041              STR      r1,[r0,#4]
;;;332    	LCD_24S_Write_Data(c_max & 0xff);	//end 
000096  0634              LSLS     r4,r6,#24
000098  6083              STR      r3,[r0,#8]
00009a  0d64              LSRS     r4,r4,#21
00009c  6044              STR      r4,[r0,#4]
00009e  6081              STR      r1,[r0,#8]
0000a0  6041              STR      r1,[r0,#4]
0000a2  104c              ASRS     r4,r1,#1
0000a4  6084              STR      r4,[r0,#8]
0000a6  6083              STR      r3,[r0,#8]
0000a8  24ff              MOVS     r4,#0xff
0000aa  3459              ADDS     r4,r4,#0x59
0000ac  6044              STR      r4,[r0,#4]
0000ae  6081              STR      r1,[r0,#8]
0000b0  6041              STR      r1,[r0,#4]
0000b2  104c              ASRS     r4,r1,#1
0000b4  6044              STR      r4,[r0,#4]
;;;333    	LCD_24S_Write_Command(0x002B);	//page address set
;;;334    	LCD_24S_Write_Data(r_min >> 8);
0000b6  0a14              LSRS     r4,r2,#8
0000b8  6083              STR      r3,[r0,#8]
0000ba  00e4              LSLS     r4,r4,#3
0000bc  6044              STR      r4,[r0,#4]
0000be  6081              STR      r1,[r0,#8]
0000c0  6041              STR      r1,[r0,#4]
;;;335    	LCD_24S_Write_Data(r_min & 0xff);	//start 
0000c2  0612              LSLS     r2,r2,#24
0000c4  6083              STR      r3,[r0,#8]
0000c6  0d52              LSRS     r2,r2,#21
0000c8  6042              STR      r2,[r0,#4]
0000ca  6081              STR      r1,[r0,#8]
0000cc  6041              STR      r1,[r0,#4]
;;;336    	LCD_24S_Write_Data(r_max >> 8);
0000ce  0a2a              LSRS     r2,r5,#8
0000d0  6083              STR      r3,[r0,#8]
0000d2  00d2              LSLS     r2,r2,#3
0000d4  6042              STR      r2,[r0,#4]
0000d6  6081              STR      r1,[r0,#8]
0000d8  6041              STR      r1,[r0,#4]
;;;337    	LCD_24S_Write_Data(r_max & 0xff);	//end 
0000da  062a              LSLS     r2,r5,#24
0000dc  6083              STR      r3,[r0,#8]
0000de  0d52              LSRS     r2,r2,#21
0000e0  6042              STR      r2,[r0,#4]
0000e2  6081              STR      r1,[r0,#8]
0000e4  6041              STR      r1,[r0,#4]
;;;338    
;;;339    	// Memory Write 0x2c
;;;340    	// 16 bpp, 5-6-5. Assume color channel data is left-aligned
;;;341    	b1 = (color->R & 0xf8) | ((color->G & 0xe0) >> 5);
0000e6  4662              MOV      r2,r12
0000e8  7812              LDRB     r2,[r2,#0]
0000ea  08d5              LSRS     r5,r2,#3
0000ec  4662              MOV      r2,r12
0000ee  7852              LDRB     r2,[r2,#1]
0000f0  00ed              LSLS     r5,r5,#3
0000f2  0954              LSRS     r4,r2,#5
0000f4  4325              ORRS     r5,r5,r4
;;;342    	b2 = ((color->G & 0x1c) << 3) | ((color->B & 0xf8) >> 3);
0000f6  241c              MOVS     r4,#0x1c
0000f8  4022              ANDS     r2,r2,r4
0000fa  4664              MOV      r4,r12
0000fc  78a4              LDRB     r4,[r4,#2]
0000fe  00d2              LSLS     r2,r2,#3
000100  08e4              LSRS     r4,r4,#3
000102  4322              ORRS     r2,r2,r4
000104  104c              ASRS     r4,r1,#1
000106  6084              STR      r4,[r0,#8]
000108  6083              STR      r3,[r0,#8]
00010a  24ff              MOVS     r4,#0xff
00010c  3461              ADDS     r4,r4,#0x61
00010e  6044              STR      r4,[r0,#4]
000110  6081              STR      r1,[r0,#8]
000112  6041              STR      r1,[r0,#4]
000114  104c              ASRS     r4,r1,#1
000116  6044              STR      r4,[r0,#4]
;;;343    
;;;344    	LCD_24S_Write_Command(0x002c);
;;;345    
;;;346    	while (n-- > 0) {
000118  4674              MOV      r4,lr
00011a  00ed              LSLS     r5,r5,#3
00011c  00d2              LSLS     r2,r2,#3
00011e  1e64              SUBS     r4,r4,#1
                  |L3.288|
000120  6083              STR      r3,[r0,#8]
000122  6045              STR      r5,[r0,#4]
000124  6081              STR      r1,[r0,#8]
000126  6041              STR      r1,[r0,#4]
000128  6083              STR      r3,[r0,#8]
00012a  6042              STR      r2,[r0,#4]
00012c  6081              STR      r1,[r0,#8]
00012e  6041              STR      r1,[r0,#4]
000130  1e64              SUBS     r4,r4,#1
000132  d2f5              BCS      |L3.288|
                  |L3.308|
;;;347    		LCD_24S_Write_Data(b1);
;;;348    		LCD_24S_Write_Data(b2);
;;;349    #if ENABLE_PIXEL_HASH
;;;350    		// Update pixel_data_hash
;;;351    		pixel_data_hash ^= b1 ^ b2;
;;;352    		if (pixel_data_hash & 0x01) {
;;;353    			pixel_data_hash >>= 1;
;;;354    			pixel_data_hash |= 0x80000000;
;;;355    		} else {
;;;356    			pixel_data_hash >>= 1;
;;;357    		}
;;;358    #endif		
;;;359    	}
;;;360    }
000134  bdf0              POP      {r4-r7,pc}
;;;361    
                          ENDP

000136  0000              DCW      0x0000
                  |L3.312|
                          DCD      0xf80ff080

                          AREA ||i.LCD_GPIO_Init||, CODE, READONLY, ALIGN=2

                  LCD_GPIO_Init PROC
;;;106    /* Initialize GPIO ports for communicating with TFT LCD controller. */
;;;107    void LCD_GPIO_Init(void) {
000000  b430              PUSH     {r4,r5}
;;;108    	unsigned i;
;;;109    
;;;110    	// Enable clock to ports
;;;111    	SIM->SCGC5 |= SIM_SCGC5_PORTC_MASK | SIM_SCGC5_PORTE_MASK;
000002  4848              LDR      r0,|L4.292|
000004  6b81              LDR      r1,[r0,#0x38]
000006  2205              MOVS     r2,#5
000008  02d2              LSLS     r2,r2,#11
00000a  4311              ORRS     r1,r1,r2
00000c  6381              STR      r1,[r0,#0x38]
;;;112    
;;;113    	// Make digital pins GPIO
;;;114    	// Data bus pins
;;;115    	for (i = LCD_DB8_POS; i <= LCD_DB15_POS; i++) {
;;;116    		PORTC->PCR[i] &= ~PORT_PCR_MUX_MASK;
00000e  4846              LDR      r0,|L4.296|
000010  68c1              LDR      r1,[r0,#0xc]
000012  2307              MOVS     r3,#7
000014  021b              LSLS     r3,r3,#8
000016  4399              BICS     r1,r1,r3
000018  60c1              STR      r1,[r0,#0xc]
;;;117    		PORTC->PCR[i] |= PORT_PCR_MUX(1);
00001a  68c1              LDR      r1,[r0,#0xc]
00001c  1582              ASRS     r2,r0,#22
00001e  4311              ORRS     r1,r1,r2
000020  60c1              STR      r1,[r0,#0xc]
;;;118    		FPTC->PDDR |= MASK(i);
000022  4942              LDR      r1,|L4.300|
000024  694c              LDR      r4,[r1,#0x14]
000026  2508              MOVS     r5,#8
000028  432c              ORRS     r4,r4,r5
00002a  614c              STR      r4,[r1,#0x14]
00002c  6904              LDR      r4,[r0,#0x10]         ;116
00002e  439c              BICS     r4,r4,r3              ;116
000030  6104              STR      r4,[r0,#0x10]         ;116
000032  6904              LDR      r4,[r0,#0x10]         ;117
000034  4314              ORRS     r4,r4,r2              ;117
000036  6104              STR      r4,[r0,#0x10]         ;117
000038  694c              LDR      r4,[r1,#0x14]
00003a  2510              MOVS     r5,#0x10
00003c  432c              ORRS     r4,r4,r5
00003e  614c              STR      r4,[r1,#0x14]
000040  6944              LDR      r4,[r0,#0x14]         ;116
000042  439c              BICS     r4,r4,r3              ;116
000044  6144              STR      r4,[r0,#0x14]         ;116
000046  6944              LDR      r4,[r0,#0x14]         ;117
000048  4314              ORRS     r4,r4,r2              ;117
00004a  6144              STR      r4,[r0,#0x14]         ;117
00004c  694c              LDR      r4,[r1,#0x14]
00004e  2520              MOVS     r5,#0x20
000050  432c              ORRS     r4,r4,r5
000052  614c              STR      r4,[r1,#0x14]
000054  6984              LDR      r4,[r0,#0x18]         ;116
000056  439c              BICS     r4,r4,r3              ;116
000058  6184              STR      r4,[r0,#0x18]         ;116
00005a  6984              LDR      r4,[r0,#0x18]         ;117
00005c  4314              ORRS     r4,r4,r2              ;117
00005e  6184              STR      r4,[r0,#0x18]         ;117
000060  694c              LDR      r4,[r1,#0x14]
000062  2540              MOVS     r5,#0x40
000064  432c              ORRS     r4,r4,r5
000066  614c              STR      r4,[r1,#0x14]
000068  69c4              LDR      r4,[r0,#0x1c]         ;116
00006a  439c              BICS     r4,r4,r3              ;116
00006c  61c4              STR      r4,[r0,#0x1c]         ;116
00006e  69c4              LDR      r4,[r0,#0x1c]         ;117
000070  4314              ORRS     r4,r4,r2              ;117
000072  61c4              STR      r4,[r0,#0x1c]         ;117
000074  694c              LDR      r4,[r1,#0x14]
000076  2580              MOVS     r5,#0x80
000078  432c              ORRS     r4,r4,r5
00007a  614c              STR      r4,[r1,#0x14]
00007c  6a04              LDR      r4,[r0,#0x20]         ;116
00007e  439c              BICS     r4,r4,r3              ;116
000080  6204              STR      r4,[r0,#0x20]         ;116
000082  6a04              LDR      r4,[r0,#0x20]         ;117
000084  4314              ORRS     r4,r4,r2              ;117
000086  6204              STR      r4,[r0,#0x20]         ;117
000088  694c              LDR      r4,[r1,#0x14]
00008a  4314              ORRS     r4,r4,r2
00008c  614c              STR      r4,[r1,#0x14]
00008e  6a44              LDR      r4,[r0,#0x24]         ;116
000090  439c              BICS     r4,r4,r3              ;116
000092  6244              STR      r4,[r0,#0x24]         ;116
000094  6a44              LDR      r4,[r0,#0x24]         ;117
000096  4314              ORRS     r4,r4,r2              ;117
000098  6244              STR      r4,[r0,#0x24]         ;117
00009a  694c              LDR      r4,[r1,#0x14]
00009c  1545              ASRS     r5,r0,#21
00009e  432c              ORRS     r4,r4,r5
0000a0  614c              STR      r4,[r1,#0x14]
0000a2  6a84              LDR      r4,[r0,#0x28]         ;116
0000a4  439c              BICS     r4,r4,r3              ;116
0000a6  6284              STR      r4,[r0,#0x28]         ;116
0000a8  6a84              LDR      r4,[r0,#0x28]         ;117
0000aa  4314              ORRS     r4,r4,r2              ;117
0000ac  6284              STR      r4,[r0,#0x28]         ;117
0000ae  694c              LDR      r4,[r1,#0x14]
0000b0  1505              ASRS     r5,r0,#20
0000b2  432c              ORRS     r4,r4,r5
0000b4  614c              STR      r4,[r1,#0x14]
;;;119    	}
;;;120    
;;;121    	// Data/Command
;;;122    	PORTC->PCR[LCD_D_NC_POS] &= ~PORT_PCR_MUX_MASK;
0000b6  6b04              LDR      r4,[r0,#0x30]
0000b8  439c              BICS     r4,r4,r3
0000ba  6304              STR      r4,[r0,#0x30]
;;;123    	PORTC->PCR[LCD_D_NC_POS] |= PORT_PCR_MUX(1);
0000bc  6b04              LDR      r4,[r0,#0x30]
0000be  4314              ORRS     r4,r4,r2
0000c0  6304              STR      r4,[r0,#0x30]
;;;124    	// /Write
;;;125    	PORTC->PCR[LCD_NWR_POS] &= ~PORT_PCR_MUX_MASK;
0000c2  6b44              LDR      r4,[r0,#0x34]
0000c4  439c              BICS     r4,r4,r3
0000c6  6344              STR      r4,[r0,#0x34]
;;;126    	PORTC->PCR[LCD_NWR_POS] |= PORT_PCR_MUX(1);
0000c8  6b44              LDR      r4,[r0,#0x34]
0000ca  4314              ORRS     r4,r4,r2
0000cc  6344              STR      r4,[r0,#0x34]
;;;127    	// /Read
;;;128    	PORTC->PCR[LCD_NRD_POS] &= ~PORT_PCR_MUX_MASK;
0000ce  4818              LDR      r0,|L4.304|
0000d0  6804              LDR      r4,[r0,#0]
0000d2  439c              BICS     r4,r4,r3
0000d4  6004              STR      r4,[r0,#0]
;;;129    	PORTC->PCR[LCD_NRD_POS] |= PORT_PCR_MUX(1);
0000d6  6804              LDR      r4,[r0,#0]
0000d8  4314              ORRS     r4,r4,r2
0000da  6004              STR      r4,[r0,#0]
;;;130    	// /Reset
;;;131    	PORTC->PCR[LCD_NRST_POS] &= ~PORT_PCR_MUX_MASK;
0000dc  6844              LDR      r4,[r0,#4]
0000de  439c              BICS     r4,r4,r3
0000e0  6044              STR      r4,[r0,#4]
;;;132    	PORTC->PCR[LCD_NRST_POS] |= PORT_PCR_MUX(1);
0000e2  6843              LDR      r3,[r0,#4]
0000e4  4313              ORRS     r3,r3,r2
0000e6  6043              STR      r3,[r0,#4]
;;;133    
;;;134    	// Set port directions to outputs
;;;135    	FPTC->PDDR |= MASK(LCD_D_NC_POS);
0000e8  694a              LDR      r2,[r1,#0x14]
0000ea  00a8              LSLS     r0,r5,#2
0000ec  4302              ORRS     r2,r2,r0
0000ee  614a              STR      r2,[r1,#0x14]
;;;136    	FPTC->PDDR |= MASK(LCD_NWR_POS);
0000f0  694b              LDR      r3,[r1,#0x14]
0000f2  0042              LSLS     r2,r0,#1
0000f4  4313              ORRS     r3,r3,r2
0000f6  614b              STR      r3,[r1,#0x14]
;;;137    	FPTC->PDDR |= MASK(LCD_NRD_POS);
0000f8  694c              LDR      r4,[r1,#0x14]
0000fa  0103              LSLS     r3,r0,#4
0000fc  431c              ORRS     r4,r4,r3
0000fe  614c              STR      r4,[r1,#0x14]
;;;138    	FPTC->PDDR |= MASK(LCD_NRST_POS);
000100  694d              LDR      r5,[r1,#0x14]
000102  0144              LSLS     r4,r0,#5
000104  4325              ORRS     r5,r5,r4
000106  614d              STR      r5,[r1,#0x14]
;;;139    
;;;140    	// Set initial control line values to inactive (1)
;;;141    	FPTC->PDOR |= MASK(LCD_D_NC_POS);
000108  680d              LDR      r5,[r1,#0]
00010a  4305              ORRS     r5,r5,r0
00010c  600d              STR      r5,[r1,#0]
;;;142    	FPTC->PDOR |= MASK(LCD_NWR_POS);
00010e  6808              LDR      r0,[r1,#0]
000110  4310              ORRS     r0,r0,r2
000112  6008              STR      r0,[r1,#0]
;;;143    	FPTC->PDOR |= MASK(LCD_NRD_POS);
000114  6808              LDR      r0,[r1,#0]
000116  4318              ORRS     r0,r0,r3
000118  6008              STR      r0,[r1,#0]
;;;144    	FPTC->PDOR |= MASK(LCD_NRST_POS);
00011a  6808              LDR      r0,[r1,#0]
00011c  4320              ORRS     r0,r0,r4
00011e  6008              STR      r0,[r1,#0]
;;;145    }
000120  bc30              POP      {r4,r5}
000122  4770              BX       lr
;;;146    
                          ENDP

                  |L4.292|
                          DCD      0x40048000
                  |L4.296|
                          DCD      0x4004b000
                  |L4.300|
                          DCD      0xf80ff080
                  |L4.304|
                          DCD      0x4004b040

                          AREA ||i.LCD_Init||, CODE, READONLY, ALIGN=2

                  LCD_Init PROC
;;;215    components (TFT LCD controller, touch screen and backlight controller). */
;;;216    void LCD_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;217    	LCD_GPIO_Init();
000002  f7fffffe          BL       LCD_GPIO_Init
;;;218    	LCD_TS_Init();
000006  f7fffffe          BL       LCD_TS_Init
00000a  4811              LDR      r0,|L5.80|
00000c  6b81              LDR      r1,[r0,#0x38]
00000e  1542              ASRS     r2,r0,#21
000010  4311              ORRS     r1,r1,r2
000012  6381              STR      r1,[r0,#0x38]
000014  4810              LDR      r0,|L5.88|
000016  490f              LDR      r1,|L5.84|
000018  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00001a  f7fffffe          BL       __aeabi_uidivmod
00001e  4602              MOV      r2,r0
000020  2103              MOVS     r1,#3
000022  0389              LSLS     r1,r1,#14
000024  4348              MULS     r0,r1,r0
000026  0c03              LSRS     r3,r0,#16
000028  b292              UXTH     r2,r2
00002a  2100              MOVS     r1,#0
00002c  480b              LDR      r0,|L5.92|
00002e  f7fffffe          BL       PWM_Init
000032  480b              LDR      r0,|L5.96|
000034  6b01              LDR      r1,[r0,#0x30]
000036  2207              MOVS     r2,#7
000038  0212              LSLS     r2,r2,#8
00003a  4011              ANDS     r1,r1,r2
00003c  6301              STR      r1,[r0,#0x30]
00003e  6b01              LDR      r1,[r0,#0x30]
000040  2203              MOVS     r2,#3
000042  0212              LSLS     r2,r2,#8
000044  4311              ORRS     r1,r1,r2
000046  6301              STR      r1,[r0,#0x30]
;;;219    	LCD_Init_Backlight();
;;;220    
;;;221    #if LCD_CONTROLLER == CTLR_ILI9341
;;;222    	LCD_Controller_Init(Init_Seq_ILI9341);
;;;223    #else
;;;224    	LCD_Controller_Init(Init_Seq_ST7789);
000048  4806              LDR      r0,|L5.100|
00004a  f7fffffe          BL       LCD_Controller_Init
;;;225    #endif
;;;226    
;;;227    }
00004e  bd10              POP      {r4,pc}
;;;228    
                          ENDP

                  |L5.80|
                          DCD      0x40048000
                  |L5.84|
                          DCD      0x00013880
                  |L5.88|
                          DCD      SystemCoreClock
                  |L5.92|
                          DCD      0x40039000
                  |L5.96|
                          DCD      0x40049000
                  |L5.100|
                          DCD      ||area_number.18||

                          AREA ||i.LCD_Plot_Pixel||, CODE, READONLY, ALIGN=2

                  LCD_Plot_Pixel PROC
;;;229    /* Set the pixel at pos to the given color. */
;;;230    void LCD_Plot_Pixel(PT_T * pos, COLOR_T * color) {
000000  b4f0              PUSH     {r4-r7}
000002  2501              MOVS     r5,#1
000004  4a31              LDR      r2,|L6.204|
000006  032d              LSLS     r5,r5,#12
000008  6095              STR      r5,[r2,#8]
00000a  24ff              MOVS     r4,#0xff
00000c  00e4              LSLS     r4,r4,#3
00000e  6094              STR      r4,[r2,#8]
000010  23ff              MOVS     r3,#0xff
000012  3351              ADDS     r3,r3,#0x51
000014  6053              STR      r3,[r2,#4]
000016  006b              LSLS     r3,r5,#1
000018  6093              STR      r3,[r2,#8]
00001a  6053              STR      r3,[r2,#4]
00001c  6055              STR      r5,[r2,#4]
00001e  6094              STR      r4,[r2,#8]
000020  2700              MOVS     r7,#0
000022  6057              STR      r7,[r2,#4]
000024  6093              STR      r3,[r2,#8]
000026  6053              STR      r3,[r2,#4]
;;;231    	uint8_t b1, b2;
;;;232    
;;;233    	// Column address set 0x2a
;;;234    	LCD_24S_Write_Command(0x002A);	//column address set
;;;235    	LCD_24S_Write_Data(0);
;;;236    	LCD_24S_Write_Data(pos->X & 0xff);	//start 
000028  7806              LDRB     r6,[r0,#0]
00002a  6094              STR      r4,[r2,#8]
00002c  00f6              LSLS     r6,r6,#3
00002e  6056              STR      r6,[r2,#4]
000030  6093              STR      r3,[r2,#8]
000032  6053              STR      r3,[r2,#4]
000034  6094              STR      r4,[r2,#8]
000036  6057              STR      r7,[r2,#4]
000038  6093              STR      r3,[r2,#8]
00003a  6053              STR      r3,[r2,#4]
00003c  6094              STR      r4,[r2,#8]
00003e  26ef              MOVS     r6,#0xef
000040  00f6              LSLS     r6,r6,#3
000042  6056              STR      r6,[r2,#4]
000044  6093              STR      r3,[r2,#8]
000046  6053              STR      r3,[r2,#4]
000048  6095              STR      r5,[r2,#8]
00004a  6094              STR      r4,[r2,#8]
00004c  26ff              MOVS     r6,#0xff
00004e  3659              ADDS     r6,r6,#0x59
000050  6056              STR      r6,[r2,#4]
000052  6093              STR      r3,[r2,#8]
000054  6053              STR      r3,[r2,#4]
000056  6055              STR      r5,[r2,#4]
;;;237    	LCD_24S_Write_Data(0x0000);
;;;238    	LCD_24S_Write_Data(0x00EF);		//end 0x00EF
;;;239    
;;;240    	// Page (row) address set 0x2b
;;;241    	LCD_24S_Write_Command(0x002B);	//page address set
;;;242    	LCD_24S_Write_Data(pos->Y >> 8);
000058  8886              LDRH     r6,[r0,#4]
00005a  6094              STR      r4,[r2,#8]
00005c  0436              LSLS     r6,r6,#16
00005e  0e36              LSRS     r6,r6,#24
000060  00f6              LSLS     r6,r6,#3
000062  6056              STR      r6,[r2,#4]
000064  6093              STR      r3,[r2,#8]
000066  6053              STR      r3,[r2,#4]
;;;243    	LCD_24S_Write_Data(pos->Y & 0xff);	//start 
000068  7900              LDRB     r0,[r0,#4]
00006a  6094              STR      r4,[r2,#8]
00006c  00c0              LSLS     r0,r0,#3
00006e  6050              STR      r0,[r2,#4]
000070  6093              STR      r3,[r2,#8]
000072  6053              STR      r3,[r2,#4]
000074  6094              STR      r4,[r2,#8]
000076  2008              MOVS     r0,#8
000078  6050              STR      r0,[r2,#4]
00007a  6093              STR      r3,[r2,#8]
00007c  6053              STR      r3,[r2,#4]
00007e  6094              STR      r4,[r2,#8]
000080  20ff              MOVS     r0,#0xff
000082  30f9              ADDS     r0,r0,#0xf9
000084  6050              STR      r0,[r2,#4]
000086  6093              STR      r3,[r2,#8]
000088  6053              STR      r3,[r2,#4]
;;;244    	LCD_24S_Write_Data(0x0001);
;;;245    	LCD_24S_Write_Data(0x003F);		//end 0x013F  
;;;246    
;;;247    	// Memory Write 0x2c
;;;248    	// 16 bpp, 5-6-5. Assume color channel data is left-aligned
;;;249    	b1 = (color->R & 0xf8) | ((color->G & 0xe0) >> 5);
00008a  7808              LDRB     r0,[r1,#0]
00008c  08c6              LSRS     r6,r0,#3
00008e  7848              LDRB     r0,[r1,#1]
000090  00f6              LSLS     r6,r6,#3
000092  0947              LSRS     r7,r0,#5
000094  433e              ORRS     r6,r6,r7
;;;250    	b2 = ((color->G & 0x1c) << 3) | ((color->B & 0xf8) >> 3);
000096  271c              MOVS     r7,#0x1c
000098  4038              ANDS     r0,r0,r7
00009a  7889              LDRB     r1,[r1,#2]
00009c  00c0              LSLS     r0,r0,#3
00009e  08c9              LSRS     r1,r1,#3
0000a0  4308              ORRS     r0,r0,r1
0000a2  6095              STR      r5,[r2,#8]
0000a4  6094              STR      r4,[r2,#8]
0000a6  21ff              MOVS     r1,#0xff
0000a8  3161              ADDS     r1,r1,#0x61
0000aa  6051              STR      r1,[r2,#4]
0000ac  6093              STR      r3,[r2,#8]
0000ae  6053              STR      r3,[r2,#4]
0000b0  6055              STR      r5,[r2,#4]
0000b2  6094              STR      r4,[r2,#8]
0000b4  00f1              LSLS     r1,r6,#3
0000b6  6051              STR      r1,[r2,#4]
0000b8  6093              STR      r3,[r2,#8]
0000ba  6053              STR      r3,[r2,#4]
0000bc  6094              STR      r4,[r2,#8]
0000be  00c0              LSLS     r0,r0,#3
0000c0  6050              STR      r0,[r2,#4]
0000c2  6093              STR      r3,[r2,#8]
0000c4  6053              STR      r3,[r2,#4]
;;;251    
;;;252    #if ENABLE_PIXEL_HASH
;;;253    	// Update pixel_data_hash
;;;254    	pixel_data_hash ^= b1 ^ b2;
;;;255    	if (pixel_data_hash & 0x01) {
;;;256    		pixel_data_hash >>= 1;
;;;257    		pixel_data_hash |= 0x80000000;
;;;258    	} else {
;;;259    		pixel_data_hash >>= 1;
;;;260    	}
;;;261    #endif
;;;262    
;;;263    	LCD_24S_Write_Command(0x002c);
;;;264    	LCD_24S_Write_Data(b1);
;;;265    	LCD_24S_Write_Data(b2);
;;;266    }
0000c6  bcf0              POP      {r4-r7}
0000c8  4770              BX       lr
;;;267    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L6.204|
                          DCD      0xf80ff080

                          AREA ||i.LCD_Refresh||, CODE, READONLY, ALIGN=1

                  LCD_Refresh PROC
;;;536    
;;;537    void LCD_Refresh(void) {
000000  4770              BX       lr
;;;538    	// Empty, since no local frame buffer used
;;;539    }
;;;540    
                          ENDP


                          AREA ||i.LCD_Set_BL||, CODE, READONLY, ALIGN=2

                  LCD_Set_BL PROC
;;;541    /* Enable (on > 0) or disable LED backlight via LCD controller. */
;;;542    void LCD_Set_BL(uint8_t on) {
000000  b410              PUSH     {r4}
000002  2401              MOVS     r4,#1
000004  490b              LDR      r1,|L8.52|
000006  0324              LSLS     r4,r4,#12
000008  608c              STR      r4,[r1,#8]
00000a  23ff              MOVS     r3,#0xff
00000c  00db              LSLS     r3,r3,#3
00000e  608b              STR      r3,[r1,#8]
000010  2253              MOVS     r2,#0x53
000012  00d2              LSLS     r2,r2,#3
000014  604a              STR      r2,[r1,#4]
000016  0062              LSLS     r2,r4,#1
000018  608a              STR      r2,[r1,#8]
00001a  604a              STR      r2,[r1,#4]
00001c  604c              STR      r4,[r1,#4]
;;;543    	LCD_24S_Write_Command(0x53);
;;;544    	LCD_24S_Write_Data(0x28 | (on ? 4 : 0));
00001e  2800              CMP      r0,#0
000020  d000              BEQ      |L8.36|
000022  2004              MOVS     r0,#4
                  |L8.36|
000024  608b              STR      r3,[r1,#8]
000026  3028              ADDS     r0,r0,#0x28
000028  00c0              LSLS     r0,r0,#3
00002a  6048              STR      r0,[r1,#4]
00002c  608a              STR      r2,[r1,#8]
00002e  604a              STR      r2,[r1,#4]
;;;545    }
000030  bc10              POP      {r4}
000032  4770              BX       lr
;;;546    
                          ENDP

                  |L8.52|
                          DCD      0xf80ff080

                          AREA ||i.LCD_Set_Backlight_Brightness||, CODE, READONLY, ALIGN=2

                  LCD_Set_Backlight_Brightness PROC
;;;159    /* Set backlight brightness for LCD via duty cycle. */
;;;160    void LCD_Set_Backlight_Brightness(uint32_t brightness_percent) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;161    	if (brightness_percent > 100)
;;;162    		brightness_percent = 100;
000004  2864              CMP      r0,#0x64
000006  d80e              BHI      |L9.38|
                  |L9.8|
;;;163    	PWM_Set_Value(LCD_BL_TPM, LCD_BL_TPM_CHANNEL,
000008  4809              LDR      r0,|L9.48|
00000a  4908              LDR      r1,|L9.44|
00000c  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00000e  f7fffffe          BL       __aeabi_uidivmod
000012  4360              MULS     r0,r4,r0
000014  2164              MOVS     r1,#0x64
000016  f7fffffe          BL       __aeabi_uidivmod
00001a  b282              UXTH     r2,r0
00001c  2100              MOVS     r1,#0
00001e  4805              LDR      r0,|L9.52|
000020  f7fffffe          BL       PWM_Set_Value
;;;164    								(brightness_percent * LCD_BL_PERIOD) / 100);
;;;165    }
000024  bd10              POP      {r4,pc}
                  |L9.38|
000026  2464              MOVS     r4,#0x64              ;162
000028  e7ee              B        |L9.8|
;;;166    
                          ENDP

00002a  0000              DCW      0x0000
                  |L9.44|
                          DCD      0x00013880
                  |L9.48|
                          DCD      SystemCoreClock
                  |L9.52|
                          DCD      0x40039000

                          AREA ||i.LCD_Set_Controller_Brightness||, CODE, READONLY, ALIGN=2

                  LCD_Set_Controller_Brightness PROC
;;;547    /* Set brightness via LCD controller. */
;;;548    void LCD_Set_Controller_Brightness(uint8_t brightness) {
000000  b410              PUSH     {r4}
000002  2401              MOVS     r4,#1
000004  4909              LDR      r1,|L10.44|
000006  0324              LSLS     r4,r4,#12
000008  608c              STR      r4,[r1,#8]
00000a  23ff              MOVS     r3,#0xff
00000c  00db              LSLS     r3,r3,#3
00000e  608b              STR      r3,[r1,#8]
000010  2251              MOVS     r2,#0x51
000012  00d2              LSLS     r2,r2,#3
000014  604a              STR      r2,[r1,#4]
000016  0062              LSLS     r2,r4,#1
000018  608a              STR      r2,[r1,#8]
00001a  604a              STR      r2,[r1,#4]
00001c  604c              STR      r4,[r1,#4]
00001e  608b              STR      r3,[r1,#8]
000020  00c0              LSLS     r0,r0,#3
000022  6048              STR      r0,[r1,#4]
000024  608a              STR      r2,[r1,#8]
000026  604a              STR      r2,[r1,#4]
;;;549    	LCD_24S_Write_Command(0x51);
;;;550    	LCD_24S_Write_Data(brightness);
;;;551    }
000028  bc10              POP      {r4}
00002a  4770              BX       lr
;;;552    
                          ENDP

                  |L10.44|
                          DCD      0xf80ff080

                          AREA ||i.LCD_Start_Rectangle||, CODE, READONLY, ALIGN=2

                  LCD_Start_Rectangle PROC
;;;365    */
;;;366    uint32_t LCD_Start_Rectangle(PT_T * p1, PT_T * p2) {
000000  b4f0              PUSH     {r4-r7}
;;;367    	uint32_t n;
;;;368    	uint16_t c_min, c_max, r_min, r_max;
;;;369    
;;;370    	// Find bounds of rectangle
;;;371    	c_min = MIN(p1->X, p2->X);
000002  6802              LDR      r2,[r0,#0]
000004  680b              LDR      r3,[r1,#0]
000006  429a              CMP      r2,r3
000008  d201              BCS      |L11.14|
00000a  4614              MOV      r4,r2
00000c  e000              B        |L11.16|
                  |L11.14|
00000e  461c              MOV      r4,r3
                  |L11.16|
000010  b2a6              UXTH     r6,r4
;;;372    	c_max = MAX(p1->X, p2->X);
000012  429a              CMP      r2,r3
000014  d800              BHI      |L11.24|
000016  461a              MOV      r2,r3
                  |L11.24|
;;;373    
;;;374    	r_min = MIN(p1->Y, p2->Y);
000018  6840              LDR      r0,[r0,#4]
00001a  6849              LDR      r1,[r1,#4]
00001c  b295              UXTH     r5,r2                 ;372
00001e  4288              CMP      r0,r1
000020  d201              BCS      |L11.38|
000022  4602              MOV      r2,r0
000024  e000              B        |L11.40|
                  |L11.38|
000026  460a              MOV      r2,r1
                  |L11.40|
000028  b297              UXTH     r7,r2
;;;375    	r_max = MAX(p1->Y, p2->Y);
00002a  4288              CMP      r0,r1
00002c  d800              BHI      |L11.48|
00002e  4608              MOV      r0,r1
                  |L11.48|
000030  b284              UXTH     r4,r0
;;;376    
;;;377    	// Clip to display size
;;;378    	c_max = MIN(c_max, LCD_WIDTH - 1);
000032  2def              CMP      r5,#0xef
000034  d300              BCC      |L11.56|
000036  25ef              MOVS     r5,#0xef
                  |L11.56|
;;;379    	r_max = MIN(r_max, LCD_HEIGHT - 1);
000038  20ff              MOVS     r0,#0xff
00003a  3040              ADDS     r0,r0,#0x40
00003c  4284              CMP      r4,r0
00003e  d300              BCC      |L11.66|
000040  4604              MOV      r4,r0
                  |L11.66|
;;;380    
;;;381    	n = (c_max - c_min + 1) * (r_max - r_min + 1);
000042  1ba8              SUBS     r0,r5,r6
000044  1be1              SUBS     r1,r4,r7
000046  1c40              ADDS     r0,r0,#1
000048  1c49              ADDS     r1,r1,#1
00004a  4348              MULS     r0,r1,r0
00004c  4684              MOV      r12,r0
;;;382    	if (n > 0) {
00004e  d053              BEQ      |L11.248|
000050  2001              MOVS     r0,#1
000052  492b              LDR      r1,|L11.256|
000054  0300              LSLS     r0,r0,#12
000056  6088              STR      r0,[r1,#8]
000058  23ff              MOVS     r3,#0xff
00005a  00db              LSLS     r3,r3,#3
00005c  608b              STR      r3,[r1,#8]
00005e  20ff              MOVS     r0,#0xff
000060  3051              ADDS     r0,r0,#0x51
000062  6048              STR      r0,[r1,#4]
000064  2201              MOVS     r2,#1
000066  0352              LSLS     r2,r2,#13
000068  608a              STR      r2,[r1,#8]
00006a  604a              STR      r2,[r1,#4]
00006c  1050              ASRS     r0,r2,#1
00006e  6048              STR      r0,[r1,#4]
;;;383    		// Enable access to full screen, reset write pointer to origin
;;;384    		LCD_24S_Write_Command(0x002A);	//column address set
;;;385    		LCD_24S_Write_Data(c_min >> 8);
000070  0a30              LSRS     r0,r6,#8
000072  608b              STR      r3,[r1,#8]
000074  00c0              LSLS     r0,r0,#3
000076  6048              STR      r0,[r1,#4]
000078  608a              STR      r2,[r1,#8]
00007a  604a              STR      r2,[r1,#4]
;;;386    		LCD_24S_Write_Data(c_min & 0xff);	//start 
00007c  0630              LSLS     r0,r6,#24
00007e  608b              STR      r3,[r1,#8]
000080  0d40              LSRS     r0,r0,#21
000082  6048              STR      r0,[r1,#4]
000084  608a              STR      r2,[r1,#8]
000086  604a              STR      r2,[r1,#4]
;;;387    		LCD_24S_Write_Data(c_max >> 8);
000088  0a28              LSRS     r0,r5,#8
00008a  608b              STR      r3,[r1,#8]
00008c  00c0              LSLS     r0,r0,#3
00008e  6048              STR      r0,[r1,#4]
000090  608a              STR      r2,[r1,#8]
000092  604a              STR      r2,[r1,#4]
;;;388    		LCD_24S_Write_Data(c_max & 0xff);	//end 
000094  0628              LSLS     r0,r5,#24
000096  608b              STR      r3,[r1,#8]
000098  0d40              LSRS     r0,r0,#21
00009a  6048              STR      r0,[r1,#4]
00009c  608a              STR      r2,[r1,#8]
00009e  604a              STR      r2,[r1,#4]
0000a0  1050              ASRS     r0,r2,#1
0000a2  6088              STR      r0,[r1,#8]
0000a4  608b              STR      r3,[r1,#8]
0000a6  20ff              MOVS     r0,#0xff
0000a8  3059              ADDS     r0,r0,#0x59
0000aa  6048              STR      r0,[r1,#4]
0000ac  608a              STR      r2,[r1,#8]
0000ae  604a              STR      r2,[r1,#4]
0000b0  1050              ASRS     r0,r2,#1
0000b2  6048              STR      r0,[r1,#4]
;;;389    		LCD_24S_Write_Command(0x002B);	//page address set
;;;390    		LCD_24S_Write_Data(r_min >> 8);
0000b4  0a38              LSRS     r0,r7,#8
0000b6  608b              STR      r3,[r1,#8]
0000b8  00c0              LSLS     r0,r0,#3
0000ba  6048              STR      r0,[r1,#4]
0000bc  608a              STR      r2,[r1,#8]
0000be  604a              STR      r2,[r1,#4]
;;;391    		LCD_24S_Write_Data(r_min & 0xff);	//start 
0000c0  0638              LSLS     r0,r7,#24
0000c2  608b              STR      r3,[r1,#8]
0000c4  0d40              LSRS     r0,r0,#21
0000c6  6048              STR      r0,[r1,#4]
0000c8  608a              STR      r2,[r1,#8]
0000ca  604a              STR      r2,[r1,#4]
;;;392    		LCD_24S_Write_Data(r_max >> 8);
0000cc  0a20              LSRS     r0,r4,#8
0000ce  608b              STR      r3,[r1,#8]
0000d0  00c0              LSLS     r0,r0,#3
0000d2  6048              STR      r0,[r1,#4]
0000d4  608a              STR      r2,[r1,#8]
0000d6  604a              STR      r2,[r1,#4]
;;;393    		LCD_24S_Write_Data(r_max & 0xff);	//end 
0000d8  0620              LSLS     r0,r4,#24
0000da  608b              STR      r3,[r1,#8]
0000dc  0d40              LSRS     r0,r0,#21
0000de  6048              STR      r0,[r1,#4]
0000e0  608a              STR      r2,[r1,#8]
0000e2  604a              STR      r2,[r1,#4]
0000e4  1050              ASRS     r0,r2,#1
0000e6  6088              STR      r0,[r1,#8]
0000e8  608b              STR      r3,[r1,#8]
0000ea  20ff              MOVS     r0,#0xff
0000ec  3061              ADDS     r0,r0,#0x61
0000ee  6048              STR      r0,[r1,#4]
0000f0  608a              STR      r2,[r1,#8]
0000f2  604a              STR      r2,[r1,#4]
0000f4  1050              ASRS     r0,r2,#1
0000f6  6048              STR      r0,[r1,#4]
                  |L11.248|
;;;394    
;;;395    		// Memory Write 0x2c
;;;396    		LCD_24S_Write_Command(0x002c);
;;;397    	}
;;;398    	return n;
;;;399    }
0000f8  bcf0              POP      {r4-r7}
0000fa  4660              MOV      r0,r12                ;398
0000fc  4770              BX       lr
;;;400    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L11.256|
                          DCD      0xf80ff080

                          AREA ||i.LCD_Write_Rectangle_N_Quad_Pixel_Components||, CODE, READONLY, ALIGN=2

                  LCD_Write_Rectangle_N_Quad_Pixel_Components PROC
;;;484    
;;;485    void LCD_Write_Rectangle_N_Quad_Pixel_Components(uint32_t * aR,
000000  b5ff              PUSH     {r0-r7,lr}
000002  4a1b              LDR      r2,|L12.112|
000004  2501              MOVS     r5,#1
;;;486    																								 uint32_t * aG,
;;;487    																								 uint32_t * aB,
;;;488    																								 int32_t n) {
000006  468e              MOV      lr,r1
000008  4684              MOV      r12,r0
00000a  036d              LSLS     r5,r5,#13
                  |L12.12|
;;;489    	uint8_t b1, b2;
;;;490    #if 1
;;;491    	uint8_t i;
;;;492    #else
;;;493    	uint32_t i;
;;;494    #endif
;;;495    	uint32_t R, G, B, GH, GL, W1, W2;
;;;496    
;;;497    	do {
;;;498    		R = *aR++;
00000c  4660              MOV      r0,r12
00000e  c808              LDM      r0!,{r3}
000010  4684              MOV      r12,r0
;;;499    		G = *aG++;
000012  4670              MOV      r0,lr
000014  c810              LDM      r0!,{r4}
000016  4686              MOV      lr,r0
;;;500    		B = *aB++;
000018  9802              LDR      r0,[sp,#8]
;;;501    
;;;502    		R &= 0xf8f8f8f8;
;;;503    		GH = (G & 0xe0e0e0e0) >> 5;
00001a  4e17              LDR      r6,|L12.120|
00001c  c802              LDM      r0!,{r1}              ;500
00001e  9002              STR      r0,[sp,#8]            ;502
000020  4814              LDR      r0,|L12.116|
;;;504    		GL = (G & 0x1c1c1c1c) >> 2;
;;;505    		B = (B & 0xf8f8f8f8) >> 3;
000022  08c9              LSRS     r1,r1,#3
000024  4003              ANDS     r3,r3,r0              ;502
000026  0960              LSRS     r0,r4,#5              ;503
000028  08a4              LSRS     r4,r4,#2              ;504
00002a  4030              ANDS     r0,r0,r6              ;503
00002c  4034              ANDS     r4,r4,r6              ;504
00002e  4e13              LDR      r6,|L12.124|
;;;506    
;;;507    		W1 = R | GH;
000030  4303              ORRS     r3,r3,r0
000032  4031              ANDS     r1,r1,r6              ;505
;;;508    		W2 = GL | B;
000034  430c              ORRS     r4,r4,r1
;;;509    #if DEBUG_LCD_OPS
;;;510    		FPTB->PSOR = MASK(DBG_LCD_WR_PIXELS_POS);
;;;511    #endif
;;;512    		for (i = 0; i < 4; i++) {
000036  2600              MOVS     r6,#0
000038  21ff              MOVS     r1,#0xff
00003a  00c9              LSLS     r1,r1,#3
                  |L12.60|
;;;513    			b1 = W1 & 0x000000ff;
00003c  061f              LSLS     r7,r3,#24
;;;514    			b2 = W2 & 0x000000ff;
00003e  0620              LSLS     r0,r4,#24
000040  6091              STR      r1,[r2,#8]
000042  0d7f              LSRS     r7,r7,#21
000044  6057              STR      r7,[r2,#4]
000046  6095              STR      r5,[r2,#8]
000048  6055              STR      r5,[r2,#4]
00004a  6091              STR      r1,[r2,#8]
00004c  0d47              LSRS     r7,r0,#21
00004e  6057              STR      r7,[r2,#4]
000050  6095              STR      r5,[r2,#8]
000052  6055              STR      r5,[r2,#4]
;;;515    			LCD_24S_Write_Data(b1);
;;;516    			LCD_24S_Write_Data(b2);
;;;517    #if ENABLE_PIXEL_HASH
;;;518    		// Update pixel_data_hash
;;;519    		pixel_data_hash ^= b1 ^ b2;
;;;520    		if (pixel_data_hash & 0x01) {
;;;521    			pixel_data_hash >>= 1;
;;;522    			pixel_data_hash |= 0x80000000;
;;;523    		} else {
;;;524    			pixel_data_hash >>= 1;
;;;525    		}
;;;526    #endif
;;;527    			W1 >>= 8;
;;;528    			W2 >>= 8;
000054  1c76              ADDS     r6,r6,#1
000056  0a1b              LSRS     r3,r3,#8              ;527
000058  0a24              LSRS     r4,r4,#8
00005a  b2f6              UXTB     r6,r6                 ;512
00005c  2e04              CMP      r6,#4                 ;512
00005e  d3ed              BCC      |L12.60|
;;;529    		}
;;;530    #if DEBUG_LCD_OPS
;;;531    		FPTB->PCOR = MASK(DBG_LCD_WR_PIXELS_POS);
;;;532    #endif
;;;533    	} while (--n > 0);
000060  9803              LDR      r0,[sp,#0xc]
000062  1e40              SUBS     r0,r0,#1
000064  9003              STR      r0,[sp,#0xc]
000066  2800              CMP      r0,#0
000068  dcd0              BGT      |L12.12|
;;;534    }
00006a  b004              ADD      sp,sp,#0x10
00006c  bdf0              POP      {r4-r7,pc}
;;;535    
                          ENDP

00006e  0000              DCW      0x0000
                  |L12.112|
                          DCD      0xf80ff080
                  |L12.116|
                          DCD      0xf8f8f8f8
                  |L12.120|
                          DCD      0x07070707
                  |L12.124|
                          DCD      0x1f1f1f1f

                          AREA ||i.LCD_Write_Rectangle_Pixel||, CODE, READONLY, ALIGN=2

                  LCD_Write_Rectangle_Pixel PROC
;;;402    have called LCD_Write_Rectangle before calling this function. */
;;;403    void LCD_Write_Rectangle_Pixel(COLOR_T * color, unsigned int count) {
000000  b470              PUSH     {r4-r6}
;;;404    	uint8_t b1, b2;
;;;405    
;;;406    	// 16 bpp, 5-6-5. Assume color channel data is left-aligned
;;;407    	b1 = (color->R & 0xf8) | ((color->G & 0xe0) >> 5);
000002  7802              LDRB     r2,[r0,#0]
000004  7843              LDRB     r3,[r0,#1]
000006  08d2              LSRS     r2,r2,#3
000008  00d2              LSLS     r2,r2,#3
00000a  095c              LSRS     r4,r3,#5
00000c  4322              ORRS     r2,r2,r4
;;;408    	b2 = ((color->G & 0x1c) << 3) | ((color->B & 0xf8) >> 3);
00000e  241c              MOVS     r4,#0x1c
000010  7880              LDRB     r0,[r0,#2]
000012  4023              ANDS     r3,r3,r4
000014  00dc              LSLS     r4,r3,#3
000016  08c0              LSRS     r0,r0,#3
000018  4304              ORRS     r4,r4,r0
00001a  1e49              SUBS     r1,r1,#1
00001c  d310              BCC      |L13.64|
00001e  00d5              LSLS     r5,r2,#3              ;403
000020  23ff              MOVS     r3,#0xff              ;403
000022  2201              MOVS     r2,#1                 ;403
000024  00db              LSLS     r3,r3,#3              ;403
000026  4807              LDR      r0,|L13.68|
000028  0352              LSLS     r2,r2,#13             ;403
00002a  00e4              LSLS     r4,r4,#3              ;403
                  |L13.44|
00002c  6083              STR      r3,[r0,#8]            ;403
00002e  6045              STR      r5,[r0,#4]            ;403
000030  6082              STR      r2,[r0,#8]            ;403
000032  6042              STR      r2,[r0,#4]            ;403
000034  6083              STR      r3,[r0,#8]            ;403
000036  6044              STR      r4,[r0,#4]            ;403
000038  6082              STR      r2,[r0,#8]            ;403
00003a  6042              STR      r2,[r0,#4]            ;403
00003c  1e49              SUBS     r1,r1,#1              ;403
;;;409    	while (count--) {
00003e  d2f5              BCS      |L13.44|
                  |L13.64|
;;;410    		LCD_24S_Write_Data(b1);
;;;411    		LCD_24S_Write_Data(b2);
;;;412    #if ENABLE_PIXEL_HASH
;;;413    		// Update pixel_data_hash
;;;414    		pixel_data_hash ^= b1 ^ b2;
;;;415    		if (pixel_data_hash & 0x01) {
;;;416    			pixel_data_hash >>= 1;
;;;417    			pixel_data_hash |= 0x80000000;
;;;418    		} else {
;;;419    			pixel_data_hash >>= 1;
;;;420    		}
;;;421    #endif
;;;422    	}
;;;423    }
000040  bc70              POP      {r4-r6}
000042  4770              BX       lr
;;;424    
                          ENDP

                  |L13.68|
                          DCD      0xf80ff080

                          AREA ||i.LCD_Write_Rectangle_Quad_Pixel_Components||, CODE, READONLY, ALIGN=2

                  LCD_Write_Rectangle_Quad_Pixel_Components PROC
;;;450    have called LCD_Write_Rectangle before calling this function. */
;;;451    void LCD_Write_Rectangle_Quad_Pixel_Components(uint32_t * aR,
000000  b4f0              PUSH     {r4-r7}
;;;452    																							 uint32_t * aG,
;;;453    																							 uint32_t * aB) {
;;;454    	uint8_t b1, b2, i;
;;;455    	uint32_t R, G, B;
;;;456    
;;;457    	R = *aR;
;;;458    	G = *aG;
;;;459    	B = *aB;
000002  680b              LDR      r3,[r1,#0]
000004  6800              LDR      r0,[r0,#0]            ;457
000006  4913              LDR      r1,|L14.84|
000008  6816              LDR      r6,[r2,#0]            ;457
;;;460    
;;;461    	for (i = 0; i < 4; i++) {
00000a  2400              MOVS     r4,#0
                  |L14.12|
;;;462    		// 16 bpp, 5-6-5. Assume color channel data is left-aligned
;;;463    		b1 = (R & 0x000000f8) | ((G & 0x000000e0) >> 5);
00000c  22f8              MOVS     r2,#0xf8
00000e  061d              LSLS     r5,r3,#24
000010  4002              ANDS     r2,r2,r0
000012  0f6d              LSRS     r5,r5,#29
000014  432a              ORRS     r2,r2,r5
;;;464    		b2 = ((G & 0x0000001c) << 3) | ((B & 0x000000f8) >> 3);
000016  251c              MOVS     r5,#0x1c
000018  401d              ANDS     r5,r5,r3
00001a  0637              LSLS     r7,r6,#24
00001c  00ed              LSLS     r5,r5,#3
00001e  0eff              LSRS     r7,r7,#27
000020  433d              ORRS     r5,r5,r7
000022  27ff              MOVS     r7,#0xff
000024  00ff              LSLS     r7,r7,#3
000026  608f              STR      r7,[r1,#8]
000028  00d2              LSLS     r2,r2,#3
00002a  604a              STR      r2,[r1,#4]
00002c  2201              MOVS     r2,#1
00002e  0352              LSLS     r2,r2,#13
000030  608a              STR      r2,[r1,#8]
000032  604a              STR      r2,[r1,#4]
000034  608f              STR      r7,[r1,#8]
000036  00ed              LSLS     r5,r5,#3
000038  604d              STR      r5,[r1,#4]
00003a  608a              STR      r2,[r1,#8]
00003c  604a              STR      r2,[r1,#4]
;;;465    		LCD_24S_Write_Data(b1);
;;;466    		LCD_24S_Write_Data(b2);
;;;467    #if ENABLE_PIXEL_HASH
;;;468    		// Update pixel_data_hash
;;;469    		pixel_data_hash ^= b1 ^ b2;
;;;470    		if (pixel_data_hash & 0x01) {
;;;471    			pixel_data_hash >>= 1;
;;;472    			pixel_data_hash |= 0x80000000;
;;;473    		} else {
;;;474    			pixel_data_hash >>= 1;
;;;475    		}
;;;476    #endif
;;;477    		if (i < 3) {
00003e  2c03              CMP      r4,#3
000040  d202              BCS      |L14.72|
;;;478    			R >>= 8;
000042  0a00              LSRS     r0,r0,#8
;;;479    			G >>= 8;
000044  0a1b              LSRS     r3,r3,#8
;;;480    			B >>= 8;
000046  0a36              LSRS     r6,r6,#8
                  |L14.72|
000048  1c64              ADDS     r4,r4,#1
00004a  b2e4              UXTB     r4,r4                 ;461
00004c  2c04              CMP      r4,#4                 ;461
00004e  d3dd              BCC      |L14.12|
;;;481    		}
;;;482    	}
;;;483    }
000050  bcf0              POP      {r4-r7}
000052  4770              BX       lr
;;;484    
                          ENDP

                  |L14.84|
                          DCD      0xf80ff080

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  Init_Seq_ILI9341
000000  01280111          DCB      0x01,0x28,0x01,0x11
000004  020001cb          DCB      0x02,0x00,0x01,0xcb
000008  0239022c          DCB      0x02,0x39,0x02,0x2c
00000c  02000234          DCB      0x02,0x00,0x02,0x34
000010  020201cf          DCB      0x02,0x02,0x01,0xcf
000014  02000281          DCB      0x02,0x00,0x02,0x81
000018  023001e8          DCB      0x02,0x30,0x01,0xe8
00001c  02850201          DCB      0x02,0x85,0x02,0x01
000020  027901ea          DCB      0x02,0x79,0x01,0xea
000024  02000200          DCB      0x02,0x00,0x02,0x00
000028  01ed0264          DCB      0x01,0xed,0x02,0x64
00002c  02030212          DCB      0x02,0x03,0x02,0x12
000030  028101f7          DCB      0x02,0x81,0x01,0xf7
000034  022001c0          DCB      0x02,0x20,0x01,0xc0
000038  02260204          DCB      0x02,0x26,0x02,0x04
00003c  01c10211          DCB      0x01,0xc1,0x02,0x11
000040  01c50235          DCB      0x01,0xc5,0x02,0x35
000044  023e01c7          DCB      0x02,0x3e,0x01,0xc7
000048  02be0136          DCB      0x02,0xbe,0x01,0x36
00004c  020801b1          DCB      0x02,0x08,0x01,0xb1
000050  02000210          DCB      0x02,0x00,0x02,0x10
000054  01b6020a          DCB      0x01,0xb6,0x02,0x0a
000058  02a2013a          DCB      0x02,0xa2,0x01,0x3a
00005c  025501f2          DCB      0x02,0x55,0x01,0xf2
000060  02020126          DCB      0x02,0x02,0x01,0x26
000064  0201012a          DCB      0x02,0x01,0x01,0x2a
000068  02000200          DCB      0x02,0x00,0x02,0x00
00006c  020002ef          DCB      0x02,0x00,0x02,0xef
000070  012b0200          DCB      0x01,0x2b,0x02,0x00
000074  02000201          DCB      0x02,0x00,0x02,0x01
000078  023f0129          DCB      0x02,0x3f,0x01,0x29
00007c  0000              DCB      0x00,0x00

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  Init_Seq_ST7789
000000  01110136          DCB      0x01,0x11,0x01,0x36
000004  0200013a          DCB      0x02,0x00,0x01,0x3a
000008  025501b2          DCB      0x02,0x55,0x01,0xb2
00000c  020c020c          DCB      0x02,0x0c,0x02,0x0c
000010  02000233          DCB      0x02,0x00,0x02,0x33
000014  023301b7          DCB      0x02,0x33,0x01,0xb7
000018  023501bb          DCB      0x02,0x35,0x01,0xbb
00001c  022b01c0          DCB      0x02,0x2b,0x01,0xc0
000020  022c01c2          DCB      0x02,0x2c,0x01,0xc2
000024  020102ff          DCB      0x02,0x01,0x02,0xff
000028  01c30211          DCB      0x01,0xc3,0x02,0x11
00002c  01c40220          DCB      0x01,0xc4,0x02,0x20
000030  01c6020f          DCB      0x01,0xc6,0x02,0x0f
000034  01d002a4          DCB      0x01,0xd0,0x02,0xa4
000038  02a101e0          DCB      0x02,0xa1,0x01,0xe0
00003c  02d00200          DCB      0x02,0xd0,0x02,0x00
000040  0205020e          DCB      0x02,0x05,0x02,0x0e
000044  0215020d          DCB      0x02,0x15,0x02,0x0d
000048  02370243          DCB      0x02,0x37,0x02,0x43
00004c  02470209          DCB      0x02,0x47,0x02,0x09
000050  02150212          DCB      0x02,0x15,0x02,0x12
000054  02160219          DCB      0x02,0x16,0x02,0x19
000058  01e102d0          DCB      0x01,0xe1,0x02,0xd0
00005c  02000205          DCB      0x02,0x00,0x02,0x05
000060  020d020c          DCB      0x02,0x0d,0x02,0x0c
000064  0206022d          DCB      0x02,0x06,0x02,0x2d
000068  02440240          DCB      0x02,0x44,0x02,0x40
00006c  020e021c          DCB      0x02,0x0e,0x02,0x1c
000070  02180216          DCB      0x02,0x18,0x02,0x16
000074  0219012a          DCB      0x02,0x19,0x01,0x2a
000078  02000200          DCB      0x02,0x00,0x02,0x00
00007c  020002ef          DCB      0x02,0x00,0x02,0xef
000080  012b0200          DCB      0x01,0x2b,0x02,0x00
000084  02000201          DCB      0x02,0x00,0x02,0x01
000088  023f0129          DCB      0x02,0x3f,0x01,0x29
00008c  0000              DCB      0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  pixel_data_hash
                          DCD      0x00000000

                          AREA ||i.LCD_Write_Rectangle_Pixel_Components||, COMGROUP=LCD_Write_Rectangle_Pixel_Components, CODE, READONLY, ALIGN=2

                  LCD_Write_Rectangle_Pixel_Components PROC
;;;426    have called LCD_Write_Rectangle before calling this function. */
;;;427    __forceinline void LCD_Write_Rectangle_Pixel_Components(uint8_t R,
000000  08c3              LSRS     r3,r0,#3
;;;428    																												uint8_t G,
;;;429    																												uint8_t B) {
;;;430    	uint8_t b1, b2;
;;;431    
;;;432    	// 16 bpp, 5-6-5. Assume color channel data is left-aligned
;;;433    	b1 = (R & 0xf8) | ((G & 0xe0) >> 5);
000002  00db              LSLS     r3,r3,#3
000004  0948              LSRS     r0,r1,#5
000006  4303              ORRS     r3,r3,r0
;;;434    	b2 = ((G & 0x1c) << 3) | ((B & 0xf8) >> 3);
000008  201c              MOVS     r0,#0x1c
00000a  4001              ANDS     r1,r1,r0
00000c  b410              PUSH     {r4}                  ;429
00000e  00c9              LSLS     r1,r1,#3
000010  08d0              LSRS     r0,r2,#3
000012  4301              ORRS     r1,r1,r0
000014  24ff              MOVS     r4,#0xff
000016  4808              LDR      r0,|L95.56|
000018  00e4              LSLS     r4,r4,#3
00001a  6084              STR      r4,[r0,#8]
00001c  00da              LSLS     r2,r3,#3
00001e  6042              STR      r2,[r0,#4]
000020  2201              MOVS     r2,#1
000022  0352              LSLS     r2,r2,#13
000024  6082              STR      r2,[r0,#8]
000026  6042              STR      r2,[r0,#4]
000028  6084              STR      r4,[r0,#8]
00002a  00c9              LSLS     r1,r1,#3
00002c  6041              STR      r1,[r0,#4]
00002e  6082              STR      r2,[r0,#8]
000030  6042              STR      r2,[r0,#4]
;;;435    	LCD_24S_Write_Data(b1);
;;;436    	LCD_24S_Write_Data(b2);
;;;437    #if ENABLE_PIXEL_HASH
;;;438    		// Update pixel_data_hash
;;;439    		pixel_data_hash ^= b1 ^ b2;
;;;440    		if (pixel_data_hash & 0x01) {
;;;441    			pixel_data_hash >>= 1;
;;;442    			pixel_data_hash |= 0x80000000;
;;;443    		} else {
;;;444    			pixel_data_hash >>= 1;
;;;445    		}
;;;446    #endif
;;;447    }
000032  bc10              POP      {r4}
000034  4770              BX       lr
;;;448    
                          ENDP

000036  0000              DCW      0x0000
                  |L95.56|
                          DCD      0xf80ff080

;*** Start embedded assembler ***

#line 1 "Source\\LCD\\ST7789.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_ST7789_c_3d2d791d____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_ST7789_c_3d2d791d____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_ST7789_c_3d2d791d____REVSH|
#line 462
|__asm___8_ST7789_c_3d2d791d____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
