; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\touchscreen.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\touchscreen.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\Include -I.\Source\Profiler -I.\Source\LCD -I.\Source\FS -I.\Source\ulibSD -I.\RTE\Device\MKL25Z128xxx4 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.15.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DMKL25Z128xxx4 --omf_browse=.\objects\touchscreen.crf Source\LCD\touchscreen.c]
                          THUMB

                          AREA ||i.Init_ADC||, CODE, READONLY, ALIGN=2

                  Init_ADC PROC
;;;25     
;;;26     void Init_ADC(void) {
000000  4805              LDR      r0,|L1.24|
;;;27     	
;;;28     	SIM->SCGC6 |= SIM_SCGC6_ADC0_MASK; 
000002  6bc1              LDR      r1,[r0,#0x3c]
000004  2201              MOVS     r2,#1
000006  06d2              LSLS     r2,r2,#27
000008  4311              ORRS     r1,r1,r2
00000a  63c1              STR      r1,[r0,#0x3c]
;;;29     	ADC0->CFG1 = 0x9C; // 16 bit
00000c  4803              LDR      r0,|L1.28|
00000e  219c              MOVS     r1,#0x9c
000010  6081              STR      r1,[r0,#8]
;;;30     	ADC0->SC2 = 0;
000012  2100              MOVS     r1,#0
000014  6201              STR      r1,[r0,#0x20]
;;;31     }
000016  4770              BX       lr
;;;32     
                          ENDP

                  |L1.24|
                          DCD      0x40048000
                  |L1.28|
                          DCD      0x4003b000

                          AREA ||i.LCD_TS_Blocking_Read||, CODE, READONLY, ALIGN=1

                  LCD_TS_Blocking_Read PROC
;;;156    
;;;157    void LCD_TS_Blocking_Read(PT_T * position) {
000000  b510              PUSH     {r4,lr}
000002  b082              SUB      sp,sp,#8
000004  4604              MOV      r4,r0
                  |L2.6|
;;;158    	PT_T temp;
;;;159    	// Wait for screen press
;;;160    	while (LCD_TS_Read(&temp) == 0)
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       LCD_TS_Read
00000c  2800              CMP      r0,#0
00000e  d0fa              BEQ      |L2.6|
;;;161    		;
;;;162    	// Wait for screen release
;;;163    	while (LCD_TS_Read(&temp) == 1) {
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       LCD_TS_Read
000016  2801              CMP      r0,#1
000018  d108              BNE      |L2.44|
                  |L2.26|
;;;164    		position->X = temp.X;
00001a  9800              LDR      r0,[sp,#0]
;;;165    		position->Y = temp.Y;
00001c  6020              STR      r0,[r4,#0]
00001e  9801              LDR      r0,[sp,#4]
000020  6060              STR      r0,[r4,#4]            ;163
000022  4668              MOV      r0,sp                 ;163
000024  f7fffffe          BL       LCD_TS_Read
000028  2801              CMP      r0,#1                 ;163
00002a  d0f6              BEQ      |L2.26|
                  |L2.44|
;;;166    	}
;;;167    	return;
;;;168    }
00002c  b002              ADD      sp,sp,#8
00002e  bd10              POP      {r4,pc}
;;;169    
                          ENDP


                          AREA ||i.LCD_TS_Calibrate||, CODE, READONLY, ALIGN=2

                  LCD_TS_Calibrate PROC
;;;224    /* Calibrate touchscreen. */
;;;225    void LCD_TS_Calibrate(void) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b085              SUB      sp,sp,#0x14
;;;226    	PT_T p, bp, p_bound;
;;;227    	uint32_t i;
;;;228    	
;;;229    	bp.X = COL_TO_X(0);
000004  2400              MOVS     r4,#0
;;;230    	bp.Y = ROW_TO_Y(3);
000006  4f39              LDR      r7,|L3.236|
000008  9402              STR      r4,[sp,#8]
00000a  7838              LDRB     r0,[r7,#0]  ; G_LCD_char_height
00000c  0041              LSLS     r1,r0,#1
00000e  1840              ADDS     r0,r0,r1
;;;231    
;;;232    	LCD_Text_PrintStr(&bp, "Calibrate TS");
000010  9003              STR      r0,[sp,#0xc]
000012  a137              ADR      r1,|L3.240|
000014  a802              ADD      r0,sp,#8
000016  f7fffffe          BL       LCD_Text_PrintStr
;;;233    	bp.X = COL_TO_X(0);
;;;234    	bp.Y = ROW_TO_Y(4);
00001a  9402              STR      r4,[sp,#8]
00001c  7838              LDRB     r0,[r7,#0]  ; G_LCD_char_height
;;;235    	LCD_Text_PrintStr(&bp, "by pressing each +");
00001e  a138              ADR      r1,|L3.256|
000020  0080              LSLS     r0,r0,#2              ;234
000022  9003              STR      r0,[sp,#0xc]
000024  a802              ADD      r0,sp,#8
000026  f7fffffe          BL       LCD_Text_PrintStr
;;;236    	
;;;237    	bp.X = COL_TO_X(0);
;;;238    	bp.Y = ROW_TO_Y(0);
00002a  9402              STR      r4,[sp,#8]
;;;239    	LCD_Text_PrintStr(&bp, "+");
00002c  a139              ADR      r1,|L3.276|
00002e  a802              ADD      r0,sp,#8
000030  9403              STR      r4,[sp,#0xc]
000032  f7fffffe          BL       LCD_Text_PrintStr
;;;240    	
;;;241    	p_bound.X = 0xffff;
000036  4c38              LDR      r4,|L3.280|
;;;242    	p_bound.Y = 0xffff;
;;;243    	for (i=0; i<TS_CALIB_SAMPLES; i++){
000038  2600              MOVS     r6,#0
00003a  4625              MOV      r5,r4                 ;242
                  |L3.60|
;;;244    		while (!LCD_TS_Read(&p))
00003c  4668              MOV      r0,sp
00003e  f7fffffe          BL       LCD_TS_Read
000042  2800              CMP      r0,#0
000044  d0fa              BEQ      |L3.60|
;;;245    			;
;;;246    		if (p.X < p_bound.X)
;;;247    			p_bound.X = p.X;
000046  9800              LDR      r0,[sp,#0]
000048  42a0              CMP      r0,r4
00004a  d800              BHI      |L3.78|
00004c  4604              MOV      r4,r0
                  |L3.78|
;;;248    		if (p.Y < p_bound.Y)
;;;249    			p_bound.Y = p.Y;
00004e  9801              LDR      r0,[sp,#4]
000050  42a8              CMP      r0,r5
000052  d800              BHI      |L3.86|
000054  4605              MOV      r5,r0
                  |L3.86|
000056  1c76              ADDS     r6,r6,#1
000058  2e0a              CMP      r6,#0xa
00005a  d3ef              BCC      |L3.60|
;;;250    	}
;;;251    	
;;;252    	LCD_TS_X_Offset = p_bound.X;
00005c  4e2f              LDR      r6,|L3.284|
;;;253    	LCD_TS_Y_Offset = p_bound.Y;
;;;254    	
;;;255    	TS_Min = p_bound;
00005e  6175              STR      r5,[r6,#0x14]  ; LCD_TS_Y_Offset
000060  4630              MOV      r0,r6
000062  60f4              STR      r4,[r6,#0xc]  ; LCD_TS_X_Offset
000064  61c5              STR      r5,[r0,#0x1c]  ; TS_Min
000066  6184              STR      r4,[r0,#0x18]  ; TS_Min
                  |L3.104|
;;;256    	
;;;257    	// Wait for release
;;;258    	while (LCD_TS_Read(&p))
000068  4668              MOV      r0,sp
00006a  f7fffffe          BL       LCD_TS_Read
00006e  2800              CMP      r0,#0
000070  d1fa              BNE      |L3.104|
;;;259    		;
;;;260    	
;;;261    	LCD_Erase();
000072  f7fffffe          BL       LCD_Erase
;;;262    
;;;263    	/*
;;;264    	bp.X = COL_TO_X(LCD_MAX_COLS-1);
;;;265    	bp.Y = ROW_TO_Y(LCD_MAX_ROWS-1);
;;;266    	*/
;;;267    	bp.X = LCD_WIDTH - CHAR_WIDTH - 1;
000076  482a              LDR      r0,|L3.288|
000078  21ef              MOVS     r1,#0xef
00007a  7800              LDRB     r0,[r0,#0]  ; G_LCD_char_width
00007c  1a08              SUBS     r0,r1,r0
;;;268    	bp.Y = LCD_HEIGHT - CHAR_HEIGHT - 1;
00007e  9002              STR      r0,[sp,#8]
000080  7839              LDRB     r1,[r7,#0]  ; G_LCD_char_height
000082  20ff              MOVS     r0,#0xff
000084  3040              ADDS     r0,r0,#0x40
000086  1a40              SUBS     r0,r0,r1
;;;269    	LCD_Text_PrintStr(&bp, "+");
000088  9003              STR      r0,[sp,#0xc]
00008a  a122              ADR      r1,|L3.276|
00008c  a802              ADD      r0,sp,#8
00008e  f7fffffe          BL       LCD_Text_PrintStr
;;;270    
;;;271    	p_bound.X = 0;
000092  2400              MOVS     r4,#0
;;;272    	p_bound.Y = 0;
000094  4625              MOV      r5,r4
;;;273    	for (i=0; i<TS_CALIB_SAMPLES; i++){
000096  4627              MOV      r7,r4
                  |L3.152|
;;;274    		while (!LCD_TS_Read(&p))
000098  4668              MOV      r0,sp
00009a  f7fffffe          BL       LCD_TS_Read
00009e  2800              CMP      r0,#0
0000a0  d0fa              BEQ      |L3.152|
;;;275    			;
;;;276    		if (p.X > p_bound.X)
;;;277    			p_bound.X = p.X;
0000a2  9800              LDR      r0,[sp,#0]
0000a4  42a0              CMP      r0,r4
0000a6  d900              BLS      |L3.170|
0000a8  4604              MOV      r4,r0
                  |L3.170|
;;;278    		if (p.Y > p_bound.Y)
;;;279    			p_bound.Y = p.Y;
0000aa  9801              LDR      r0,[sp,#4]
0000ac  42a8              CMP      r0,r5
0000ae  d900              BLS      |L3.178|
0000b0  4605              MOV      r5,r0
                  |L3.178|
0000b2  1c7f              ADDS     r7,r7,#1
0000b4  2f0a              CMP      r7,#0xa
0000b6  d3ef              BCC      |L3.152|
;;;280    	}
;;;281    	
;;;282    	TS_Max = p_bound;
0000b8  4818              LDR      r0,|L3.284|
;;;283    	
;;;284    	LCD_TS_X_Scale = (p_bound.X-LCD_TS_X_Offset)/LCD_WIDTH;
0000ba  21f0              MOVS     r1,#0xf0
0000bc  6245              STR      r5,[r0,#0x24]  ; TS_Max
0000be  6204              STR      r4,[r0,#0x20]  ; TS_Max
0000c0  68f0              LDR      r0,[r6,#0xc]  ; LCD_TS_X_Offset
0000c2  1a20              SUBS     r0,r4,r0
0000c4  f7fffffe          BL       __aeabi_uidivmod
;;;285    	LCD_TS_Y_Scale = (p_bound.Y-LCD_TS_Y_Offset)/LCD_HEIGHT;
0000c8  60b0              STR      r0,[r6,#8]  ; LCD_TS_X_Scale
0000ca  6970              LDR      r0,[r6,#0x14]  ; LCD_TS_Y_Offset
0000cc  21ff              MOVS     r1,#0xff
0000ce  1a28              SUBS     r0,r5,r0
0000d0  3141              ADDS     r1,r1,#0x41
0000d2  f7fffffe          BL       __aeabi_uidivmod
0000d6  6130              STR      r0,[r6,#0x10]  ; LCD_TS_Y_Scale
                  |L3.216|
;;;286    
;;;287    	// Wait for release
;;;288    	while (LCD_TS_Read(&p))
0000d8  4668              MOV      r0,sp
0000da  f7fffffe          BL       LCD_TS_Read
0000de  2800              CMP      r0,#0
0000e0  d1fa              BNE      |L3.216|
;;;289    		;
;;;290    	
;;;291    	LCD_TS_Calibrated = 1;
0000e2  2001              MOVS     r0,#1
0000e4  7030              STRB     r0,[r6,#0]
;;;292    
;;;293    }
0000e6  b005              ADD      sp,sp,#0x14
0000e8  bdf0              POP      {r4-r7,pc}
                          ENDP

0000ea  0000              DCW      0x0000
                  |L3.236|
                          DCD      G_LCD_char_height
                  |L3.240|
0000f0  43616c69          DCB      "Calibrate TS",0
0000f4  62726174
0000f8  65205453
0000fc  00      
0000fd  00                DCB      0
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L3.256|
000100  62792070          DCB      "by pressing each +",0
000104  72657373
000108  696e6720
00010c  65616368
000110  202b00  
000113  00                DCB      0
                  |L3.276|
000114  2b00              DCB      "+",0
000116  00                DCB      0
000117  00                DCB      0
                  |L3.280|
                          DCD      0x0000ffff
                  |L3.284|
                          DCD      ||.data||
                  |L3.288|
                          DCD      G_LCD_char_width

                          AREA ||i.LCD_TS_Init||, CODE, READONLY, ALIGN=2

                  LCD_TS_Init PROC
;;;34     /* Initialize touchscreen hardware (ADC). */
;;;35     void LCD_TS_Init(void) {
000000  4805              LDR      r0,|L4.24|
000002  6bc1              LDR      r1,[r0,#0x3c]
000004  2201              MOVS     r2,#1
000006  06d2              LSLS     r2,r2,#27
000008  4311              ORRS     r1,r1,r2
00000a  63c1              STR      r1,[r0,#0x3c]
00000c  4803              LDR      r0,|L4.28|
00000e  219c              MOVS     r1,#0x9c
000010  6081              STR      r1,[r0,#8]
000012  2100              MOVS     r1,#0
000014  6201              STR      r1,[r0,#0x20]
;;;36     	// Configure ADC
;;;37     	Init_ADC();
;;;38     }
000016  4770              BX       lr
;;;39     
                          ENDP

                  |L4.24|
                          DCD      0x40048000
                  |L4.28|
                          DCD      0x4003b000

                          AREA ||i.LCD_TS_Read||, CODE, READONLY, ALIGN=2

                  LCD_TS_Read PROC
;;;44     position unchanged. */
;;;45     uint32_t LCD_TS_Read(PT_T * position) {
000000  b5f8              PUSH     {r3-r7,lr}
;;;46     	uint32_t x, y;
;;;47     	uint32_t b;
;;;48     
;;;49     	// Determine if screen was pressed.
;;;50     	// Set YU digital output at ground, 
;;;51     	LCD_TS_YU_PORT->PCR[LCD_TS_YU_BIT] &= ~PORT_PCR_MUX_MASK;
000002  4c60              LDR      r4,|L5.388|
000004  4606              MOV      r6,r0                 ;45
000006  69a0              LDR      r0,[r4,#0x18]
000008  2507              MOVS     r5,#7
00000a  022d              LSLS     r5,r5,#8
00000c  43a8              BICS     r0,r0,r5
00000e  61a0              STR      r0,[r4,#0x18]
;;;52     	LCD_TS_YU_PORT->PCR[LCD_TS_YU_BIT] |= PORT_PCR_MUX(1);
000010  69a1              LDR      r1,[r4,#0x18]
000012  15a0              ASRS     r0,r4,#22
000014  4301              ORRS     r1,r1,r0
000016  61a1              STR      r1,[r4,#0x18]
;;;53     	LCD_TS_YU_PT->PDDR |= MASK(LCD_TS_YU_BIT);
000018  495b              LDR      r1,|L5.392|
00001a  694a              LDR      r2,[r1,#0x14]
00001c  0381              LSLS     r1,r0,#14
00001e  4b5a              LDR      r3,|L5.392|
000020  430a              ORRS     r2,r2,r1
000022  615a              STR      r2,[r3,#0x14]
;;;54     	LCD_TS_YU_PT->PCOR = MASK(LCD_TS_YU_BIT); // Clear YU to 0
000024  6099              STR      r1,[r3,#8]
;;;55     
;;;56     	// Set YD + XL to open
;;;57     	// Set YD as ADC input
;;;58     	LCD_TS_YD_PORT->PCR[LCD_TS_YD_BIT] &= ~PORT_PCR_MUX_MASK;
000026  4959              LDR      r1,|L5.396|
000028  6809              LDR      r1,[r1,#0]
00002a  4a58              LDR      r2,|L5.396|
00002c  43a9              BICS     r1,r1,r5
00002e  6011              STR      r1,[r2,#0]
;;;59     	LCD_TS_YD_PORT->PCR[LCD_TS_YD_BIT] |= PORT_PCR_MUX(0);
000030  6811              LDR      r1,[r2,#0]
000032  6011              STR      r1,[r2,#0]
;;;60     
;;;61     	// Set XL as digital input
;;;62     	LCD_TS_XL_PORT->PCR[LCD_TS_XL_BIT] &= ~PORT_PCR_MUX_MASK;
000034  6851              LDR      r1,[r2,#4]
000036  43a9              BICS     r1,r1,r5
000038  6051              STR      r1,[r2,#4]
;;;63     	LCD_TS_XL_PORT->PCR[LCD_TS_XL_BIT] |= PORT_PCR_MUX(1);
00003a  6851              LDR      r1,[r2,#4]
00003c  4301              ORRS     r1,r1,r0
00003e  6051              STR      r1,[r2,#4]
;;;64     	LCD_TS_XL_PT->PDDR &= ~MASK(LCD_TS_XL_BIT); // Input
000040  4953              LDR      r1,|L5.400|
000042  694b              LDR      r3,[r1,#0x14]
000044  2202              MOVS     r2,#2
000046  4393              BICS     r3,r3,r2
000048  614b              STR      r3,[r1,#0x14]
;;;65     	
;;;66     	// Set XR as digital input with pull-up
;;;67     	LCD_TS_XR_PORT->PCR[LCD_TS_XR_BIT] &= ~PORT_PCR_MUX_MASK;
00004a  69e1              LDR      r1,[r4,#0x1c]
00004c  43a9              BICS     r1,r1,r5
00004e  61e1              STR      r1,[r4,#0x1c]
;;;68     	LCD_TS_XR_PORT->PCR[LCD_TS_XR_BIT] |= PORT_PCR_MUX(1);
000050  69e1              LDR      r1,[r4,#0x1c]
000052  4301              ORRS     r1,r1,r0
000054  61e1              STR      r1,[r4,#0x1c]
;;;69     	LCD_TS_XR_PORT->PCR[LCD_TS_XR_BIT] |= PORT_PCR_PE_MASK; // Enable pull-up
000056  69e0              LDR      r0,[r4,#0x1c]
000058  4310              ORRS     r0,r0,r2
00005a  61e0              STR      r0,[r4,#0x1c]
;;;70     	LCD_TS_XR_PT->PDDR &= ~MASK(LCD_TS_XR_BIT); // Input
00005c  484a              LDR      r0,|L5.392|
00005e  6940              LDR      r0,[r0,#0x14]
000060  0597              LSLS     r7,r2,#22
000062  4949              LDR      r1,|L5.392|
000064  43b8              BICS     r0,r0,r7
000066  6148              STR      r0,[r1,#0x14]
;;;71     		
;;;72     	// Wait for the inputs to settle
;;;73     	Delay(TS_DELAY);
000068  2001              MOVS     r0,#1
00006a  f7fffffe          BL       Delay
;;;74     	// Read XR input via digital
;;;75     	// if XR is 0, then screen is pressed
;;;76     	b = (LCD_TS_XR_PT->PDIR) & MASK(LCD_TS_XR_BIT);
00006e  4846              LDR      r0,|L5.392|
000070  6900              LDR      r0,[r0,#0x10]
000072  4238              TST      r0,r7
;;;77     	
;;;78     	if (b>0) {
000074  d001              BEQ      |L5.122|
;;;79     		// Screen not pressed
;;;80     		return 0;
000076  2000              MOVS     r0,#0
;;;81     	} else {
;;;82     		// Read X Position
;;;83     		// Configure inputs to ADC
;;;84     		LCD_TS_YU_PORT->PCR[LCD_TS_YU_BIT] &= ~PORT_PCR_MUX_MASK;
;;;85     		LCD_TS_YU_PORT->PCR[LCD_TS_YU_BIT] |= PORT_PCR_MUX(0);
;;;86     		LCD_TS_YD_PORT->PCR[LCD_TS_YD_BIT] &= ~PORT_PCR_MUX_MASK;
;;;87     		LCD_TS_YD_PORT->PCR[LCD_TS_YD_BIT] |= PORT_PCR_MUX(0);
;;;88     
;;;89     		
;;;90     		// Configure outputs to GPIO
;;;91     		LCD_TS_XL_PORT->PCR[LCD_TS_XL_BIT] &= ~PORT_PCR_MUX_MASK;
;;;92     		LCD_TS_XL_PORT->PCR[LCD_TS_XL_BIT] |= PORT_PCR_MUX(1);
;;;93     		LCD_TS_XR_PORT->PCR[LCD_TS_XR_BIT] &= ~PORT_PCR_MUX_MASK;
;;;94     		LCD_TS_XR_PORT->PCR[LCD_TS_XR_BIT] |= PORT_PCR_MUX(1);
;;;95     		LCD_TS_XL_PT->PDDR |= MASK(LCD_TS_XL_BIT); 
;;;96     		LCD_TS_XR_PT->PDDR |= MASK(LCD_TS_XR_BIT);
;;;97     		LCD_TS_XR_PT->PSOR = MASK(LCD_TS_XR_BIT); // Set XR to 1
;;;98     		LCD_TS_XL_PT->PCOR = MASK(LCD_TS_XL_BIT); // Clear XL to 0
;;;99     		// Wait for inputs to settle
;;;100    		Delay(TS_DELAY);
;;;101    		
;;;102    		// Read inputs
;;;103    		ADC0->SC1[0] = LCD_TS_YU_CHANNEL; // start conversion on channel YU
;;;104    		while (!(ADC0->SC1[0] & ADC_SC1_COCO_MASK))
;;;105    			;
;;;106    		yu = ADC0->R[0];
;;;107    		x = yu;
;;;108    
;;;109    		// Read Y Position
;;;110    		// Configure inputs to ADC
;;;111    		LCD_TS_XL_PORT->PCR[LCD_TS_XL_BIT] &= ~PORT_PCR_MUX_MASK;
;;;112    		LCD_TS_XL_PORT->PCR[LCD_TS_XL_BIT] |= PORT_PCR_MUX(0);
;;;113    		LCD_TS_XR_PORT->PCR[LCD_TS_XR_BIT] &= ~PORT_PCR_MUX_MASK;
;;;114    		LCD_TS_XR_PORT->PCR[LCD_TS_XR_BIT] |= PORT_PCR_MUX(0);
;;;115    		// Disable pull-up - just to be sure
;;;116    		LCD_TS_XR_PORT->PCR[LCD_TS_XR_BIT] &= ~PORT_PCR_PE_MASK; 
;;;117    		
;;;118    		// Configure outputs to GPIO
;;;119    		LCD_TS_YU_PORT->PCR[LCD_TS_YU_BIT] &= ~PORT_PCR_MUX_MASK;
;;;120    		LCD_TS_YU_PORT->PCR[LCD_TS_YU_BIT] |= PORT_PCR_MUX(1);
;;;121    		LCD_TS_YD_PORT->PCR[LCD_TS_YD_BIT] &= ~PORT_PCR_MUX_MASK;
;;;122    		LCD_TS_YD_PORT->PCR[LCD_TS_YD_BIT] |= PORT_PCR_MUX(1);
;;;123    		LCD_TS_YU_PT->PDDR |= MASK(LCD_TS_YU_BIT);
;;;124    		LCD_TS_YD_PT->PDDR |= MASK(LCD_TS_YD_BIT);
;;;125    		LCD_TS_YD_PT->PSOR = MASK(LCD_TS_YD_BIT); // Set YD to 1
;;;126    		LCD_TS_YU_PT->PCOR = MASK(LCD_TS_YU_BIT); // Clear YU to 0
;;;127    		// Wait for the inputs to settle
;;;128    		Delay(TS_DELAY);
;;;129    
;;;130    		// Read inputs
;;;131    		ADC0->SC1[0] = LCD_TS_XL_CHANNEL; // start conversion on channel XL
;;;132    		while (!(ADC0->SC1[0] & ADC_SC1_COCO_MASK))
;;;133    			;
;;;134    		xl = ADC0->R[0];
;;;135    		y = xl;
;;;136    
;;;137    		// Apply calibration factors to raw position information
;;;138    		if (LCD_TS_Calibrated) {
;;;139    			if (x<LCD_TS_X_Offset) {
;;;140    				position->X = 0;
;;;141    			} else {
;;;142    				position->X = (x - LCD_TS_X_Offset)/LCD_TS_X_Scale;
;;;143    			}
;;;144    			if (y<LCD_TS_Y_Offset) {
;;;145    				position->Y = 0;
;;;146    			} else {
;;;147    				position->Y = (y - LCD_TS_Y_Offset)/LCD_TS_Y_Scale;
;;;148    			}
;;;149    		} else {
;;;150    			position->X = x;
;;;151    			position->Y = y;
;;;152    		}
;;;153    		return 1;
;;;154    	}
;;;155    }
000078  bdf8              POP      {r3-r7,pc}
                  |L5.122|
00007a  4842              LDR      r0,|L5.388|
00007c  6982              LDR      r2,[r0,#0x18]         ;84
00007e  2107              MOVS     r1,#7                 ;84
000080  0209              LSLS     r1,r1,#8              ;84
000082  438a              BICS     r2,r2,r1              ;84
000084  6182              STR      r2,[r0,#0x18]         ;84
000086  6982              LDR      r2,[r0,#0x18]         ;85
000088  6182              STR      r2,[r0,#0x18]         ;85
00008a  4c40              LDR      r4,|L5.396|
00008c  6822              LDR      r2,[r4,#0]            ;86
00008e  438a              BICS     r2,r2,r1              ;86
000090  6022              STR      r2,[r4,#0]            ;86
000092  6822              LDR      r2,[r4,#0]            ;87
000094  6022              STR      r2,[r4,#0]            ;87
000096  6862              LDR      r2,[r4,#4]            ;91
000098  438a              BICS     r2,r2,r1              ;91
00009a  6062              STR      r2,[r4,#4]            ;91
00009c  6863              LDR      r3,[r4,#4]            ;92
00009e  1582              ASRS     r2,r0,#22             ;92
0000a0  4313              ORRS     r3,r3,r2              ;92
0000a2  6063              STR      r3,[r4,#4]            ;92
0000a4  69c3              LDR      r3,[r0,#0x1c]         ;93
0000a6  438b              BICS     r3,r3,r1              ;93
0000a8  61c3              STR      r3,[r0,#0x1c]         ;93
0000aa  69c1              LDR      r1,[r0,#0x1c]         ;94
0000ac  4311              ORRS     r1,r1,r2              ;94
0000ae  61c1              STR      r1,[r0,#0x1c]         ;94
0000b0  4837              LDR      r0,|L5.400|
0000b2  6941              LDR      r1,[r0,#0x14]         ;95
0000b4  2202              MOVS     r2,#2                 ;95
0000b6  4311              ORRS     r1,r1,r2              ;95
0000b8  6141              STR      r1,[r0,#0x14]         ;95
0000ba  4933              LDR      r1,|L5.392|
0000bc  694b              LDR      r3,[r1,#0x14]         ;96
0000be  433b              ORRS     r3,r3,r7              ;96
0000c0  614b              STR      r3,[r1,#0x14]         ;96
0000c2  604f              STR      r7,[r1,#4]            ;97
0000c4  6082              STR      r2,[r0,#8]            ;98
0000c6  2001              MOVS     r0,#1                 ;100
0000c8  f7fffffe          BL       Delay
0000cc  4d31              LDR      r5,|L5.404|
0000ce  2003              MOVS     r0,#3                 ;103
0000d0  6028              STR      r0,[r5,#0]            ;103
                  |L5.210|
0000d2  6828              LDR      r0,[r5,#0]            ;104
0000d4  0600              LSLS     r0,r0,#24             ;104
0000d6  d5fc              BPL      |L5.210|
0000d8  6928              LDR      r0,[r5,#0x10]         ;106
0000da  b287              UXTH     r7,r0                 ;106
0000dc  482e              LDR      r0,|L5.408|
0000de  8087              STRH     r7,[r0,#4]            ;106
0000e0  6860              LDR      r0,[r4,#4]            ;111
0000e2  2107              MOVS     r1,#7                 ;111
0000e4  0209              LSLS     r1,r1,#8              ;111
0000e6  4388              BICS     r0,r0,r1              ;111
0000e8  6060              STR      r0,[r4,#4]            ;111
0000ea  6860              LDR      r0,[r4,#4]            ;112
0000ec  6060              STR      r0,[r4,#4]            ;112
0000ee  4825              LDR      r0,|L5.388|
0000f0  69c2              LDR      r2,[r0,#0x1c]         ;113
0000f2  438a              BICS     r2,r2,r1              ;113
0000f4  61c2              STR      r2,[r0,#0x1c]         ;113
0000f6  69c2              LDR      r2,[r0,#0x1c]         ;114
0000f8  61c2              STR      r2,[r0,#0x1c]         ;114
0000fa  69c2              LDR      r2,[r0,#0x1c]         ;116
0000fc  2302              MOVS     r3,#2                 ;116
0000fe  439a              BICS     r2,r2,r3              ;116
000100  61c2              STR      r2,[r0,#0x1c]         ;116
000102  6982              LDR      r2,[r0,#0x18]         ;119
000104  438a              BICS     r2,r2,r1              ;119
000106  6182              STR      r2,[r0,#0x18]         ;119
000108  6983              LDR      r3,[r0,#0x18]         ;120
00010a  1582              ASRS     r2,r0,#22             ;120
00010c  4313              ORRS     r3,r3,r2              ;120
00010e  6183              STR      r3,[r0,#0x18]         ;120
000110  6820              LDR      r0,[r4,#0]            ;121
000112  4388              BICS     r0,r0,r1              ;121
000114  6020              STR      r0,[r4,#0]            ;121
000116  6820              LDR      r0,[r4,#0]            ;122
000118  4310              ORRS     r0,r0,r2              ;122
00011a  6020              STR      r0,[r4,#0]            ;122
00011c  481a              LDR      r0,|L5.392|
00011e  6941              LDR      r1,[r0,#0x14]         ;123
000120  0392              LSLS     r2,r2,#14             ;123
000122  4311              ORRS     r1,r1,r2              ;123
000124  6141              STR      r1,[r0,#0x14]         ;123
000126  491a              LDR      r1,|L5.400|
000128  694c              LDR      r4,[r1,#0x14]         ;124
00012a  2301              MOVS     r3,#1                 ;124
00012c  431c              ORRS     r4,r4,r3              ;124
00012e  614c              STR      r4,[r1,#0x14]         ;124
000130  604b              STR      r3,[r1,#4]            ;125
000132  6082              STR      r2,[r0,#8]            ;126
000134  4618              MOV      r0,r3                 ;128
000136  f7fffffe          BL       Delay
00013a  200f              MOVS     r0,#0xf               ;131
00013c  6028              STR      r0,[r5,#0]            ;131
                  |L5.318|
00013e  6828              LDR      r0,[r5,#0]            ;132
000140  0600              LSLS     r0,r0,#24             ;132
000142  d5fc              BPL      |L5.318|
000144  6928              LDR      r0,[r5,#0x10]         ;134
000146  4c14              LDR      r4,|L5.408|
000148  b285              UXTH     r5,r0                 ;134
00014a  8065              STRH     r5,[r4,#2]            ;134
00014c  7820              LDRB     r0,[r4,#0]            ;138  ; LCD_TS_Calibrated
00014e  2800              CMP      r0,#0                 ;138
000150  d014              BEQ      |L5.380|
000152  68e0              LDR      r0,[r4,#0xc]          ;139  ; LCD_TS_X_Offset
000154  4287              CMP      r7,r0                 ;139
000156  d201              BCS      |L5.348|
000158  2000              MOVS     r0,#0                 ;140
00015a  e003              B        |L5.356|
                  |L5.348|
00015c  1a38              SUBS     r0,r7,r0              ;142
00015e  68a1              LDR      r1,[r4,#8]            ;142  ; LCD_TS_X_Scale
000160  f7fffffe          BL       __aeabi_uidivmod
                  |L5.356|
000164  6030              STR      r0,[r6,#0]            ;144
000166  6960              LDR      r0,[r4,#0x14]         ;144  ; LCD_TS_Y_Offset
000168  4285              CMP      r5,r0                 ;144
00016a  d201              BCS      |L5.368|
00016c  2000              MOVS     r0,#0                 ;145
00016e  e003              B        |L5.376|
                  |L5.368|
000170  1a28              SUBS     r0,r5,r0              ;147
000172  6921              LDR      r1,[r4,#0x10]         ;147  ; LCD_TS_Y_Scale
000174  f7fffffe          BL       __aeabi_uidivmod
                  |L5.376|
000178  6070              STR      r0,[r6,#4]            ;145
00017a  e001              B        |L5.384|
                  |L5.380|
00017c  6037              STR      r7,[r6,#0]            ;151
00017e  6075              STR      r5,[r6,#4]            ;151
                  |L5.384|
000180  2001              MOVS     r0,#1                 ;153
000182  bdf8              POP      {r3-r7,pc}
;;;156    
                          ENDP

                  |L5.388|
                          DCD      0x4004d040
                  |L5.392|
                          DCD      0xf80ff100
                  |L5.396|
                          DCD      0x4004b000
                  |L5.400|
                          DCD      0xf80ff080
                  |L5.404|
                          DCD      0x4003b000
                  |L5.408|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  LCD_TS_Calibrated
000000  0100              DCB      0x01,0x00
                  ||xl||
000002  0000              DCW      0x0000
                  ||yu||
000004  0000              DCW      0x0000
000006  0000              DCB      0x00,0x00
                  LCD_TS_X_Scale
                          DCD      0x000000d1
                  LCD_TS_X_Offset
                          DCD      0x000019f8
                  LCD_TS_Y_Scale
                          DCD      0x0000009f
                  LCD_TS_Y_Offset
                          DCD      0x00001a21
                  TS_Min
                          %        8
                  TS_Max
                          %        8

;*** Start embedded assembler ***

#line 1 "Source\\LCD\\touchscreen.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_touchscreen_c_bd69c1ad____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___13_touchscreen_c_bd69c1ad____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_touchscreen_c_bd69c1ad____REVSH|
#line 462
|__asm___13_touchscreen_c_bd69c1ad____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
