; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\touchscreen.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\touchscreen.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O3 --diag_suppress=9931 -I.\Include -I.\Source\Profiler -I.\Source\LCD -I.\Source\FS -I.\Source\ulibSD -I.\RTE\Device\MKL25Z128xxx4 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.15.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DMKL25Z128xxx4 --omf_browse=.\objects\touchscreen.crf Source\LCD\touchscreen.c]
                          THUMB

                          AREA ||i.Init_ADC||, CODE, READONLY, ALIGN=2

                  Init_ADC PROC
;;;25     
;;;26     void Init_ADC(void) {
000000  4805              LDR      r0,|L1.24|
;;;27     	
;;;28     	SIM->SCGC6 |= SIM_SCGC6_ADC0_MASK; 
000002  6bc1              LDR      r1,[r0,#0x3c]
000004  2201              MOVS     r2,#1
000006  06d2              LSLS     r2,r2,#27
000008  4311              ORRS     r1,r1,r2
00000a  63c1              STR      r1,[r0,#0x3c]
;;;29     	ADC0->CFG1 = 0x9C; // 16 bit
00000c  4803              LDR      r0,|L1.28|
00000e  219c              MOVS     r1,#0x9c
000010  6081              STR      r1,[r0,#8]
;;;30     	ADC0->SC2 = 0;
000012  2100              MOVS     r1,#0
000014  6201              STR      r1,[r0,#0x20]
;;;31     }
000016  4770              BX       lr
;;;32     
                          ENDP

                  |L1.24|
                          DCD      0x40048000
                  |L1.28|
                          DCD      0x4003b000

                          AREA ||i.LCD_TS_Blocking_Read||, CODE, READONLY, ALIGN=1

                  LCD_TS_Blocking_Read PROC
;;;156    
;;;157    void LCD_TS_Blocking_Read(PT_T * position) {
000000  b51c              PUSH     {r2-r4,lr}
000002  4604              MOV      r4,r0
                  |L2.4|
;;;158    	PT_T temp;
;;;159    	// Wait for screen press
;;;160    	while (LCD_TS_Read(&temp) == 0)
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       LCD_TS_Read
00000a  2800              CMP      r0,#0
00000c  d0fa              BEQ      |L2.4|
00000e  e003              B        |L2.24|
                  |L2.16|
;;;161    		;
;;;162    	// Wait for screen release
;;;163    	while (LCD_TS_Read(&temp) == 1) {
;;;164    		position->X = temp.X;
000010  9800              LDR      r0,[sp,#0]
;;;165    		position->Y = temp.Y;
000012  6020              STR      r0,[r4,#0]
000014  9801              LDR      r0,[sp,#4]
000016  6060              STR      r0,[r4,#4]
                  |L2.24|
000018  4668              MOV      r0,sp                 ;163
00001a  f7fffffe          BL       LCD_TS_Read
00001e  2801              CMP      r0,#1                 ;163
000020  d0f6              BEQ      |L2.16|
;;;166    	}
;;;167    	return;
;;;168    }
000022  bd1c              POP      {r2-r4,pc}
;;;169    
                          ENDP


                          AREA ||i.LCD_TS_Calibrate||, CODE, READONLY, ALIGN=2

                  LCD_TS_Calibrate PROC
;;;224    /* Calibrate touchscreen. */
;;;225    void LCD_TS_Calibrate(void) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b085              SUB      sp,sp,#0x14
;;;226    	PT_T p, bp, p_bound;
;;;227    	uint32_t i;
;;;228    	
;;;229    	bp.X = COL_TO_X(0);
000004  2400              MOVS     r4,#0
;;;230    	bp.Y = ROW_TO_Y(3);
000006  4f38              LDR      r7,|L3.232|
000008  9402              STR      r4,[sp,#8]
00000a  7838              LDRB     r0,[r7,#0]  ; G_LCD_char_height
00000c  0041              LSLS     r1,r0,#1
00000e  1840              ADDS     r0,r0,r1
;;;231    
;;;232    	LCD_Text_PrintStr(&bp, "Calibrate TS");
000010  9003              STR      r0,[sp,#0xc]
000012  a136              ADR      r1,|L3.236|
000014  a802              ADD      r0,sp,#8
000016  f7fffffe          BL       LCD_Text_PrintStr
;;;233    	bp.X = COL_TO_X(0);
;;;234    	bp.Y = ROW_TO_Y(4);
00001a  9402              STR      r4,[sp,#8]
00001c  7838              LDRB     r0,[r7,#0]  ; G_LCD_char_height
;;;235    	LCD_Text_PrintStr(&bp, "by pressing each +");
00001e  a137              ADR      r1,|L3.252|
000020  0080              LSLS     r0,r0,#2              ;234
000022  9003              STR      r0,[sp,#0xc]
000024  a802              ADD      r0,sp,#8
000026  f7fffffe          BL       LCD_Text_PrintStr
;;;236    	
;;;237    	bp.X = COL_TO_X(0);
;;;238    	bp.Y = ROW_TO_Y(0);
00002a  9402              STR      r4,[sp,#8]
;;;239    	LCD_Text_PrintStr(&bp, "+");
00002c  a138              ADR      r1,|L3.272|
00002e  a802              ADD      r0,sp,#8
000030  9403              STR      r4,[sp,#0xc]
000032  f7fffffe          BL       LCD_Text_PrintStr
;;;240    	
;;;241    	p_bound.X = 0xffff;
000036  4d37              LDR      r5,|L3.276|
;;;242    	p_bound.Y = 0xffff;
000038  462e              MOV      r6,r5
                  |L3.58|
;;;243    	for (i=0; i<TS_CALIB_SAMPLES; i++){
;;;244    		while (!LCD_TS_Read(&p))
00003a  4668              MOV      r0,sp
00003c  f7fffffe          BL       LCD_TS_Read
000040  2800              CMP      r0,#0
000042  d0fa              BEQ      |L3.58|
;;;245    			;
;;;246    		if (p.X < p_bound.X)
000044  9800              LDR      r0,[sp,#0]
000046  42a8              CMP      r0,r5
000048  d200              BCS      |L3.76|
;;;247    			p_bound.X = p.X;
00004a  4605              MOV      r5,r0
                  |L3.76|
;;;248    		if (p.Y < p_bound.Y)
00004c  9801              LDR      r0,[sp,#4]
00004e  42b0              CMP      r0,r6
000050  d200              BCS      |L3.84|
;;;249    			p_bound.Y = p.Y;
000052  4606              MOV      r6,r0
                  |L3.84|
000054  1c64              ADDS     r4,r4,#1
000056  2c0a              CMP      r4,#0xa               ;243
000058  d3ef              BCC      |L3.58|
;;;250    	}
;;;251    	
;;;252    	LCD_TS_X_Offset = p_bound.X;
00005a  4c2f              LDR      r4,|L3.280|
;;;253    	LCD_TS_Y_Offset = p_bound.Y;
;;;254    	
;;;255    	TS_Min = p_bound;
00005c  6166              STR      r6,[r4,#0x14]  ; LCD_TS_Y_Offset
00005e  4620              MOV      r0,r4
000060  60e5              STR      r5,[r4,#0xc]  ; LCD_TS_X_Offset
000062  61c6              STR      r6,[r0,#0x1c]  ; TS_Min
000064  6185              STR      r5,[r0,#0x18]  ; TS_Min
                  |L3.102|
;;;256    	
;;;257    	// Wait for release
;;;258    	while (LCD_TS_Read(&p))
000066  4668              MOV      r0,sp
000068  f7fffffe          BL       LCD_TS_Read
00006c  2800              CMP      r0,#0
00006e  d1fa              BNE      |L3.102|
;;;259    		;
;;;260    	
;;;261    	LCD_Erase();
000070  f7fffffe          BL       LCD_Erase
;;;262    
;;;263    	/*
;;;264    	bp.X = COL_TO_X(LCD_MAX_COLS-1);
;;;265    	bp.Y = ROW_TO_Y(LCD_MAX_ROWS-1);
;;;266    	*/
;;;267    	bp.X = LCD_WIDTH - CHAR_WIDTH - 1;
000074  4829              LDR      r0,|L3.284|
000076  21ef              MOVS     r1,#0xef
000078  7800              LDRB     r0,[r0,#0]  ; G_LCD_char_width
00007a  1a08              SUBS     r0,r1,r0
;;;268    	bp.Y = LCD_HEIGHT - CHAR_HEIGHT - 1;
00007c  9002              STR      r0,[sp,#8]
00007e  7838              LDRB     r0,[r7,#0]  ; G_LCD_char_height
000080  21ff              MOVS     r1,#0xff
000082  3140              ADDS     r1,r1,#0x40
000084  1a08              SUBS     r0,r1,r0
;;;269    	LCD_Text_PrintStr(&bp, "+");
000086  9003              STR      r0,[sp,#0xc]
000088  a121              ADR      r1,|L3.272|
00008a  a802              ADD      r0,sp,#8
00008c  f7fffffe          BL       LCD_Text_PrintStr
;;;270    
;;;271    	p_bound.X = 0;
000090  2500              MOVS     r5,#0
;;;272    	p_bound.Y = 0;
000092  462e              MOV      r6,r5
;;;273    	for (i=0; i<TS_CALIB_SAMPLES; i++){
000094  462f              MOV      r7,r5
                  |L3.150|
;;;274    		while (!LCD_TS_Read(&p))
000096  4668              MOV      r0,sp
000098  f7fffffe          BL       LCD_TS_Read
00009c  2800              CMP      r0,#0
00009e  d0fa              BEQ      |L3.150|
;;;275    			;
;;;276    		if (p.X > p_bound.X)
0000a0  9800              LDR      r0,[sp,#0]
0000a2  42a8              CMP      r0,r5
0000a4  d900              BLS      |L3.168|
;;;277    			p_bound.X = p.X;
0000a6  4605              MOV      r5,r0
                  |L3.168|
;;;278    		if (p.Y > p_bound.Y)
0000a8  9801              LDR      r0,[sp,#4]
0000aa  42b0              CMP      r0,r6
0000ac  d900              BLS      |L3.176|
;;;279    			p_bound.Y = p.Y;
0000ae  4606              MOV      r6,r0
                  |L3.176|
0000b0  1c7f              ADDS     r7,r7,#1
0000b2  2f0a              CMP      r7,#0xa               ;273
0000b4  d3ef              BCC      |L3.150|
;;;280    	}
;;;281    	
;;;282    	TS_Max = p_bound;
0000b6  4818              LDR      r0,|L3.280|
;;;283    	
;;;284    	LCD_TS_X_Scale = (p_bound.X-LCD_TS_X_Offset)/LCD_WIDTH;
0000b8  21f0              MOVS     r1,#0xf0
0000ba  6246              STR      r6,[r0,#0x24]  ; TS_Max
0000bc  6205              STR      r5,[r0,#0x20]  ; TS_Max
0000be  68e0              LDR      r0,[r4,#0xc]  ; LCD_TS_X_Offset
0000c0  1a28              SUBS     r0,r5,r0
0000c2  f7fffffe          BL       __aeabi_uidivmod
;;;285    	LCD_TS_Y_Scale = (p_bound.Y-LCD_TS_Y_Offset)/LCD_HEIGHT;
0000c6  60a0              STR      r0,[r4,#8]  ; LCD_TS_X_Scale
0000c8  6960              LDR      r0,[r4,#0x14]  ; LCD_TS_Y_Offset
0000ca  21ff              MOVS     r1,#0xff
0000cc  1a30              SUBS     r0,r6,r0
0000ce  3141              ADDS     r1,r1,#0x41
0000d0  f7fffffe          BL       __aeabi_uidivmod
0000d4  6120              STR      r0,[r4,#0x10]  ; LCD_TS_Y_Scale
                  |L3.214|
;;;286    
;;;287    	// Wait for release
;;;288    	while (LCD_TS_Read(&p))
0000d6  4668              MOV      r0,sp
0000d8  f7fffffe          BL       LCD_TS_Read
0000dc  2800              CMP      r0,#0
0000de  d1fa              BNE      |L3.214|
;;;289    		;
;;;290    	
;;;291    	LCD_TS_Calibrated = 1;
0000e0  2001              MOVS     r0,#1
0000e2  7020              STRB     r0,[r4,#0]
;;;292    
;;;293    }
0000e4  b005              ADD      sp,sp,#0x14
0000e6  bdf0              POP      {r4-r7,pc}
                          ENDP

                  |L3.232|
                          DCD      G_LCD_char_height
                  |L3.236|
0000ec  43616c69          DCB      "Calibrate TS",0
0000f0  62726174
0000f4  65205453
0000f8  00      
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L3.252|
0000fc  62792070          DCB      "by pressing each +",0
000100  72657373
000104  696e6720
000108  65616368
00010c  202b00  
00010f  00                DCB      0
                  |L3.272|
000110  2b00              DCB      "+",0
000112  00                DCB      0
000113  00                DCB      0
                  |L3.276|
                          DCD      0x0000ffff
                  |L3.280|
                          DCD      ||.data||
                  |L3.284|
                          DCD      G_LCD_char_width

                          AREA ||i.LCD_TS_Init||, CODE, READONLY, ALIGN=1

                  LCD_TS_Init PROC
;;;34     /* Initialize touchscreen hardware (ADC). */
;;;35     void LCD_TS_Init(void) {
000000  b500              PUSH     {lr}
;;;36     	// Configure ADC
;;;37     	Init_ADC();
000002  f7fffffe          BL       Init_ADC
;;;38     }
000006  bd00              POP      {pc}
;;;39     
                          ENDP


                          AREA ||i.LCD_TS_Read||, CODE, READONLY, ALIGN=2

                  LCD_TS_Read PROC
;;;44     position unchanged. */
;;;45     uint32_t LCD_TS_Read(PT_T * position) {
000000  b5f8              PUSH     {r3-r7,lr}
;;;46     	uint32_t x, y;
;;;47     	uint32_t b;
;;;48     
;;;49     	// Determine if screen was pressed.
;;;50     	// Set YU digital output at ground, 
;;;51     	LCD_TS_YU_PORT->PCR[LCD_TS_YU_BIT] &= ~PORT_PCR_MUX_MASK;
000002  4c62              LDR      r4,|L5.396|
000004  4606              MOV      r6,r0                 ;45
000006  69a0              LDR      r0,[r4,#0x18]
000008  2507              MOVS     r5,#7
00000a  022d              LSLS     r5,r5,#8
00000c  43a8              BICS     r0,r0,r5
00000e  61a0              STR      r0,[r4,#0x18]
;;;52     	LCD_TS_YU_PORT->PCR[LCD_TS_YU_BIT] |= PORT_PCR_MUX(1);
000010  69a1              LDR      r1,[r4,#0x18]
000012  15a0              ASRS     r0,r4,#22
000014  4301              ORRS     r1,r1,r0
000016  61a1              STR      r1,[r4,#0x18]
;;;53     	LCD_TS_YU_PT->PDDR |= MASK(LCD_TS_YU_BIT);
000018  495d              LDR      r1,|L5.400|
00001a  694a              LDR      r2,[r1,#0x14]
00001c  0381              LSLS     r1,r0,#14
00001e  4b5c              LDR      r3,|L5.400|
000020  430a              ORRS     r2,r2,r1
000022  615a              STR      r2,[r3,#0x14]
;;;54     	LCD_TS_YU_PT->PCOR = MASK(LCD_TS_YU_BIT); // Clear YU to 0
000024  6099              STR      r1,[r3,#8]
;;;55     
;;;56     	// Set YD + XL to open
;;;57     	// Set YD as ADC input
;;;58     	LCD_TS_YD_PORT->PCR[LCD_TS_YD_BIT] &= ~PORT_PCR_MUX_MASK;
000026  495b              LDR      r1,|L5.404|
000028  6809              LDR      r1,[r1,#0]
00002a  4a5a              LDR      r2,|L5.404|
00002c  43a9              BICS     r1,r1,r5
00002e  6011              STR      r1,[r2,#0]
;;;59     	LCD_TS_YD_PORT->PCR[LCD_TS_YD_BIT] |= PORT_PCR_MUX(0);
000030  6811              LDR      r1,[r2,#0]
000032  6011              STR      r1,[r2,#0]
;;;60     
;;;61     	// Set XL as digital input
;;;62     	LCD_TS_XL_PORT->PCR[LCD_TS_XL_BIT] &= ~PORT_PCR_MUX_MASK;
000034  6851              LDR      r1,[r2,#4]
000036  43a9              BICS     r1,r1,r5
000038  6051              STR      r1,[r2,#4]
;;;63     	LCD_TS_XL_PORT->PCR[LCD_TS_XL_BIT] |= PORT_PCR_MUX(1);
00003a  6851              LDR      r1,[r2,#4]
00003c  4301              ORRS     r1,r1,r0
00003e  6051              STR      r1,[r2,#4]
;;;64     	LCD_TS_XL_PT->PDDR &= ~MASK(LCD_TS_XL_BIT); // Input
000040  4953              LDR      r1,|L5.400|
000042  3980              SUBS     r1,r1,#0x80
000044  694b              LDR      r3,[r1,#0x14]
000046  2202              MOVS     r2,#2
000048  4393              BICS     r3,r3,r2
00004a  614b              STR      r3,[r1,#0x14]
;;;65     	
;;;66     	// Set XR as digital input with pull-up
;;;67     	LCD_TS_XR_PORT->PCR[LCD_TS_XR_BIT] &= ~PORT_PCR_MUX_MASK;
00004c  69e1              LDR      r1,[r4,#0x1c]
00004e  43a9              BICS     r1,r1,r5
000050  61e1              STR      r1,[r4,#0x1c]
;;;68     	LCD_TS_XR_PORT->PCR[LCD_TS_XR_BIT] |= PORT_PCR_MUX(1);
000052  69e1              LDR      r1,[r4,#0x1c]
000054  4301              ORRS     r1,r1,r0
000056  61e1              STR      r1,[r4,#0x1c]
;;;69     	LCD_TS_XR_PORT->PCR[LCD_TS_XR_BIT] |= PORT_PCR_PE_MASK; // Enable pull-up
000058  69e0              LDR      r0,[r4,#0x1c]
00005a  4310              ORRS     r0,r0,r2
00005c  61e0              STR      r0,[r4,#0x1c]
;;;70     	LCD_TS_XR_PT->PDDR &= ~MASK(LCD_TS_XR_BIT); // Input
00005e  484c              LDR      r0,|L5.400|
000060  6940              LDR      r0,[r0,#0x14]
000062  0597              LSLS     r7,r2,#22
000064  494a              LDR      r1,|L5.400|
000066  43b8              BICS     r0,r0,r7
000068  6148              STR      r0,[r1,#0x14]
;;;71     		
;;;72     	// Wait for the inputs to settle
;;;73     	Delay(TS_DELAY);
00006a  2001              MOVS     r0,#1
00006c  f7fffffe          BL       Delay
;;;74     	// Read XR input via digital
;;;75     	// if XR is 0, then screen is pressed
;;;76     	b = (LCD_TS_XR_PT->PDIR) & MASK(LCD_TS_XR_BIT);
000070  4847              LDR      r0,|L5.400|
000072  6900              LDR      r0,[r0,#0x10]
000074  4238              TST      r0,r7
;;;77     	
;;;78     	if (b>0) {
000076  d001              BEQ      |L5.124|
;;;79     		// Screen not pressed
;;;80     		return 0;
000078  2000              MOVS     r0,#0
;;;81     	} else {
;;;82     		// Read X Position
;;;83     		// Configure inputs to ADC
;;;84     		LCD_TS_YU_PORT->PCR[LCD_TS_YU_BIT] &= ~PORT_PCR_MUX_MASK;
;;;85     		LCD_TS_YU_PORT->PCR[LCD_TS_YU_BIT] |= PORT_PCR_MUX(0);
;;;86     		LCD_TS_YD_PORT->PCR[LCD_TS_YD_BIT] &= ~PORT_PCR_MUX_MASK;
;;;87     		LCD_TS_YD_PORT->PCR[LCD_TS_YD_BIT] |= PORT_PCR_MUX(0);
;;;88     
;;;89     		
;;;90     		// Configure outputs to GPIO
;;;91     		LCD_TS_XL_PORT->PCR[LCD_TS_XL_BIT] &= ~PORT_PCR_MUX_MASK;
;;;92     		LCD_TS_XL_PORT->PCR[LCD_TS_XL_BIT] |= PORT_PCR_MUX(1);
;;;93     		LCD_TS_XR_PORT->PCR[LCD_TS_XR_BIT] &= ~PORT_PCR_MUX_MASK;
;;;94     		LCD_TS_XR_PORT->PCR[LCD_TS_XR_BIT] |= PORT_PCR_MUX(1);
;;;95     		LCD_TS_XL_PT->PDDR |= MASK(LCD_TS_XL_BIT); 
;;;96     		LCD_TS_XR_PT->PDDR |= MASK(LCD_TS_XR_BIT);
;;;97     		LCD_TS_XR_PT->PSOR = MASK(LCD_TS_XR_BIT); // Set XR to 1
;;;98     		LCD_TS_XL_PT->PCOR = MASK(LCD_TS_XL_BIT); // Clear XL to 0
;;;99     		// Wait for inputs to settle
;;;100    		Delay(TS_DELAY);
;;;101    		
;;;102    		// Read inputs
;;;103    		ADC0->SC1[0] = LCD_TS_YU_CHANNEL; // start conversion on channel YU
;;;104    		while (!(ADC0->SC1[0] & ADC_SC1_COCO_MASK))
;;;105    			;
;;;106    		yu = ADC0->R[0];
;;;107    		x = yu;
;;;108    
;;;109    		// Read Y Position
;;;110    		// Configure inputs to ADC
;;;111    		LCD_TS_XL_PORT->PCR[LCD_TS_XL_BIT] &= ~PORT_PCR_MUX_MASK;
;;;112    		LCD_TS_XL_PORT->PCR[LCD_TS_XL_BIT] |= PORT_PCR_MUX(0);
;;;113    		LCD_TS_XR_PORT->PCR[LCD_TS_XR_BIT] &= ~PORT_PCR_MUX_MASK;
;;;114    		LCD_TS_XR_PORT->PCR[LCD_TS_XR_BIT] |= PORT_PCR_MUX(0);
;;;115    		// Disable pull-up - just to be sure
;;;116    		LCD_TS_XR_PORT->PCR[LCD_TS_XR_BIT] &= ~PORT_PCR_PE_MASK; 
;;;117    		
;;;118    		// Configure outputs to GPIO
;;;119    		LCD_TS_YU_PORT->PCR[LCD_TS_YU_BIT] &= ~PORT_PCR_MUX_MASK;
;;;120    		LCD_TS_YU_PORT->PCR[LCD_TS_YU_BIT] |= PORT_PCR_MUX(1);
;;;121    		LCD_TS_YD_PORT->PCR[LCD_TS_YD_BIT] &= ~PORT_PCR_MUX_MASK;
;;;122    		LCD_TS_YD_PORT->PCR[LCD_TS_YD_BIT] |= PORT_PCR_MUX(1);
;;;123    		LCD_TS_YU_PT->PDDR |= MASK(LCD_TS_YU_BIT);
;;;124    		LCD_TS_YD_PT->PDDR |= MASK(LCD_TS_YD_BIT);
;;;125    		LCD_TS_YD_PT->PSOR = MASK(LCD_TS_YD_BIT); // Set YD to 1
;;;126    		LCD_TS_YU_PT->PCOR = MASK(LCD_TS_YU_BIT); // Clear YU to 0
;;;127    		// Wait for the inputs to settle
;;;128    		Delay(TS_DELAY);
;;;129    
;;;130    		// Read inputs
;;;131    		ADC0->SC1[0] = LCD_TS_XL_CHANNEL; // start conversion on channel XL
;;;132    		while (!(ADC0->SC1[0] & ADC_SC1_COCO_MASK))
;;;133    			;
;;;134    		xl = ADC0->R[0];
;;;135    		y = xl;
;;;136    
;;;137    		// Apply calibration factors to raw position information
;;;138    		if (LCD_TS_Calibrated) {
;;;139    			if (x<LCD_TS_X_Offset) {
;;;140    				position->X = 0;
;;;141    			} else {
;;;142    				position->X = (x - LCD_TS_X_Offset)/LCD_TS_X_Scale;
;;;143    			}
;;;144    			if (y<LCD_TS_Y_Offset) {
;;;145    				position->Y = 0;
;;;146    			} else {
;;;147    				position->Y = (y - LCD_TS_Y_Offset)/LCD_TS_Y_Scale;
;;;148    			}
;;;149    		} else {
;;;150    			position->X = x;
;;;151    			position->Y = y;
;;;152    		}
;;;153    		return 1;
;;;154    	}
;;;155    }
00007a  bdf8              POP      {r3-r7,pc}
                  |L5.124|
00007c  4843              LDR      r0,|L5.396|
00007e  6982              LDR      r2,[r0,#0x18]         ;84
000080  2107              MOVS     r1,#7                 ;84
000082  0209              LSLS     r1,r1,#8              ;84
000084  438a              BICS     r2,r2,r1              ;84
000086  6182              STR      r2,[r0,#0x18]         ;84
000088  6982              LDR      r2,[r0,#0x18]         ;85
00008a  6182              STR      r2,[r0,#0x18]         ;85
00008c  4c41              LDR      r4,|L5.404|
00008e  6822              LDR      r2,[r4,#0]            ;86
000090  438a              BICS     r2,r2,r1              ;86
000092  6022              STR      r2,[r4,#0]            ;86
000094  6822              LDR      r2,[r4,#0]            ;87
000096  6022              STR      r2,[r4,#0]            ;87
000098  6862              LDR      r2,[r4,#4]            ;91
00009a  438a              BICS     r2,r2,r1              ;91
00009c  6062              STR      r2,[r4,#4]            ;91
00009e  6863              LDR      r3,[r4,#4]            ;92
0000a0  1582              ASRS     r2,r0,#22             ;92
0000a2  4313              ORRS     r3,r3,r2              ;92
0000a4  6063              STR      r3,[r4,#4]            ;92
0000a6  69c3              LDR      r3,[r0,#0x1c]         ;93
0000a8  438b              BICS     r3,r3,r1              ;93
0000aa  61c3              STR      r3,[r0,#0x1c]         ;93
0000ac  69c1              LDR      r1,[r0,#0x1c]         ;94
0000ae  4311              ORRS     r1,r1,r2              ;94
0000b0  61c1              STR      r1,[r0,#0x1c]         ;94
0000b2  4a37              LDR      r2,|L5.400|
0000b4  3a80              SUBS     r2,r2,#0x80           ;95
0000b6  6950              LDR      r0,[r2,#0x14]         ;95
0000b8  2102              MOVS     r1,#2                 ;95
0000ba  4308              ORRS     r0,r0,r1              ;95
0000bc  6150              STR      r0,[r2,#0x14]         ;95
0000be  4834              LDR      r0,|L5.400|
0000c0  6943              LDR      r3,[r0,#0x14]         ;96
0000c2  433b              ORRS     r3,r3,r7              ;96
0000c4  6143              STR      r3,[r0,#0x14]         ;96
0000c6  6047              STR      r7,[r0,#4]            ;97
0000c8  6091              STR      r1,[r2,#8]            ;98
0000ca  2001              MOVS     r0,#1                 ;100
0000cc  f7fffffe          BL       Delay
0000d0  4d31              LDR      r5,|L5.408|
0000d2  2003              MOVS     r0,#3                 ;103
0000d4  6028              STR      r0,[r5,#0]            ;103
                  |L5.214|
0000d6  6828              LDR      r0,[r5,#0]            ;104
0000d8  0600              LSLS     r0,r0,#24             ;104
0000da  d5fc              BPL      |L5.214|
0000dc  6928              LDR      r0,[r5,#0x10]         ;106
0000de  b287              UXTH     r7,r0                 ;106
0000e0  482e              LDR      r0,|L5.412|
0000e2  8087              STRH     r7,[r0,#4]            ;106
0000e4  6860              LDR      r0,[r4,#4]            ;111
0000e6  2107              MOVS     r1,#7                 ;111
0000e8  0209              LSLS     r1,r1,#8              ;111
0000ea  4388              BICS     r0,r0,r1              ;111
0000ec  6060              STR      r0,[r4,#4]            ;111
0000ee  6860              LDR      r0,[r4,#4]            ;112
0000f0  6060              STR      r0,[r4,#4]            ;112
0000f2  4826              LDR      r0,|L5.396|
0000f4  69c2              LDR      r2,[r0,#0x1c]         ;113
0000f6  438a              BICS     r2,r2,r1              ;113
0000f8  61c2              STR      r2,[r0,#0x1c]         ;113
0000fa  69c2              LDR      r2,[r0,#0x1c]         ;114
0000fc  61c2              STR      r2,[r0,#0x1c]         ;114
0000fe  69c2              LDR      r2,[r0,#0x1c]         ;116
000100  2302              MOVS     r3,#2                 ;116
000102  439a              BICS     r2,r2,r3              ;116
000104  61c2              STR      r2,[r0,#0x1c]         ;116
000106  6982              LDR      r2,[r0,#0x18]         ;119
000108  438a              BICS     r2,r2,r1              ;119
00010a  6182              STR      r2,[r0,#0x18]         ;119
00010c  6983              LDR      r3,[r0,#0x18]         ;120
00010e  1582              ASRS     r2,r0,#22             ;120
000110  4313              ORRS     r3,r3,r2              ;120
000112  6183              STR      r3,[r0,#0x18]         ;120
000114  6820              LDR      r0,[r4,#0]            ;121
000116  4388              BICS     r0,r0,r1              ;121
000118  6020              STR      r0,[r4,#0]            ;121
00011a  6820              LDR      r0,[r4,#0]            ;122
00011c  4310              ORRS     r0,r0,r2              ;122
00011e  6020              STR      r0,[r4,#0]            ;122
000120  481b              LDR      r0,|L5.400|
000122  6941              LDR      r1,[r0,#0x14]         ;123
000124  0392              LSLS     r2,r2,#14             ;123
000126  4311              ORRS     r1,r1,r2              ;123
000128  6141              STR      r1,[r0,#0x14]         ;123
00012a  4919              LDR      r1,|L5.400|
00012c  3980              SUBS     r1,r1,#0x80           ;124
00012e  694c              LDR      r4,[r1,#0x14]         ;124
000130  2301              MOVS     r3,#1                 ;124
000132  431c              ORRS     r4,r4,r3              ;124
000134  614c              STR      r4,[r1,#0x14]         ;124
000136  604b              STR      r3,[r1,#4]            ;125
000138  6082              STR      r2,[r0,#8]            ;126
00013a  4618              MOV      r0,r3                 ;128
00013c  f7fffffe          BL       Delay
000140  200f              MOVS     r0,#0xf               ;131
000142  6028              STR      r0,[r5,#0]            ;131
                  |L5.324|
000144  6828              LDR      r0,[r5,#0]            ;132
000146  0600              LSLS     r0,r0,#24             ;132
000148  d5fc              BPL      |L5.324|
00014a  6928              LDR      r0,[r5,#0x10]         ;134
00014c  4c13              LDR      r4,|L5.412|
00014e  b285              UXTH     r5,r0                 ;134
000150  8065              STRH     r5,[r4,#2]            ;134
000152  7820              LDRB     r0,[r4,#0]            ;138  ; LCD_TS_Calibrated
000154  2800              CMP      r0,#0                 ;138
000156  d014              BEQ      |L5.386|
000158  68e0              LDR      r0,[r4,#0xc]          ;139  ; LCD_TS_X_Offset
00015a  4287              CMP      r7,r0                 ;139
00015c  d201              BCS      |L5.354|
00015e  2000              MOVS     r0,#0                 ;140
000160  e003              B        |L5.362|
                  |L5.354|
000162  1a38              SUBS     r0,r7,r0              ;142
000164  68a1              LDR      r1,[r4,#8]            ;142  ; LCD_TS_X_Scale
000166  f7fffffe          BL       __aeabi_uidivmod
                  |L5.362|
00016a  6030              STR      r0,[r6,#0]            ;144
00016c  6960              LDR      r0,[r4,#0x14]         ;144  ; LCD_TS_Y_Offset
00016e  4285              CMP      r5,r0                 ;144
000170  d201              BCS      |L5.374|
000172  2000              MOVS     r0,#0                 ;145
000174  e003              B        |L5.382|
                  |L5.374|
000176  1a28              SUBS     r0,r5,r0              ;147
000178  6921              LDR      r1,[r4,#0x10]         ;147  ; LCD_TS_Y_Scale
00017a  f7fffffe          BL       __aeabi_uidivmod
                  |L5.382|
00017e  6070              STR      r0,[r6,#4]            ;145
000180  e001              B        |L5.390|
                  |L5.386|
000182  6037              STR      r7,[r6,#0]            ;151
000184  6075              STR      r5,[r6,#4]            ;151
                  |L5.390|
000186  2001              MOVS     r0,#1                 ;153
000188  bdf8              POP      {r3-r7,pc}
;;;156    
                          ENDP

00018a  0000              DCW      0x0000
                  |L5.396|
                          DCD      0x4004d040
                  |L5.400|
                          DCD      0x400ff100
                  |L5.404|
                          DCD      0x4004b000
                  |L5.408|
                          DCD      0x4003b000
                  |L5.412|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  LCD_TS_Calibrated
000000  0100              DCB      0x01,0x00
                  ||xl||
000002  0000              DCW      0x0000
                  ||yu||
000004  0000              DCW      0x0000
000006  0000              DCB      0x00,0x00
                  LCD_TS_X_Scale
                          DCD      0x000000d1
                  LCD_TS_X_Offset
                          DCD      0x000019f8
                  LCD_TS_Y_Scale
                          DCD      0x0000009f
                  LCD_TS_Y_Offset
                          DCD      0x00001a21
                  TS_Min
                          %        8
                  TS_Max
                          %        8

;*** Start embedded assembler ***

#line 1 "Source\\LCD\\touchscreen.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_touchscreen_c_bd69c1ad____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___13_touchscreen_c_bd69c1ad____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_touchscreen_c_bd69c1ad____REVSH|
#line 462
|__asm___13_touchscreen_c_bd69c1ad____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
