; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\objects\lcd_jpeg.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\lcd_jpeg.d --cpu=Cortex-M0+ --fpmode=fast --apcs=interwork -O3 -Otime --diag_suppress=9931 -I.\Include -I.\Source\Profiler -I.\Source\LCD -I.\Source\FS -I.\Source\ulibSD -I.\RTE\Device\MKL25Z128xxx4 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\Kinetis_KLxx_DFP\1.15.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DMKL25Z128xxx4 --omf_browse=.\objects\lcd_jpeg.crf Source\LCD\LCD_JPEG.c]
                          THUMB

                          AREA ||i.LCD_JPEG||, CODE, READONLY, ALIGN=2

                  LCD_JPEG PROC
;;;227    
;;;228    int LCD_JPEG(void) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b091              SUB      sp,sp,#0x44
;;;229    	int width, height, comps;
;;;230    	pjpeg_scan_type_t scan_type;
;;;231    	int reduce = 0;
;;;232    	DIR dir;
;;;233    	FILINFO fno;
;;;234    	FRESULT rc;
;;;235    	int result;
;;;236    	int image_count;
;;;237    
;;;238    	do {
;;;239    		pixel_data_hash = 0;
000004  4924              LDR      r1,|L1.152|
000006  2600              MOVS     r6,#0                 ;231
;;;240    		rc = pf_opendir(&dir, "");
000008  600e              STR      r6,[r1,#0]  ; pixel_data_hash
00000a  a124              ADR      r1,|L1.156|
00000c  a808              ADD      r0,sp,#0x20
00000e  f7fffffe          BL       pf_opendir
;;;241    		image_count = 0;
000012  2400              MOVS     r4,#0
;;;242    		if (rc == FR_OK) {
000014  2800              CMP      r0,#0
000016  d00a              BEQ      |L1.46|
;;;243    			for (;;) {
;;;244    				rc = pf_readdir(&dir, &fno);	/* Read a directory item */
;;;245    				if (rc || !fno.fname[0])
;;;246    					break;								/* Error or end of dir */
;;;247    				if (!(fno.fattrib & AM_DIR)) {
;;;248    					LCD_Erase();
;;;249    					result= pjpeg_load_from_file
;;;250    							(fno.fname, &width, &height, &comps, &scan_type,
;;;251    							 reduce);
;;;252    					if (result != 0) {
;;;253    						LCD_Text_PrintStr_RC(0, 0, "pjpeg_load_from_file ");
;;;254    						LCD_Text_PrintStr_RC(1, 0, "failed");
;;;255    						while (1)
;;;256    							;
;;;257    					} else {
;;;258    						image_count++;
;;;259    					}
;;;260    				}
;;;261    			}
;;;262    			if (image_count == 0) {
;;;263    				LCD_Text_PrintStr_RC(0, 0, "No JPEGs Found!");				
;;;264    			}
;;;265    		} else {
;;;266    			LCD_Text_PrintStr_RC(0, 0, "Couldn't open");
000018  2100              MOVS     r1,#0
00001a  a221              ADR      r2,|L1.160|
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       LCD_Text_PrintStr_RC
;;;267    			LCD_Text_PrintStr_RC(0, 0, "root directory");
000022  2100              MOVS     r1,#0
000024  a222              ADR      r2,|L1.176|
000026  4608              MOV      r0,r1
000028  f7fffffe          BL       LCD_Text_PrintStr_RC
                  |L1.44|
;;;268    			while (1)
00002c  e7fe              B        |L1.44|
                  |L1.46|
00002e  ad04              ADD      r5,sp,#0x10           ;233
000030  af10              ADD      r7,sp,#0x40           ;249
000032  3501              ADDS     r5,#1                 ;233
                  |L1.52|
000034  a902              ADD      r1,sp,#8              ;244
000036  a808              ADD      r0,sp,#0x20           ;244
000038  f7fffffe          BL       pf_readdir
00003c  2800              CMP      r0,#0                 ;245
00003e  d120              BNE      |L1.130|
000040  4668              MOV      r0,sp                 ;245
000042  7c40              LDRB     r0,[r0,#0x11]         ;245
000044  2800              CMP      r0,#0                 ;245
000046  d01c              BEQ      |L1.130|
000048  4668              MOV      r0,sp                 ;247
00004a  7c00              LDRB     r0,[r0,#0x10]         ;247
00004c  06c0              LSLS     r0,r0,#27             ;247
00004e  d4f1              BMI      |L1.52|
000050  f7fffffe          BL       LCD_Erase
000054  ab0f              ADD      r3,sp,#0x3c           ;249
000056  aa0e              ADD      r2,sp,#0x38           ;249
000058  a90d              ADD      r1,sp,#0x34           ;249
00005a  4628              MOV      r0,r5                 ;249
00005c  9700              STR      r7,[sp,#0]            ;249
00005e  9601              STR      r6,[sp,#4]            ;249
000060  f7fffffe          BL       pjpeg_load_from_file
000064  2800              CMP      r0,#0                 ;252
000066  d00a              BEQ      |L1.126|
000068  2100              MOVS     r1,#0                 ;253
00006a  a215              ADR      r2,|L1.192|
00006c  4608              MOV      r0,r1                 ;253
00006e  f7fffffe          BL       LCD_Text_PrintStr_RC
000072  a219              ADR      r2,|L1.216|
000074  2100              MOVS     r1,#0                 ;254
000076  2001              MOVS     r0,#1                 ;254
000078  f7fffffe          BL       LCD_Text_PrintStr_RC
                  |L1.124|
00007c  e7fe              B        |L1.124|
                  |L1.126|
00007e  1c64              ADDS     r4,r4,#1              ;255
000080  e7d8              B        |L1.52|
                  |L1.130|
000082  2c00              CMP      r4,#0                 ;262
000084  d104              BNE      |L1.144|
000086  2100              MOVS     r1,#0                 ;263
000088  a215              ADR      r2,|L1.224|
00008a  4608              MOV      r0,r1                 ;263
00008c  f7fffffe          BL       LCD_Text_PrintStr_RC
                  |L1.144|
;;;269    				;
;;;270    		}
;;;271    #if ENABLE_PIXEL_HASH
;;;272    		if (pixel_data_hash != 0x7D215B3D) {
;;;273    			LCD_Text_PrintStr_RC(0, 0, "Pixel hash failed");
;;;274    			while (1)
;;;275    				;
;;;276    		}
;;;277    #endif
;;;278    	} while (RUN_FOREVER);
;;;279    
;;;280    	return 0;
000090  2000              MOVS     r0,#0
;;;281    }
000092  b011              ADD      sp,sp,#0x44
000094  bdf0              POP      {r4-r7,pc}
;;;282    
                          ENDP

000096  0000              DCW      0x0000
                  |L1.152|
                          DCD      pixel_data_hash
                  |L1.156|
00009c  00                DCB      0
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L1.160|
0000a0  436f756c          DCB      "Couldn't open",0
0000a4  646e2774
0000a8  206f7065
0000ac  6e00    
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L1.176|
0000b0  726f6f74          DCB      "root directory",0
0000b4  20646972
0000b8  6563746f
0000bc  727900  
0000bf  00                DCB      0
                  |L1.192|
0000c0  706a7065          DCB      "pjpeg_load_from_file ",0
0000c4  675f6c6f
0000c8  61645f66
0000cc  726f6d5f
0000d0  66696c65
0000d4  2000    
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L1.216|
0000d8  6661696c          DCB      "failed",0
0000dc  656400  
0000df  00                DCB      0
                  |L1.224|
0000e0  4e6f204a          DCB      "No JPEGs Found!",0
0000e4  50454773
0000e8  20466f75
0000ec  6e642100

                          AREA ||i.pjpeg_load_from_file||, CODE, READONLY, ALIGN=2

                  pjpeg_load_from_file PROC
;;;59     // subsampling factor).
;;;60     int pjpeg_load_from_file(const
000000  b5ff              PUSH     {r0-r7,lr}
;;;61     														char
;;;62     														*pFilename, int
;;;63     														*x, int
;;;64     														*y, int
;;;65     														*comps,
;;;66     														pjpeg_scan_type_t
;;;67     														* pScan_type, int reduce) {
000002  b0a5              SUB      sp,sp,#0x94
;;;68     	pjpeg_image_info_t image_info;
;;;69     	int mcu_x = 0;
000004  2100              MOVS     r1,#0
000006  9c2e              LDR      r4,[sp,#0xb8]
;;;70     	int mcu_y = 0;
000008  910b              STR      r1,[sp,#0x2c]
;;;71     	uint row_pitch;
;;;72     	uint8 *pImage;
;;;73     	uint8 status;
;;;74     	uint decoded_width, decoded_height;
;;;75     	uint row_blocks_per_mcu, col_blocks_per_mcu;
;;;76     															
;;;77     	*x = 0;
00000a  460d              MOV      r5,r1
00000c  910c              STR      r1,[sp,#0x30]
00000e  9926              LDR      r1,[sp,#0x98]
;;;78     	*y = 0;
;;;79     	*comps = 0;
;;;80     	if (pScan_type)
000010  2c00              CMP      r4,#0
000012  600d              STR      r5,[r1,#0]            ;78
000014  9927              LDR      r1,[sp,#0x9c]         ;78
000016  600d              STR      r5,[r1,#0]            ;79
000018  9928              LDR      r1,[sp,#0xa0]         ;79
00001a  600d              STR      r5,[r1,#0]
00001c  d000              BEQ      |L2.32|
;;;81     		*pScan_type = PJPG_GRAYSCALE;
00001e  7025              STRB     r5,[r4,#0]
                  |L2.32|
;;;82     
;;;83     	if (FR_OK != pf_open(pFilename)) {
000020  f7fffffe          BL       pf_open
000024  2800              CMP      r0,#0
000026  d002              BEQ      |L2.46|
;;;84     		return PJPG_FILE_OPEN_FAILED;
000028  2026              MOVS     r0,#0x26
                  |L2.42|
;;;85     	}
;;;86     	g_nInFileOfs = 0;
;;;87     	// Should get the real file size with pf_readdir
;;;88     	status =
;;;89     			pjpeg_decode_init
;;;90     			(&image_info,
;;;91     			 pjpeg_need_bytes_callback, NULL, (unsigned char) reduce);
;;;92     	if (status) {
;;;93     		return status;
;;;94     	}
;;;95     
;;;96     	if (pScan_type)
;;;97     		*pScan_type = image_info.m_scanType;
;;;98     	// In reduce mode output 1 pixel per 8x8 block.
;;;99     	decoded_width =
;;;100    			reduce ? (image_info.m_MCUSPerRow *
;;;101    								image_info.m_MCUWidth) / 8 : image_info.m_width;
;;;102    	decoded_height =
;;;103    			reduce ? (image_info.m_MCUSPerCol *
;;;104    								image_info.m_MCUHeight) / 8 : image_info.m_height;
;;;105    	row_pitch = decoded_width * image_info.m_comps;
;;;106    	pImage = (uint8 *) malloc(row_pitch);	// Do one row at a time, reset at end of line
;;;107    	if (!pImage) {
;;;108    		return PJPG_NOTENOUGHMEM;
;;;109    	}
;;;110    
;;;111    	row_blocks_per_mcu = image_info.m_MCUWidth >> 3;
;;;112    	col_blocks_per_mcu = image_info.m_MCUHeight >> 3;
;;;113    	for (;;) {
;;;114    		int y, x;
;;;115    		uint8 *pDst_row;
;;;116    		status = pjpeg_decode_mcu();
;;;117    		if (status) {
;;;118    			if (status != PJPG_NO_MORE_BLOCKS) {
;;;119    				// printf("pjpeg_decode_mcu() failed with status %u\n", status);
;;;120    				free(pImage);
;;;121    				return status;
;;;122    			}
;;;123    			break;
;;;124    		}
;;;125    
;;;126    		if (mcu_y >= image_info.m_MCUSPerCol) {
;;;127    			free(pImage);
;;;128    			return PJPG_TOO_MANY_BLOCKS;
;;;129    		}
;;;130    
;;;131    		if (reduce) {
;;;132    			// In reduce mode, only the first pixel of each 8x8 block is valid.
;;;133    			pDst_row =
;;;134    					pImage +
;;;135    					mcu_y *
;;;136    					col_blocks_per_mcu *
;;;137    					row_pitch + mcu_x * row_blocks_per_mcu * image_info.m_comps;
;;;138    			if (image_info.m_scanType == PJPG_GRAYSCALE) {
;;;139    				*pDst_row = image_info.m_pMCUBufR[0];
;;;140    			} else {
;;;141    				uint y, x;
;;;142    				for (y = 0; y < col_blocks_per_mcu; y++) {
;;;143    					uint src_ofs = (y * 128U);
;;;144    					for (x = 0; x < row_blocks_per_mcu; x++) {
;;;145    						pDst_row[0] = image_info.m_pMCUBufR[src_ofs];
;;;146    						pDst_row[1] = image_info.m_pMCUBufG[src_ofs];
;;;147    						pDst_row[2] = image_info.m_pMCUBufB[src_ofs];
;;;148    						pDst_row += 3;
;;;149    						src_ofs += 64;
;;;150    					}
;;;151    					pDst_row += row_pitch - 3 * row_blocks_per_mcu;
;;;152    				}
;;;153    			}
;;;154    		} else {
;;;155    			// Copy MCU's pixel blocks into the destination bitmap.
;;;156    			PT_T pos;
;;;157    			COLOR_T color;
;;;158    			pDst_row =
;;;159    					pImage +
;;;160    					(mcu_x * image_info.m_MCUWidth * image_info.m_comps);
;;;161    			for (y = 0; y < image_info.m_MCUHeight; y += 8) {
;;;162    				const int by_limit = min(8,
;;;163    																 image_info.m_height -
;;;164    																 (mcu_y *
;;;165    																	image_info.m_MCUHeight + y));
;;;166    				for (x = 0; x < image_info.m_MCUWidth; x += 8) {
;;;167    					uint8 *pDst_block = pDst_row + x * image_info.m_comps;
;;;168    					// Compute source byte offset of the block in the decoder's MCU buffer.
;;;169    					uint src_ofs = (x * 8U) + (y * 16U);
;;;170    					const uint8 *pSrcR = image_info.m_pMCUBufR + src_ofs;
;;;171    					const uint8 *pSrcG = image_info.m_pMCUBufG + src_ofs;
;;;172    					const uint8 *pSrcB = image_info.m_pMCUBufB + src_ofs;
;;;173    					const int bx_limit = min(8,
;;;174    																	 image_info.m_width -
;;;175    																	 (mcu_x *
;;;176    																		image_info.m_MCUWidth + x));
;;;177    					if (image_info.m_scanType == PJPG_GRAYSCALE) {
;;;178    						// Grayscale image
;;;179    						int bx, by;
;;;180    						pos.Y = y + mcu_y * image_info.m_MCUHeight;
;;;181    						for (by = 0; by < by_limit; by++) {
;;;182    							uint8 *pDst = pDst_block;
;;;183    							pos.X = x + mcu_x * image_info.m_MCUWidth;
;;;184    							for (bx = 0; bx < bx_limit; bx++) {
;;;185    								color.R = color.G = color.B = *pSrcR;
;;;186    								LCD_Plot_Pixel(&pos, &color);
;;;187    								pos.X++;
;;;188    								*pDst++ = *pSrcR++;
;;;189    							}
;;;190    							pSrcR += (8 - bx_limit);
;;;191    							pDst_block += row_pitch;
;;;192    							pos.Y++;
;;;193    						}
;;;194    					} else {
;;;195    						// Color image
;;;196    						pos.Y = y + mcu_y * image_info.m_MCUHeight;
;;;197    						pos.X = x + mcu_x * image_info.m_MCUWidth;
;;;198    						PT_T ul, lr;
;;;199    						ul.Y = pos.Y;
;;;200    						ul.X = pos.X;				// x + mcu_x * image_info.m_MCUWidth;
;;;201    						lr.Y = pos.Y + by_limit;
;;;202    						lr.X = pos.X + bx_limit - 1;	//x + mcu_x * image_info.m_MCUWidth + bx_limit-1;
;;;203    						LCD_Start_Rectangle(&ul, &lr);
;;;204    						LCD_Write_Rectangle_N_Quad_Pixel_Components((uint32_t *) pSrcR,
;;;205    																												(uint32_t *) pSrcG,
;;;206    																												(uint32_t *)pSrcB,
;;;207    																												(bx_limit * by_limit) >> 2);
;;;208    					}
;;;209    				}
;;;210    			}
;;;211    		}
;;;212    		mcu_x++;
;;;213    		if (mcu_x == image_info.m_MCUSPerRow) {
;;;214    			mcu_x = 0;
;;;215    			mcu_y++;
;;;216    		}
;;;217    	}
;;;218    	*x = decoded_width;
;;;219    	*y = decoded_height;
;;;220    	*comps = image_info.m_comps;
;;;221    	free(pImage);
;;;222    	return 0;  // Success!
;;;223    }
00002a  b029              ADD      sp,sp,#0xa4
00002c  bdf0              POP      {r4-r7,pc}
                  |L2.46|
00002e  48ad              LDR      r0,|L2.740|
000030  2200              MOVS     r2,#0                 ;88
000032  6005              STR      r5,[r0,#0]            ;88  ; g_nInFileOfs
000034  982f              LDR      r0,[sp,#0xbc]         ;88
000036  49ac              LDR      r1,|L2.744|
000038  b2c3              UXTB     r3,r0                 ;88
00003a  4668              MOV      r0,sp                 ;88
00003c  f7fffffe          BL       pjpeg_decode_init
000040  2800              CMP      r0,#0                 ;92
000042  d1f2              BNE      |L2.42|
000044  2c00              CMP      r4,#0                 ;96
000046  d002              BEQ      |L2.78|
000048  4668              MOV      r0,sp                 ;97
00004a  7d00              LDRB     r0,[r0,#0x14]         ;97
00004c  7020              STRB     r0,[r4,#0]            ;97
                  |L2.78|
00004e  982f              LDR      r0,[sp,#0xbc]         ;99
000050  2800              CMP      r0,#0                 ;99
000052  d00f              BEQ      |L2.116|
000054  9906              LDR      r1,[sp,#0x18]         ;99
000056  9803              LDR      r0,[sp,#0xc]          ;99
000058  4348              MULS     r0,r1,r0              ;99
00005a  17c1              ASRS     r1,r0,#31             ;99
00005c  0f49              LSRS     r1,r1,#29             ;99
00005e  1808              ADDS     r0,r1,r0              ;99
000060  10c0              ASRS     r0,r0,#3              ;99
000062  901c              STR      r0,[sp,#0x70]         ;102
000064  9907              LDR      r1,[sp,#0x1c]         ;102
000066  9804              LDR      r0,[sp,#0x10]         ;102
000068  4348              MULS     r0,r1,r0              ;102
00006a  17c1              ASRS     r1,r0,#31             ;102
00006c  0f49              LSRS     r1,r1,#29             ;102
00006e  1808              ADDS     r0,r1,r0              ;102
000070  10c0              ASRS     r0,r0,#3              ;102
000072  e002              B        |L2.122|
                  |L2.116|
000074  9800              LDR      r0,[sp,#0]            ;99
000076  901c              STR      r0,[sp,#0x70]         ;102
000078  9801              LDR      r0,[sp,#4]            ;102
                  |L2.122|
00007a  9024              STR      r0,[sp,#0x90]         ;105
00007c  991c              LDR      r1,[sp,#0x70]         ;105
00007e  9802              LDR      r0,[sp,#8]            ;105
000080  4348              MULS     r0,r1,r0              ;105
000082  9017              STR      r0,[sp,#0x5c]         ;106
000084  f7fffffe          BL       malloc
000088  9013              STR      r0,[sp,#0x4c]         ;107
00008a  2800              CMP      r0,#0                 ;107
00008c  d018              BEQ      |L2.192|
00008e  9806              LDR      r0,[sp,#0x18]         ;111
000090  10c0              ASRS     r0,r0,#3              ;111
000092  9018              STR      r0,[sp,#0x60]         ;112
000094  9807              LDR      r0,[sp,#0x1c]         ;112
000096  10c0              ASRS     r0,r0,#3              ;112
000098  9016              STR      r0,[sp,#0x58]         ;75
00009a  9818              LDR      r0,[sp,#0x60]         ;150
00009c  0041              LSLS     r1,r0,#1              ;150
00009e  1840              ADDS     r0,r0,r1              ;150
0000a0  9917              LDR      r1,[sp,#0x5c]         ;151
0000a2  901f              STR      r0,[sp,#0x7c]         ;71
0000a4  1a08              SUBS     r0,r1,r0              ;151
0000a6  9022              STR      r0,[sp,#0x88]         ;151
                  |L2.168|
0000a8  f7fffffe          BL       pjpeg_decode_mcu
0000ac  0004              MOVS     r4,r0                 ;116
0000ae  d019              BEQ      |L2.228|
0000b0  2c01              CMP      r4,#1                 ;118
0000b2  d008              BEQ      |L2.198|
0000b4  9813              LDR      r0,[sp,#0x4c]         ;120
0000b6  f7fffffe          BL       free
0000ba  4620              MOV      r0,r4                 ;121
0000bc  b029              ADD      sp,sp,#0xa4
0000be  bdf0              POP      {r4-r7,pc}
                  |L2.192|
0000c0  2022              MOVS     r0,#0x22              ;108
0000c2  b029              ADD      sp,sp,#0xa4
0000c4  bdf0              POP      {r4-r7,pc}
                  |L2.198|
0000c6  9926              LDR      r1,[sp,#0x98]         ;218
0000c8  981c              LDR      r0,[sp,#0x70]         ;218
0000ca  6008              STR      r0,[r1,#0]            ;219
0000cc  9927              LDR      r1,[sp,#0x9c]         ;219
0000ce  9824              LDR      r0,[sp,#0x90]         ;219
0000d0  6008              STR      r0,[r1,#0]            ;220
0000d2  9828              LDR      r0,[sp,#0xa0]         ;220
0000d4  9902              LDR      r1,[sp,#8]            ;220
0000d6  6001              STR      r1,[r0,#0]            ;221
0000d8  9813              LDR      r0,[sp,#0x4c]         ;221
0000da  f7fffffe          BL       free
0000de  2000              MOVS     r0,#0                 ;222
0000e0  b029              ADD      sp,sp,#0xa4
0000e2  bdf0              POP      {r4-r7,pc}
                  |L2.228|
0000e4  9904              LDR      r1,[sp,#0x10]         ;126
0000e6  980c              LDR      r0,[sp,#0x30]         ;126
0000e8  4281              CMP      r1,r0                 ;126
0000ea  dc05              BGT      |L2.248|
0000ec  9813              LDR      r0,[sp,#0x4c]         ;127
0000ee  f7fffffe          BL       free
0000f2  2016              MOVS     r0,#0x16              ;128
0000f4  b029              ADD      sp,sp,#0xa4
0000f6  bdf0              POP      {r4-r7,pc}
                  |L2.248|
0000f8  982f              LDR      r0,[sp,#0xbc]         ;131
0000fa  2800              CMP      r0,#0                 ;131
0000fc  d03b              BEQ      |L2.374|
0000fe  9a18              LDR      r2,[sp,#0x60]         ;133
000100  980b              LDR      r0,[sp,#0x2c]         ;133
000102  9902              LDR      r1,[sp,#8]            ;133
000104  4350              MULS     r0,r2,r0              ;133
000106  4341              MULS     r1,r0,r1              ;133
000108  9a16              LDR      r2,[sp,#0x58]         ;133
00010a  980c              LDR      r0,[sp,#0x30]         ;133
00010c  4350              MULS     r0,r2,r0              ;133
00010e  9a17              LDR      r2,[sp,#0x5c]         ;133
000110  4350              MULS     r0,r2,r0              ;133
000112  1809              ADDS     r1,r1,r0              ;133
000114  9813              LDR      r0,[sp,#0x4c]         ;133
000116  180e              ADDS     r6,r1,r0              ;133
000118  4668              MOV      r0,sp                 ;138
00011a  7d00              LDRB     r0,[r0,#0x14]         ;138
00011c  2800              CMP      r0,#0                 ;138
00011e  d026              BEQ      |L2.366|
000120  9816              LDR      r0,[sp,#0x58]         ;142
000122  2800              CMP      r0,#0                 ;142
000124  d07e              BEQ      |L2.548|
000126  2500              MOVS     r5,#0                 ;142
000128  2800              CMP      r0,#0                 ;142
00012a  d97b              BLS      |L2.548|
                  |L2.300|
00012c  9818              LDR      r0,[sp,#0x60]         ;144
00012e  01e9              LSLS     r1,r5,#7              ;143
000130  2800              CMP      r0,#0                 ;144
000132  d015              BEQ      |L2.352|
000134  9a08              LDR      r2,[sp,#0x20]         ;144
000136  9c0a              LDR      r4,[sp,#0x28]         ;144
000138  1853              ADDS     r3,r2,r1              ;144
00013a  9a09              LDR      r2,[sp,#0x24]         ;144
00013c  4630              MOV      r0,r6                 ;144
00013e  1852              ADDS     r2,r2,r1              ;144
000140  1861              ADDS     r1,r4,r1              ;144
000142  9c18              LDR      r4,[sp,#0x60]         ;144
                  |L2.324|
000144  781f              LDRB     r7,[r3,#0]            ;145
000146  7007              STRB     r7,[r0,#0]            ;145
000148  7817              LDRB     r7,[r2,#0]            ;146
00014a  7047              STRB     r7,[r0,#1]            ;146
00014c  780f              LDRB     r7,[r1,#0]            ;147
00014e  7087              STRB     r7,[r0,#2]            ;147
000150  1cc0              ADDS     r0,r0,#3              ;147
000152  3140              ADDS     r1,r1,#0x40           ;147
000154  3240              ADDS     r2,r2,#0x40           ;147
000156  3340              ADDS     r3,r3,#0x40           ;147
000158  1e64              SUBS     r4,r4,#1              ;147
00015a  d1f3              BNE      |L2.324|
00015c  981f              LDR      r0,[sp,#0x7c]         ;150
00015e  1986              ADDS     r6,r0,r6              ;150
                  |L2.352|
000160  9822              LDR      r0,[sp,#0x88]         ;151
000162  1c6d              ADDS     r5,r5,#1              ;151
000164  1986              ADDS     r6,r0,r6              ;151
000166  9816              LDR      r0,[sp,#0x58]         ;151
000168  4285              CMP      r5,r0                 ;151
00016a  d3df              BCC      |L2.300|
00016c  e072              B        |L2.596|
                  |L2.366|
00016e  9808              LDR      r0,[sp,#0x20]         ;139
000170  7800              LDRB     r0,[r0,#0]            ;139
000172  7030              STRB     r0,[r6,#0]            ;139
000174  e06e              B        |L2.596|
                  |L2.374|
000176  9902              LDR      r1,[sp,#8]            ;158
000178  9806              LDR      r0,[sp,#0x18]         ;158
00017a  4348              MULS     r0,r1,r0              ;158
00017c  990b              LDR      r1,[sp,#0x2c]         ;158
00017e  4348              MULS     r0,r1,r0              ;158
000180  9913              LDR      r1,[sp,#0x4c]         ;158
000182  1840              ADDS     r0,r0,r1              ;158
000184  900e              STR      r0,[sp,#0x38]         ;161
000186  2000              MOVS     r0,#0                 ;161
000188  9012              STR      r0,[sp,#0x48]         ;161
00018a  9807              LDR      r0,[sp,#0x1c]         ;161
00018c  2800              CMP      r0,#0                 ;161
00018e  dd61              BLE      |L2.596|
                  |L2.400|
000190  990c              LDR      r1,[sp,#0x30]         ;162
000192  9807              LDR      r0,[sp,#0x1c]         ;162
000194  9a01              LDR      r2,[sp,#4]            ;162
000196  4348              MULS     r0,r1,r0              ;162
000198  9912              LDR      r1,[sp,#0x48]         ;162
00019a  1840              ADDS     r0,r0,r1              ;162
00019c  1a10              SUBS     r0,r2,r0              ;162
00019e  2808              CMP      r0,#8                 ;162
0001a0  dd00              BLE      |L2.420|
0001a2  2008              MOVS     r0,#8                 ;162
                  |L2.420|
0001a4  9015              STR      r0,[sp,#0x54]         ;166
0001a6  2000              MOVS     r0,#0                 ;166
0001a8  900d              STR      r0,[sp,#0x34]         ;166
0001aa  9806              LDR      r0,[sp,#0x18]         ;166
0001ac  2800              CMP      r0,#0                 ;166
0001ae  dd4b              BLE      |L2.584|
0001b0  0108              LSLS     r0,r1,#4              ;166
0001b2  9023              STR      r0,[sp,#0x8c]         ;169
                  |L2.436|
0001b4  990d              LDR      r1,[sp,#0x34]         ;167
0001b6  9802              LDR      r0,[sp,#8]            ;167
0001b8  9a00              LDR      r2,[sp,#0]            ;173
0001ba  4348              MULS     r0,r1,r0              ;167
0001bc  990e              LDR      r1,[sp,#0x38]         ;167
0001be  1840              ADDS     r0,r0,r1              ;167
0001c0  901b              STR      r0,[sp,#0x6c]         ;169
0001c2  980d              LDR      r0,[sp,#0x34]         ;169
0001c4  00c1              LSLS     r1,r0,#3              ;169
0001c6  9823              LDR      r0,[sp,#0x8c]         ;169
0001c8  1808              ADDS     r0,r1,r0              ;169
0001ca  9908              LDR      r1,[sp,#0x20]         ;170
0001cc  180d              ADDS     r5,r1,r0              ;170
0001ce  9909              LDR      r1,[sp,#0x24]         ;171
0001d0  180f              ADDS     r7,r1,r0              ;171
0001d2  990a              LDR      r1,[sp,#0x28]         ;172
0001d4  180e              ADDS     r6,r1,r0              ;172
0001d6  990b              LDR      r1,[sp,#0x2c]         ;173
0001d8  9806              LDR      r0,[sp,#0x18]         ;173
0001da  4348              MULS     r0,r1,r0              ;173
0001dc  990d              LDR      r1,[sp,#0x34]         ;173
0001de  1840              ADDS     r0,r0,r1              ;173
0001e0  1a14              SUBS     r4,r2,r0              ;173
0001e2  2c08              CMP      r4,#8                 ;173
0001e4  dd00              BLE      |L2.488|
0001e6  2408              MOVS     r4,#8                 ;173
                  |L2.488|
0001e8  4668              MOV      r0,sp                 ;177
0001ea  7d00              LDRB     r0,[r0,#0x14]         ;177
0001ec  2800              CMP      r0,#0                 ;177
0001ee  d03e              BEQ      |L2.622|
0001f0  9907              LDR      r1,[sp,#0x1c]         ;196
0001f2  980c              LDR      r0,[sp,#0x30]         ;196
0001f4  4341              MULS     r1,r0,r1              ;196
0001f6  9812              LDR      r0,[sp,#0x48]         ;196
0001f8  1808              ADDS     r0,r1,r0              ;196
0001fa  9011              STR      r0,[sp,#0x44]         ;197
0001fc  990b              LDR      r1,[sp,#0x2c]         ;197
0001fe  9806              LDR      r0,[sp,#0x18]         ;197
000200  4348              MULS     r0,r1,r0              ;197
000202  990d              LDR      r1,[sp,#0x34]         ;197
000204  1840              ADDS     r0,r0,r1              ;197
000206  9010              STR      r0,[sp,#0x40]         ;199
000208  9811              LDR      r0,[sp,#0x44]         ;199
00020a  9021              STR      r0,[sp,#0x84]         ;200
00020c  9810              LDR      r0,[sp,#0x40]         ;200
00020e  9020              STR      r0,[sp,#0x80]         ;201
000210  9915              LDR      r1,[sp,#0x54]         ;201
000212  9811              LDR      r0,[sp,#0x44]         ;201
000214  1840              ADDS     r0,r0,r1              ;201
000216  901b              STR      r0,[sp,#0x6c]         ;202
000218  9910              LDR      r1,[sp,#0x40]         ;202
00021a  1e60              SUBS     r0,r4,#1              ;202
00021c  1808              ADDS     r0,r1,r0              ;202
00021e  a91a              ADD      r1,sp,#0x68           ;203
000220  901a              STR      r0,[sp,#0x68]         ;203
000222  e000              B        |L2.550|
                  |L2.548|
000224  e016              B        |L2.596|
                  |L2.550|
000226  a820              ADD      r0,sp,#0x80           ;203
000228  f7fffffe          BL       LCD_Start_Rectangle
00022c  9815              LDR      r0,[sp,#0x54]         ;204
00022e  4632              MOV      r2,r6                 ;204
000230  4344              MULS     r4,r0,r4              ;204
000232  10a3              ASRS     r3,r4,#2              ;204
000234  4639              MOV      r1,r7                 ;204
000236  4628              MOV      r0,r5                 ;204
000238  f7fffffe          BL       LCD_Write_Rectangle_N_Quad_Pixel_Components
                  |L2.572|
00023c  980d              LDR      r0,[sp,#0x34]         ;209
00023e  9906              LDR      r1,[sp,#0x18]         ;209
000240  3008              ADDS     r0,r0,#8              ;209
000242  900d              STR      r0,[sp,#0x34]         ;209
000244  4281              CMP      r1,r0                 ;209
000246  dcb5              BGT      |L2.436|
                  |L2.584|
000248  9812              LDR      r0,[sp,#0x48]         ;210
00024a  9907              LDR      r1,[sp,#0x1c]         ;210
00024c  3008              ADDS     r0,r0,#8              ;210
00024e  9012              STR      r0,[sp,#0x48]         ;210
000250  4281              CMP      r1,r0                 ;210
000252  dc9d              BGT      |L2.400|
                  |L2.596|
000254  980b              LDR      r0,[sp,#0x2c]         ;212
000256  9903              LDR      r1,[sp,#0xc]          ;213
000258  1c40              ADDS     r0,r0,#1              ;212
00025a  900b              STR      r0,[sp,#0x2c]         ;213
00025c  4281              CMP      r1,r0                 ;213
00025e  d000              BEQ      |L2.610|
000260  e722              B        |L2.168|
                  |L2.610|
000262  2000              MOVS     r0,#0                 ;214
000264  900b              STR      r0,[sp,#0x2c]         ;215
000266  980c              LDR      r0,[sp,#0x30]         ;215
000268  1c40              ADDS     r0,r0,#1              ;215
00026a  900c              STR      r0,[sp,#0x30]         ;215
00026c  e71c              B        |L2.168|
                  |L2.622|
00026e  990c              LDR      r1,[sp,#0x30]         ;180
000270  9807              LDR      r0,[sp,#0x1c]         ;180
000272  4348              MULS     r0,r1,r0              ;180
000274  9912              LDR      r1,[sp,#0x48]         ;180
000276  1840              ADDS     r0,r0,r1              ;180
000278  9011              STR      r0,[sp,#0x44]         ;181
00027a  2000              MOVS     r0,#0                 ;181
00027c  901a              STR      r0,[sp,#0x68]         ;181
00027e  9815              LDR      r0,[sp,#0x54]         ;181
000280  2800              CMP      r0,#0                 ;181
000282  dddb              BLE      |L2.572|
000284  2008              MOVS     r0,#8                 ;162
000286  1b00              SUBS     r0,r0,r4              ;190
000288  9020              STR      r0,[sp,#0x80]         ;190
                  |L2.650|
00028a  990b              LDR      r1,[sp,#0x2c]         ;183
00028c  9806              LDR      r0,[sp,#0x18]         ;183
00028e  9e1b              LDR      r6,[sp,#0x6c]         ;183
000290  4348              MULS     r0,r1,r0              ;183
000292  990d              LDR      r1,[sp,#0x34]         ;183
000294  2700              MOVS     r7,#0                 ;184
000296  1840              ADDS     r0,r0,r1              ;183
000298  9010              STR      r0,[sp,#0x40]         ;184
00029a  2c00              CMP      r4,#0                 ;184
00029c  dd12              BLE      |L2.708|
                  |L2.670|
00029e  7829              LDRB     r1,[r5,#0]            ;185
0002a0  a818              ADD      r0,sp,#0x60           ;185
0002a2  7681              STRB     r1,[r0,#0x1a]         ;185
0002a4  7641              STRB     r1,[r0,#0x19]         ;185
0002a6  7601              STRB     r1,[r0,#0x18]         ;185
0002a8  a91e              ADD      r1,sp,#0x78           ;186
0002aa  a810              ADD      r0,sp,#0x40           ;186
0002ac  f7fffffe          BL       LCD_Plot_Pixel
0002b0  9810              LDR      r0,[sp,#0x40]         ;187
0002b2  1c7f              ADDS     r7,r7,#1              ;188
0002b4  1c40              ADDS     r0,r0,#1              ;187
0002b6  9010              STR      r0,[sp,#0x40]         ;188
0002b8  7828              LDRB     r0,[r5,#0]            ;188
0002ba  7030              STRB     r0,[r6,#0]            ;188
0002bc  1c6d              ADDS     r5,r5,#1              ;188
0002be  1c76              ADDS     r6,r6,#1              ;188
0002c0  42a7              CMP      r7,r4                 ;188
0002c2  dbec              BLT      |L2.670|
                  |L2.708|
0002c4  9820              LDR      r0,[sp,#0x80]         ;190
0002c6  9917              LDR      r1,[sp,#0x5c]         ;191
0002c8  1945              ADDS     r5,r0,r5              ;190
0002ca  981b              LDR      r0,[sp,#0x6c]         ;191
0002cc  1840              ADDS     r0,r0,r1              ;191
0002ce  901b              STR      r0,[sp,#0x6c]         ;192
0002d0  9811              LDR      r0,[sp,#0x44]         ;192
0002d2  1c40              ADDS     r0,r0,#1              ;192
0002d4  9011              STR      r0,[sp,#0x44]         ;193
0002d6  981a              LDR      r0,[sp,#0x68]         ;193
0002d8  1c40              ADDS     r0,r0,#1              ;193
0002da  901a              STR      r0,[sp,#0x68]         ;193
0002dc  9915              LDR      r1,[sp,#0x54]         ;193
0002de  4288              CMP      r0,r1                 ;193
0002e0  dbd3              BLT      |L2.650|
0002e2  e7ab              B        |L2.572|
;;;224    
                          ENDP

                  |L2.740|
                          DCD      ||.data||
                  |L2.744|
                          DCD      pjpeg_need_bytes_callback

                          AREA ||i.pjpeg_need_bytes_callback||, CODE, READONLY, ALIGN=2

                  pjpeg_need_bytes_callback PROC
;;;33     //------------------------------------------------------------------------------
;;;34     unsigned char pjpeg_need_bytes_callback(unsigned char *pBuf,
000000  b538              PUSH     {r3-r5,lr}
;;;35     																				unsigned char buf_size,
;;;36     																				unsigned char
;;;37     																				*pBytes_actually_read,
;;;38     																				void *pCallback_data) {
000002  4614              MOV      r4,r2
;;;39     	FRESULT rc;
;;;40     	UINT br;
;;;41     
;;;42     // 	pCallback_data;
;;;43     	rc = pf_read(pBuf, buf_size, &br);
000004  466a              MOV      r2,sp
000006  f7fffffe          BL       pf_read
;;;44     	if (rc != FR_OK) {
00000a  2800              CMP      r0,#0
00000c  d001              BEQ      |L3.18|
;;;45     		return PJPG_STREAM_READ_ERROR;
00000e  2021              MOVS     r0,#0x21
;;;46     	}
;;;47     
;;;48     	*pBytes_actually_read = (unsigned char) (br);
;;;49     	g_nInFileOfs += br;
;;;50     
;;;51     	return 0;
;;;52     }
000010  bd38              POP      {r3-r5,pc}
                  |L3.18|
000012  4669              MOV      r1,sp                 ;48
000014  8808              LDRH     r0,[r1,#0]            ;48
000016  7020              STRB     r0,[r4,#0]            ;48
000018  4803              LDR      r0,|L3.40|
00001a  8809              LDRH     r1,[r1,#0]            ;49
00001c  6802              LDR      r2,[r0,#0]            ;49  ; g_nInFileOfs
00001e  1851              ADDS     r1,r2,r1              ;49
000020  6001              STR      r1,[r0,#0]            ;51  ; g_nInFileOfs
000022  2000              MOVS     r0,#0                 ;51
000024  bd38              POP      {r3-r5,pc}
;;;53     
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  g_nInFileOfs
                          DCD      0x00000000

                          AREA ||area_number.7||, DATA, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.data||
                  g_pInData
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Source\\LCD\\LCD_JPEG.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_LCD_JPEG_c_733496a3____REV16|
#line 447 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.1\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_LCD_JPEG_c_733496a3____REV16| PROC
#line 448

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_LCD_JPEG_c_733496a3____REVSH|
#line 462
|__asm___10_LCD_JPEG_c_733496a3____REVSH| PROC
#line 463

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
