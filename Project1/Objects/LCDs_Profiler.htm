<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\LCDs_Profiler.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\LCDs_Profiler.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Fri Mar 06 14:04:27 2020
<BR><P>
<H3>Maximum Stack Usage =        540 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; LCD_JPEG &rArr; pjpeg_load_from_file &rArr; pf_open &rArr; follow_path &rArr; disk_readp &rArr; SD_Read &rArr; __SD_Send_Cmd &rArr;  __SD_Send_Cmd (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[57]">__SD_Send_Cmd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57]">__SD_Send_Cmd</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[15]">ADC0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[16]">CMP0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1f]">DAC0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[6]">DMA0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[7]">DMA1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[8]">DMA2_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[9]">DMA3_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[29]">DefaultISR</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(.text)
 <LI><a href="#[b]">FTFA_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[e]">I2C0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[f]">I2C1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[d]">LLWU_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[22]">LPTMR0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[c]">LVD_LVW_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[21]">MCG_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1c]">PIT_IRQHandler</a> from pit.o(i.PIT_IRQHandler) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[24]">PORTA_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[25]">PORTD_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1b]">RTC_Seconds_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[a]">Reserved20_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1d]">Reserved39_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[23]">Reserved45_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[10]">SPI0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[11]">SPI1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_mkl25z4.o(i.SystemInit) referenced from startup_mkl25z4.o(.text)
 <LI><a href="#[17]">TPM0_IRQHandler</a> from timers.o(i.TPM0_IRQHandler) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[18]">TPM1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[19]">TPM2_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[20]">TSI0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[12]">UART0_IRQHandler</a> from uart.o(i.UART0_IRQHandler) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[14]">UART2_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[1e]">USB0_IRQHandler</a> from startup_mkl25z4.o(.text) referenced from startup_mkl25z4.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mkl25z4.o(.text)
 <LI><a href="#[2a]">_snputc</a> from printf6.o(i._snputc) referenced from printf6.o(i.__0snprintf$6)
 <LI><a href="#[2b]">_sputc</a> from printf6.o(i._sputc) referenced from printf6.o(i.__0sprintf$6)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[2c]">pjpeg_need_bytes_callback</a> from lcd_jpeg.o(i.pjpeg_need_bytes_callback) referenced from lcd_jpeg.o(i.pjpeg_load_from_file)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[83]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[84]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[85]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[86]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[87]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>FTFA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>LLWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PORTA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Reserved39_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Reserved45_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TPM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TPM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TSI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl25z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_mount
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Profiling
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Profile
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TS_Read
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[89]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>Control_RGB_LEDs</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, leds.o(i.Control_RGB_LEDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Control_RGB_LEDs
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>Delay</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, delay.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TS_Read
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Controller_Init
</UL>

<P><STRONG><a name="[30]"></a>Display_Profile</STRONG> (Thumb, 194 bytes, Stack size 88 bytes, profile.o(i.Display_Profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Display_Profile &rArr; LCD_Text_PrintStr &rArr; LCD_Text_PrintChar &rArr; LCD_Start_Rectangle
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Text_Set_Colors
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Text_PrintStr
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TS_Blocking_Read
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Erase
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>Init_DMA</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, main.o(i.Init_DMA))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>Init_Debug_Signals</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, debug.o(i.Init_Debug_Signals))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>Init_Profiling</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, profile.o(i.Init_Profiling))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Init_Profiling &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Start
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>Init_RGB_LEDs</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, leds.o(i.Init_RGB_LEDs))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>LCD_Controller_Init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, st7789.o(i.LCD_Controller_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_Controller_Init &rArr; Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[36]"></a>LCD_Erase</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lcd_text.o(i.LCD_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Erase &rArr; LCD_Fill_Buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_JPEG
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Profile
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>LCD_Fill_Buffer</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, st7789.o(i.LCD_Fill_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Fill_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Erase
</UL>

<P><STRONG><a name="[3e]"></a>LCD_GPIO_Init</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, st7789.o(i.LCD_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[3d]"></a>LCD_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, st7789.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_Init &rArr; LCD_Controller_Init &rArr; Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TS_Init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Controller_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>LCD_JPEG</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, lcd_jpeg.o(i.LCD_JPEG))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = LCD_JPEG &rArr; pjpeg_load_from_file &rArr; pf_open &rArr; follow_path &rArr; disk_readp &rArr; SD_Read &rArr; __SD_Send_Cmd &rArr;  __SD_Send_Cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_readdir
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_opendir
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpeg_load_from_file
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Text_PrintStr_RC
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>LCD_Plot_Pixel</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, st7789.o(i.LCD_Plot_Pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Plot_Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpeg_load_from_file
</UL>

<P><STRONG><a name="[48]"></a>LCD_Start_Rectangle</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, st7789.o(i.LCD_Start_Rectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Start_Rectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpeg_load_from_file
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Text_PrintChar
</UL>

<P><STRONG><a name="[35]"></a>LCD_TS_Blocking_Read</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, touchscreen.o(i.LCD_TS_Blocking_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCD_TS_Blocking_Read &rArr; LCD_TS_Read &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TS_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Profile
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>LCD_TS_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, touchscreen.o(i.LCD_TS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[46]"></a>LCD_TS_Read</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, touchscreen.o(i.LCD_TS_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_TS_Read &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TS_Blocking_Read
</UL>

<P><STRONG><a name="[74]"></a>LCD_Text_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lcd_text.o(i.LCD_Text_Init))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>LCD_Text_PrintChar</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, lcd_text.o(i.LCD_Text_PrintChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_Text_PrintChar &rArr; LCD_Start_Rectangle
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Start_Rectangle
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Rectangle_Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Text_PrintStr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Text_PrintStr_RC
</UL>

<P><STRONG><a name="[34]"></a>LCD_Text_PrintStr</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lcd_text.o(i.LCD_Text_PrintStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_Text_PrintStr &rArr; LCD_Text_PrintChar &rArr; LCD_Start_Rectangle
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Text_PrintChar
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Profile
</UL>

<P><STRONG><a name="[43]"></a>LCD_Text_PrintStr_RC</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lcd_text.o(i.LCD_Text_PrintStr_RC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_Text_PrintStr_RC &rArr; LCD_Text_PrintChar &rArr; LCD_Start_Rectangle
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Text_PrintChar
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_JPEG
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>LCD_Text_Set_Colors</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcd_text.o(i.LCD_Text_Set_Colors))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Profile
</UL>

<P><STRONG><a name="[80]"></a>LCD_Write_Rectangle_N_Quad_Pixel_Components</STRONG> (Thumb, 110 bytes, Stack size 36 bytes, st7789.o(i.LCD_Write_Rectangle_N_Quad_Pixel_Components))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_Write_Rectangle_N_Quad_Pixel_Components
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpeg_load_from_file
</UL>

<P><STRONG><a name="[49]"></a>LCD_Write_Rectangle_Pixel</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, st7789.o(i.LCD_Write_Rectangle_Pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Write_Rectangle_Pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Text_PrintChar
</UL>

<P><STRONG><a name="[1c]"></a>PIT_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pit.o(i.PIT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PIT_IRQHandler &rArr; Process_Profile_Sample
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Profile_Sample
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PIT_Init</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, pit.o(i.PIT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PIT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Profiling
</UL>

<P><STRONG><a name="[39]"></a>PIT_Start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pit.o(i.PIT_Start))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Profiling
</UL>

<P><STRONG><a name="[40]"></a>PWM_Init</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, timers.o(i.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PWM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[4a]"></a>Process_Profile_Sample</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, profile.o(i.Process_Profile_Sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Process_Profile_Sample
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_IRQHandler
</UL>

<P><STRONG><a name="[4b]"></a>Q_Dequeue</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, queue.o(i.Q_Dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Q_Dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>Q_Empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, queue.o(i.Q_Empty))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Dequeue
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[4d]"></a>Q_Enqueue</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, queue.o(i.Q_Enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Q_Enqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[4e]"></a>Q_Full</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, queue.o(i.Q_Full))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Enqueue
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>SD_Init</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, sd_io.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SD_Init &rArr; __SD_Sectors &rArr; __SD_Send_Cmd &rArr;  __SD_Send_Cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Timer_Status
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Timer_On
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Timer_Off
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Release
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Freq_High
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_High
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SD_Send_Cmd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SD_Sectors
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[5a]"></a>SD_Read</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, sd_io.o(i.SD_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SD_Read &rArr; __SD_Send_Cmd &rArr;  __SD_Send_Cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Timer_On
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SD_Send_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_readp
</UL>

<P><STRONG><a name="[51]"></a>SPI_CS_High</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi_io.o(i.SPI_CS_High))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SD_Send_Cmd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[5e]"></a>SPI_CS_Low</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi_io.o(i.SPI_CS_Low))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SD_Send_Cmd
</UL>

<P><STRONG><a name="[52]"></a>SPI_Freq_High</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_io.o(i.SPI_Freq_High))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[50]"></a>SPI_Init</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, spi_io.o(i.SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[53]"></a>SPI_RW</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, spi_io.o(i.SPI_RW))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SD_Send_Cmd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SD_Sectors
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[59]"></a>SPI_Release</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, spi_io.o(i.SPI_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Release
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[56]"></a>SPI_Timer_Off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_io.o(i.SPI_Timer_Off))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[54]"></a>SPI_Timer_On</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, spi_io.o(i.SPI_Timer_On))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[55]"></a>SPI_Timer_Status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi_io.o(i.SPI_Timer_Status))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SD_Send_Cmd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[78]"></a>Sort_Profile_Regions</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, profile.o(i.Sort_Profile_Regions))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sort_Profile_Regions
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, system_mkl25z4.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>TPM0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timers.o(i.TPM0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART0_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0_IRQHandler &rArr; Q_Dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Full
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Enqueue
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Empty
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_Dequeue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl25z4.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>__0snprintf$6</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, printf6.o(i.__0snprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8a]"></a>__1snprintf$6</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf6.o(i.__0snprintf$6), UNUSED)

<P><STRONG><a name="[32]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf6.o(i.__0snprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Profile
</UL>

<P><STRONG><a name="[5d]"></a>__0sprintf$6</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8b]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[77]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>__SD_Sectors</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, sd_io.o(i.__SD_Sectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __SD_Sectors &rArr; __SD_Send_Cmd &rArr;  __SD_Send_Cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SD_Send_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[57]"></a>__SD_Send_Cmd</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, sd_io.o(i.__SD_Send_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + In Cycle
<LI>Call Chain = __SD_Send_Cmd &rArr;  __SD_Send_Cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Timer_Status
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Low
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_High
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SD_Send_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SD_Send_Cmd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SD_Sectors
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[8c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[8d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[8e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[6e]"></a>disk_initialize</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; __SD_Sectors &rArr; __SD_Send_Cmd &rArr;  __SD_Send_Cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_mount
</UL>

<P><STRONG><a name="[6d]"></a>disk_readp</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diskio.o(i.disk_readp))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = disk_readp &rArr; SD_Read &rArr; __SD_Send_Cmd &rArr;  __SD_Send_Cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_readdir
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_read
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_mount
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[7f]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpeg_load_from_file
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = main &rArr; LCD_JPEG &rArr; pjpeg_load_from_file &rArr; pf_open &rArr; follow_path &rArr; disk_readp &rArr; SD_Read &rArr; __SD_Send_Cmd &rArr;  __SD_Send_Cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_mount
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sort_Profile_Regions
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Text_PrintStr_RC
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Text_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TS_Blocking_Read
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_JPEG
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Erase
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Profiling
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Debug_Signals
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Profile
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_DMA
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RGB_LEDs
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_RGB_LEDs
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7e]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpeg_load_from_file
</UL>

<P><STRONG><a name="[75]"></a>pf_mount</STRONG> (Thumb, 436 bytes, Stack size 64 bytes, pff.o(i.pf_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = pf_mount &rArr; disk_initialize &rArr; SD_Init &rArr; __SD_Sectors &rArr; __SD_Send_Cmd &rArr;  __SD_Send_Cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_readp
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>pf_open</STRONG> (Thumb, 134 bytes, Stack size 80 bytes, pff.o(i.pf_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = pf_open &rArr; follow_path &rArr; disk_readp &rArr; SD_Read &rArr; __SD_Send_Cmd &rArr;  __SD_Send_Cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpeg_load_from_file
</UL>

<P><STRONG><a name="[42]"></a>pf_opendir</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, pff.o(i.pf_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = pf_opendir &rArr; follow_path &rArr; disk_readp &rArr; SD_Read &rArr; __SD_Send_Cmd &rArr;  __SD_Send_Cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_JPEG
</UL>

<P><STRONG><a name="[7a]"></a>pf_read</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, pff.o(i.pf_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = pf_read &rArr; disk_readp &rArr; SD_Read &rArr; __SD_Send_Cmd &rArr;  __SD_Send_Cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_readp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpeg_need_bytes_callback
</UL>

<P><STRONG><a name="[44]"></a>pf_readdir</STRONG> (Thumb, 502 bytes, Stack size 80 bytes, pff.o(i.pf_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = pf_readdir &rArr; dir_next &rArr; disk_readp &rArr; SD_Read &rArr; __SD_Send_Cmd &rArr;  __SD_Send_Cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_readp
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_JPEG
</UL>

<P><STRONG><a name="[7b]"></a>pjpeg_decode_init</STRONG> (Thumb, 1226 bytes, Stack size 32 bytes, picojpeg.o(i.pjpeg_decode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pjpeg_decode_init &rArr; processMarkers &rArr; getBits &rArr; getOctet &rArr; getChar
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processMarkers
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBits
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpeg_load_from_file
</UL>

<P><STRONG><a name="[7d]"></a>pjpeg_decode_mcu</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, picojpeg.o(i.pjpeg_decode_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pjpeg_decode_mcu &rArr; decodeNextMCU &rArr; huffDecode &rArr; getOctet &rArr; getChar
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeNextMCU
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpeg_load_from_file
</UL>

<P><STRONG><a name="[45]"></a>pjpeg_load_from_file</STRONG> (Thumb, 740 bytes, Stack size 184 bytes, lcd_jpeg.o(i.pjpeg_load_from_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = pjpeg_load_from_file &rArr; pf_open &rArr; follow_path &rArr; disk_readp &rArr; SD_Read &rArr; __SD_Send_Cmd &rArr;  __SD_Send_Cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpeg_decode_mcu
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpeg_decode_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_open
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Rectangle_N_Quad_Pixel_Components
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Start_Rectangle
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Plot_Pixel
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_JPEG
</UL>

<P><STRONG><a name="[2c]"></a>pjpeg_need_bytes_callback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcd_jpeg.o(i.pjpeg_need_bytes_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = pjpeg_need_bytes_callback &rArr; pf_read &rArr; disk_readp &rArr; SD_Read &rArr; __SD_Send_Cmd &rArr;  __SD_Send_Cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_jpeg.o(i.pjpeg_load_from_file)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[69]"></a>copyY</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, picojpeg.o(i.copyY))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copyY
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeNextMCU
</UL>

<P><STRONG><a name="[61]"></a>decodeNextMCU</STRONG> (Thumb, 4112 bytes, Stack size 80 bytes, picojpeg.o(i.decodeNextMCU))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = decodeNextMCU &rArr; huffDecode &rArr; getOctet &rArr; getChar
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upsampleCrV
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upsampleCrH
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upsampleCr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upsampleCbV
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upsampleCbH
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upsampleCb
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffDecode
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChar
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyY
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpeg_decode_mcu
</UL>

<P><STRONG><a name="[63]"></a>getBits</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, picojpeg.o(i.getBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = getBits &rArr; getOctet &rArr; getChar
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOctet
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpeg_decode_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processMarkers
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeNextMCU
</UL>

<P><STRONG><a name="[62]"></a>getChar</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, picojpeg.o(i.getChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getChar
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOctet
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeNextMCU
</UL>

<P><STRONG><a name="[70]"></a>getOctet</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, picojpeg.o(i.getOctet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getOctet &rArr; getChar
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getChar
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffDecode
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBits
</UL>

<P><STRONG><a name="[64]"></a>huffDecode</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, picojpeg.o(i.huffDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = huffDecode &rArr; getOctet &rArr; getChar
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOctet
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeNextMCU
</UL>

<P><STRONG><a name="[7c]"></a>processMarkers</STRONG> (Thumb, 726 bytes, Stack size 72 bytes, picojpeg.o(i.processMarkers))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = processMarkers &rArr; getBits &rArr; getOctet &rArr; getChar
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pjpeg_decode_init
</UL>

<P><STRONG><a name="[6a]"></a>upsampleCb</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, picojpeg.o(i.upsampleCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = upsampleCb
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeNextMCU
</UL>

<P><STRONG><a name="[67]"></a>upsampleCbH</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, picojpeg.o(i.upsampleCbH))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = upsampleCbH
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeNextMCU
</UL>

<P><STRONG><a name="[65]"></a>upsampleCbV</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, picojpeg.o(i.upsampleCbV))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = upsampleCbV
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeNextMCU
</UL>

<P><STRONG><a name="[6b]"></a>upsampleCr</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, picojpeg.o(i.upsampleCr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = upsampleCr
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeNextMCU
</UL>

<P><STRONG><a name="[68]"></a>upsampleCrH</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, picojpeg.o(i.upsampleCrH))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = upsampleCrH
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeNextMCU
</UL>

<P><STRONG><a name="[66]"></a>upsampleCrV</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, picojpeg.o(i.upsampleCrV))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = upsampleCrV
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeNextMCU
</UL>

<P><STRONG><a name="[6c]"></a>dir_next</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, pff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dir_next &rArr; disk_readp &rArr; SD_Read &rArr; __SD_Send_Cmd &rArr;  __SD_Send_Cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_readp
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_readdir
</UL>

<P><STRONG><a name="[6f]"></a>follow_path</STRONG> (Thumb, 588 bytes, Stack size 40 bytes, pff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = follow_path &rArr; disk_readp &rArr; SD_Read &rArr; __SD_Send_Cmd &rArr;  __SD_Send_Cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_readp
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_opendir
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pf_open
</UL>

<P><STRONG><a name="[5c]"></a>_printf_core</STRONG> (Thumb, 768 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$6
</UL>

<P><STRONG><a name="[60]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5f]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2a]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf6.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0snprintf$6)
</UL>
<P><STRONG><a name="[2b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
